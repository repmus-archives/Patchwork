;;;;;;Making a PW image;;;(in-package "CCL")(defvar *images-folder-name* "Images")(defun set-cl-logical-path ()  (let* ((path  (get-string-from-user                   "Please enter absolute pathname of PW 2.6 PPC folder"                  :initial-string                 (string-right-trim                  ":"                  (namestring                   (make-pathname                    :directory                    (butlast (pathname-directory *loading-file-source-file*))))))))    (if path      (let ((*print-pretty* nil)            (sequences (cddr (pathname-directory (format () "~A:" path))))            logical-path part-log)        (load (format () "~A:PW-inits:PW-init" path) :verbose t)        (setq logical-path              (format () "root:~A**;"                      (dolist (seq sequences part-log)                        (setq part-log (concatenate 'string part-log seq ";")))))        (setf (logical-pathname-translations "CL")              (list (list "**;" logical-path)))        (setf (logical-pathname-translations "RESTORE")              (list (list "**;" "CL:PW-inits;RESTORE;**;")))        ))));aaa 3-10-95 for scripts;(defvar *oldstartup-finished* ())(defun load-all-patchwork ()  (ccl:require "Modules" "RESTORE:Modules")  (load "CL:PW-Inits;Load+Update;make-PW-music-image" :verbose t))(eval-when (load eval) ;;compile)  (load "ccl:library;save-application-dialog") ; (defun startup-finished-for-pw () (print "Welcome to Patchwork 2.5")) ; (setf (symbol-function '*oldstartup-finished*) (symbol-function 'startup-finished))  (set-cl-logical-path)  (load-all-patchwork))