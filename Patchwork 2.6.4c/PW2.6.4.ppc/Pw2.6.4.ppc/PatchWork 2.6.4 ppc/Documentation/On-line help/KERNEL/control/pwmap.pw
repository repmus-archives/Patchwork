(in-package :pw)(make-win 'c-pw-window "3control/pwmap" 2555912 23790129 (list (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 12321060 (list " Comme ce module est extensible, il est possible de gérer plusieurs listes, par l'ouverture d'entrées <arg> auxquelles sera  connecté un module 'enum'.") 4260112) (sbox 'c-enum-collect-source 'enum "enum" nil 7340062 (list "(1 2)")) (sbox 'c-map-first 'pwmap "pwmap" nil 8978835 (list "foo" "(1 2)" "foo")) (sbox 'c-enum-collect-source 'enum "enum" nil 1180035 (list "(1 2)")) (sbox 'c-map-first 'pwmap "pwmap" nil 16777231 (list "foo" "(1 2)")) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 7405647 (list "<<<---Le module \"enum\" reçoit une liste et la retourne élément par élément.") 2162937) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil -327580 (list ".             PWMAP.   Cet ensemble de  modules  permet la création d'une liste à. partir de l'évaluation d'un patch qui prend en compte tous les. éléments d'une liste (un à un)  qui soit connectée au module 'enum'.") 6422765) (abst 'c-abstract-m 'user-abstraction::plus "plus1" nil 21627225 (list) 'nil 'nil (make-win 'c-pw-window "plus1" 2490371 21561822 (list (abst 'c-abstract-m 'user-abstraction::plus "plus2" t 11075935 (list) 'nil 'nil (make-win 'c-pw-window "plus2" 2424832 23527860 (list (sbox 'c-abstract-out 'absout "absout" nil 1376811 (list "plus2")) (sbox 'c-pw-resize-x 'const "const" nil 5964023 (list "(a b c d e f g h i j)") 2228407) (sbox 'c-pw-resize-x 'const "const" nil 5701700 (list "(1 2 3 4 5 6 7 8 9 10 11)") 2228390) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 917599 (list " Comme ce module est extensible, il est possible de gérer plusieurs listes, par l'ouverture d'entrées <arg> auxquelles sera  connecté un module 'enum'.") 4260112) (sbox 'c-enum-collect-source 'enum "enum" nil 11010328 (list "(1 2)")) (sbox 'c-enum-collect-source 'enum "enum" nil 9830589 (list "(1 2)")) (sbox 'c-map-first 'pwmap "pwmap" nil 19661003 (list "foo" "(1 2)" "foo")) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 8847364 (list "OBS!!!! Remarquer que les deux listes ont des longueurs différentes") 3408041) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 13893642 (list "pour le calcul, \"pwmap\" considère la liste plus courte.") 3080356) (sbox 'c-pw-functional 'list "list" nil 16646381 (list 0 0))) (list (list 4 0 1) (list 5 0 2) (list 6 0 4) (list 6 1 9) (list 6 2 5) (list 9 0 5) (list 9 1 4)) nil)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 18939910 (list ":::: \"PWMAP\" sera utile dans tout processus où il est nécessaire d'énumérer les éléments d'une liste") 2425156) (sbox 'c-map-first 'pwmap "pwmap" nil 16121923 (list "foo" "(1 2)")) (sbox 'c-patch 'g* "g*" nil 13303954 (list 0 0)) (sbox 'c-patch-chord-box-m 'chord "chord" nil 524545 (list (note (list 6000 100 0 0 nil 1 100 nil))) nil :midic) (sbox 'c-abstract-out 'absout "absout" nil 197102 (list "plus1")) (sbox 'c-enum-collect-source 'enum "enum" nil 7602252 (list "(1 2)")) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil -131071 (list ":::Voici, par exemple, la construction d'une série harmonique à partir d'une liste de rangs harmoniques.") 2883825) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 3211267 (list "rangs-->>") 1900622) (sbox 'c-pw-resize-x 'mc->f "mc->f" nil 10551542 (list 6000) 2228270) (sbox 'c-pw-resize-x 'const "const" nil 3407965 (list "(1  2 3 4 5 6 7 8 9)") 2228362) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 13762801 (list "<<-- multiplication de la fondamentale par un des rangs") 2621616) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 6488403 (list "pour plus d'informations double-cliquer sur le module <plus2> vvvvvvvvvv") 4063353)) (list (list 2 0 6) (list 2 1 3) (list 3 0 6) (list 3 1 9) (list 6 0 10) (list 9 0 4)) nil)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 4522010 (list "LISTE vvvvvv") 2490420) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 19398660 (list ":::A l'évaluation, \"pwmap\" va rendre une liste constituée par les évaluations du patch avec chaque élément de la liste qui a été connectée à \"enum\". ") 4260072) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 10616861 (list "::::::::::::::::::::::::::::::::::  ::::A cet endroit il peut y avoir un patch qui reçoit les éléments de la liste 'enumérés par \"enum\" et qui ait sa sortie  connectée à l'entrée <patch> de \"pwmap\"") 5243107) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 17301830 (list "pour plus d'informations double-cliquer sur le module <plus1> vvvvvvvvvv") 4063353) (sbox 'c-enum-collect-source 'enum "enum" nil 3932607 (list "(1 2)"))) (list (list 2 0 12) (list 2 2 3) (list 4 0 1)) t)