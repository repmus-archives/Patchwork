(in-package :pw)(make-win 'c-pw-window "5control/test-a" 2621457 22872469 (list (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 13762655 (list "Cet exemple compare si le nombre aléatoire généré est égal à 0 (zéro)") 2294000) (sbox 'c-pw-test 'test "test" nil 9109687 (list "=" 0 0 0 0)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 3932267 (list "::Si le test est réussi l'entrée <val 1> est évaluée, en cas contraire c'est l'entrée <else> qui sera évaluée.") 3604709) (sbox 'c-patch 'g-random "g-random" nil 8061227 (list -2 2)) (sbox 'c-pw-resize-x 'const "const" nil 9306150 (list "(différent de zéro)") 2228358) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 16449699 (list "pour plus d'informations double-cliquer sur le module <plus> vvvvvvvvvv") 4063353) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil -196544 (list ".                    TEST.    Le module \"test\" applique  un prédicat .<pred> (ou <trestf> si les entrées optionnelles .sont ouvertes) en utilisant les entrées <input> .           et <test1> comme arguments.") 4391224) (sbox 'c-pw-resize-x 'const "const" nil 11075867 (list "(égal à zéro)") 2228332) (abst 'c-abstract-m 'user-abstraction::plus "plus" t 20906178 (list) 'nil 'nil (make-win 'c-pw-window "plus" 2555904 27198016 (list (sbox 'c-abstract-out 'absout "absout" nil 590410 (list "plus")) (sbox 'c-pw-resize-x 'const "const" nil 18612532 (list "(le test2 est vrai- <val2> est évalué)") 2228466) (sbox 'c-pw-test 'test "test" nil 17170644 (list "=" 0 0 0 1 0 2 0 0)) (sbox 'c-pw-resize-x 'const "const" nil 21299229 (list "(aucun des tests est vrai)") 2228392) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 93 (list ":::::Il est possible de faire des tests multiples::::: Dans ce cas il faut ouvrir les entrées optionnelles :::::::(<option>+clique sur 'E') ") 2818384) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 3014718 (list ".             Dans le cas de tests multiples  .     le module compare  <input> à <test1>, <test2,..., .        jusqu'à <testn> ( selon le prédicat <testf>)  .La valeur retournée par le module sera l'évaluation de l'entrée .correspondante au <testn> vrai. .        Chaque <testn> correspond à une entrée <valn>. .     Par exemple si <test2> est vrai, <val2> sera évaluée. .           Dans le cas où aucun des test est vrai .            l'entrée <else> sera, alors  évaluée. ") 7930260) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 11796512 (list "OBS!!!! (le prédicat change de non lorsque les entrées optionnelles sont ouvertes de <pred> à <testf>)") 3604653) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 16121880 (list "::Valeurs de réfence pour la comparaison avec <input> .              -testf--->>>>.              -test1--->>>> .              -test2--->>>> .              -test3--->>>>") 5046458) (sbox 'c-patch 'g-random "g-random" nil 13828307 (list -3 6)) (sbox 'c-pw-resize-x 'const "const" nil 21365044 (list "(le test3 est vrai- <val3> est évalué)") 2228467) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 24051794 (list "OBS!!!! Il est possible de connecter aux entrées des patches ") 2097526) (sbox 'c-pw-resize-x 'const "const" nil 15860020 (list "(le test1 est vrai- <val1> est évalué)") 2228464)) (list (list 2 1 8) (list 2 3 11) (list 2 5 1) (list 2 7 9) (list 2 8 3)) nil))) (list (list 1 1 3) (list 1 3 7) (list 1 4 4)) t)