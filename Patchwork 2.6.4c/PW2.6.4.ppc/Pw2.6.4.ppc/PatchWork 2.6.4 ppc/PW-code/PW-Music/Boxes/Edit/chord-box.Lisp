;;;;=========================================================;;;;;;;;  PATCH-WORK;;;;  By Mikael Laurson, Jacques Duthen, Camilo Rueda.;;;;  © 1986-1992 IRCAM ;;;;;;;;=========================================================(in-package :pw)(defclass C-chord-box (C-ttybox)  ((chord-line :initform      (make-instance 'C-chord-line         :chords (list           (make-instance 'C-chord :t-time 0               :notes (list  (make-instance 'C-note :midic 6000)))))           :initarg :chord-line :accessor chord-line)))(defmethod value ((self C-chord-box))  ;this is really the decompilation [911023]  `(note    ,@(mapcar #'get-useful-note-slots (notes (car (chords (chord-line self)))))))(defmethod get-useful-note-slots ((self C-note))  `(list ,(midic self) ,(dur self) ,(offset-time self) ,(order self) ,(comm self) ,(chan self) ,(vel self)        ,(if (instrument self) (decompile (instrument self)))))(defmethod (setf value) (notes (self C-chord-box))  (setf (chord-line self)        (make-instance 'C-chord-line                        :chords (list                                (make-instance 'C-chord :t-time 0                                                :notes notes)))))(defun note (&rest list) (apply 'form-note-objs list))(defun form-note-objs (&rest list)  (let (note instrument)  (mapcar #'(lambda (note-form)               (setq note (make-instance 'C-note :midic (first note-form)                                        :dur (second note-form)                                        :offset-time (third note-form)                                        :order (fourth note-form)                                        :comm (fifth note-form)                                        :chan (or (sixth note-form) 1)                                        :vel (seventh note-form)                                        :instrument  (setq instrument (eval (eighth note-form)))))              (if instrument                (make-super-note-connections instrument note *current-MN-window*))              note)          (apply #'list list))))  (defmethod give-mid-y ((self C-chord-box)) (+ 5 (y self)(truncate (/ (h self) 2))))(defmethod draw-cb-staffs ((self C-chord-box) mid-y)   (draw-string 0 (- mid-y 31) "==")  (draw-string 0 (- mid-y 3) "==")  (draw-string 0 (+ mid-y 21) "==")  (draw-string 0 (+ mid-y 49) "=="))(defmethod view-draw-contents ((self C-chord-box))  (let ((*mn-view-dyn-flag* nil)        (*mn-view-dur-flag* nil)        (*mn-view-ins-flag* nil)        (*mn-view-offset-flag* nil)        (*mn-view-order-flag* nil)        (*staff-num* 6))    (declare (special *mn-view-dyn-flag* *mn-view-dur-flag*                      *mn-view-ins-flag* *mn-view-offset-flag*                      *mn-view-order-flag* *staff-num*))    (let ((mid-y (give-mid-y self))          (pw-win-font (view-font (view-container (view-container  self)))))      (with-focused-view self        (set-view-font  (view-container (view-container  self))                        '("MusNot-j"  18  :srcor))        (if (chords (chord-line self))         (draw-chord (car (chords (chord-line self))) 1 (+ 25 (x self)) 0 mid-y))        (draw-cb-staffs self mid-y))      (set-view-font  (view-container (view-container  self)) pw-win-font))))(defmethod update-control ((self C-chord-box))  (with-focused-view self     (with-pen-state (:mode :srccopy :pattern *white-pattern*)        (fill-rect* 0 0 (w self) (h self)))     (view-draw-contents self)))(defmethod view-double-click-event-handler ((self C-chord-box) where)  (declare (ignore where)) )(defmethod view-click-event-handler ((self C-chord-box) where)  (declare (ignore where)) );;New value selection methods for the new chord patch box(defmethod get-chord-midics ((self C-chord-box))  (ask-all (notes (car (chords (chord-line self)))) 'midic))(defmethod get-chord-offset ((self C-chord-box))   (ask-all (notes (car (chords (chord-line self)))) 'offset-time)) (defmethod get-chord-duration ((self C-chord-box))  (ask-all (notes (car (chords (chord-line self)))) 'dur))(defmethod get-chord-dynamic ((self C-chord-box))  (ask-all (notes (car (chords (chord-line self)))) 'vel))(defmethod get-chord-order ((self C-chord-box))  (ask-all (notes (car (chords (chord-line self)))) 'order))