;;;;=========================================================;;;;;;;;  PATCH-WORK;;;;  By Mikael Laurson, Jacques Duthen, Camilo Rueda.;;;;  © 1986-1992 IRCAM ;;;;;;;;=========================================================(in-package :pw);=======================================================================================;=======================================================================================(defclass C-pw-outrect (BUTTON-DIALOG-ITEM) ())(defmethod view-draw-contents ((self C-pw-outrect))   (draw-rect (x self)(y self)(w self)(h self)))(defmethod fill-patch-outrect ((self C-pw-outrect))  (with-focused-view self     (with-pen-state (:mode :patxor)      (fill-rect* 1 1 8 3))))      (defmethod mid-x ((self C-pw-outrect)) (+ (x (view-container self)) (x self) 4))(defmethod mid-y ((self C-pw-outrect)) (+ (y (view-container self)) (h (view-container self)) -2))#|(defmethod view-click-event-handler ((self C-pw-outrect) where)  (if (option-key-p)    (progn (incf (clock *global-clock*))           (eval-enqueue            `(format t "PW->~S~%"                     (patch-value ',(view-container self) ',(view-container self)))))     (drag-out-line self where)     ))|#(defvar *standard-click-eval* t)(defun set-eval-click (option)  (if option     (progn (set-menu-item-check-mark *option-click-menu* t)           (set-menu-item-check-mark *click-menu* nil))    (progn (set-menu-item-check-mark *option-click-menu* nil)           (set-menu-item-check-mark *click-menu* t)))  (setf *standard-click-eval* option))(defun get-evaluation-option () *standard-click-eval*)(defmethod view-click-event-handler ((self C-pw-outrect) where)  (if *standard-click-eval*     (if (option-key-p)      (progn (incf (clock *global-clock*))             (eval-enqueue              `(format t "PW->~S~%"                       (patch-value ',(view-container self) ',(view-container self))))             ;aaa             (record--ae :|PWst| :|eval| `((,:|----| ,(mkSO :|cbox| nil :|name| (pw-function-string (view-container self))))))             )      (drag-out-line self where))    (if (option-key-p)      (drag-out-line self where)      (progn (incf (clock *global-clock*))             (eval-enqueue              `(format t "PW->~S~%"                       (patch-value ',(view-container self) ',(view-container self)))))      )))(defmethod drag-out-line ((view C-pw-outrect) where)  (let* ((win (view-window view))         (last-mp (view-mouse-position win)))   (setq where (view-mouse-position win))   (with-pen-state (:mode :patxor)   (with-focused-view (view-window view)    (loop      (unless (mouse-down-p) (return))      (let ((mp (view-mouse-position win)))        (unless (eql mp last-mp)          (draw-line (point-h where)(point-v where)(point-h last-mp)(point-v last-mp))          (setq last-mp mp)          (draw-line (point-h where)(point-v where)(point-h last-mp)(point-v last-mp)))))       (draw-line (point-h where)(point-v where)(point-h last-mp)(point-v last-mp))))       (connect-patch? view (find-view-containing-point win last-mp))       (with-focused-view view         (erase-view-inside-rect view))))(defmethod connect-patch? ((self C-pw-outrect) ctrl)  (unless (eq ctrl self)    (let* ((patch (view-container ctrl)))      (when patch        (let ((inde (if (patch-type-p patch) (find-nth-ctrl patch ctrl))))          (when (and (patch-type-p (view-container ctrl))                      (not (eq (class-name (class-of ctrl)) 'C-pw-outrect)))            (if (and (and (not (equal (type-list ctrl) '(no-connection)))                            (not (equal (type-list (view-container self)) '(no-connection))))                       (or (intersection  (type-list ctrl) (type-list (view-container self)) :test 'eq)                         (not (type-list ctrl))(not (type-list (view-container self))))) ; no type-list specified              (progn                 (tell (subviews (view-window patch)) 'draw-connections t)                (connect-ctrl patch ctrl (view-container self))                (if (check-recursive-connections (view-container self)(view-container self))                  (progn                     (ED-BEEP)                    (setf inde nil)                    (disconnect-ctrl-1 patch ctrl)                    (print "Recursive connections not allowed !")                    (set-open-state ctrl t))                   (progn                     (when (or (eq (pw-function (view-container self)) 'absin)                              (eq (pw-function (view-container self)) 'absin2))                      (set-dialog-item-text (car (pw-controls (view-container self))) (doc-string ctrl)))                    (set-view-font (view-window self) '("Monaco" 9 :SRCOR :PLAIN)) ;??                    (set-open-state ctrl nil)))                (tell (subviews (view-window patch)) 'draw-connections)                (when inde                   (record--ae :|PWst| :|conn| `((,:|----| ,(mkSO :|cbox| nil :|name| (pw-function-string (view-container self))))                                                (,:|data| ,(mkSO :|cinp| (mkSO :|cbox| nil :|name| (pw-function-string patch))                                                                :|indx| (+ inde 1)))))))              (progn                 (ED-BEEP)                (format t "Mismatch of type ! ~%~a~%"                         (list 'output (type-list (view-container self)) 'input (type-list ctrl)))))))))));=======================================================================================;=======================================================================================(defclass C-patch (view)   ((input-objects :initform nil  :accessor input-objects)   (pw-controls :initform nil  :accessor pw-controls)   (type-list :initform ()  :initarg :type-list :accessor type-list)   (in-xs :initform nil  :accessor in-xs)   (in-ys :initform nil  :accessor in-ys)   (active-mode :initform nil :initarg :active-mode :accessor active-mode)   (flip-flag :initform t  :accessor flip-flag)   (out-put :initform nil :initarg :out-put :accessor out-put)   (pw-function-string :initform "+"  :accessor pw-function-string)   (pw-function :initform '+ :initarg :pw-function :accessor pw-function)))(defmethod decompile-connections ((self C-patch) patch-controls)  (let ((input-objects (input-objects self))        (connections) input-objects-now        (nth-control-self (nth? self patch-controls))        nth-control)    (for (i 0 1 (1- (length input-objects)))       (when (not (eq (nth i input-objects) (nth i (pw-controls self))))        (setq input-objects-now           (if (atom (nth i input-objects))               (list (nth i input-objects))               (nth i input-objects)))         (while input-objects-now           (setq nth-control (nth? (pop input-objects-now)  patch-controls))           (when nth-control              (push                 `(connect-nth-control (nth ,nth-control-self controls) ,i (nth ,nth-control controls))                 connections)))))       (nreverse connections)))(defmethod save((self C-patch))  (if *pw-nosave-mode*     (ccl::message-dialog "Sorry this version cannot save files.")    (let* ((new-name             (choose-new-file-dialog :directory (string (pw-function self))                                     :button-string "Save patch as"))                      (*print-pretty* nil)           (*decompile-chords-mode* t))      (setf (pw-function-string self) (string-downcase  (pathname-name new-name)))      (delete-file new-name)   ;ML      (with-cursor *watch-cursor*        (WITH-OPEN-FILE (out new-name :direction :output :if-exists :supersede :if-does-not-exist :create)          (prin1 '(in-package :pw) out)          (let ((*package* :pw))            (prin1 `(add-patch-box *active-patch-window* ,(decompile self)) out)))))))(defmethod yourself-if-collecting ((self C-patch)) nil);======================================================;init(defmethod initialize-instance :after ((self C-patch) &key controls)  (declare (ignore controls))  (setf (input-objects self) (copy-list (subviews self)))  (setf (pw-controls self) (copy-list (subviews self)))  (let (out-box)     (add-subviews self (setq out-box (make-instance 'C-pw-outrect                                         :view-position                                            (make-point (- (round (w self) 2) 6)                                                        (- (h self) 5))                                        :view-size (make-point 10 5))))     (setf (out-put self) out-box))   (init-pw-function-string self)   (init-xs-ys self))(defmethod init-pw-function-string ((self C-patch))   (setf (pw-function-string self) (string-downcase (string (pw-function self)))))(defmethod init-xs-ys ((self C-patch))  (let ((ctrls (pw-controls self)))   (setf (in-xs self)(make-list (length ctrls)))    (setf (in-ys self)(make-list (length ctrls)))    (for (i 0 1 (1- (length ctrls)))       (setf (nth i (in-xs self))         (if (> (x (nth i ctrls)) 5) (- (w self) 3) 0))      (setf (nth i (in-ys self)) (+ (y (nth i ctrls)) (- (truncate (h (nth i ctrls)) 2) 3))))))(defmethod erase-BPF-label? ((self C-patch)) nil) ;======================================================;events; can be used by subclasses; should return as value a flag(defmethod mouse-pressed-no-active-extra ((self C-patch) x y)   (declare (ignore x y))   nil)(defvar *current-move-patch-box* ())(defvar *draw-dragging-mode* ())(defun flip-draw-mode ()  (declare (special *draw-dragging-mode* *PWoper-menu*))  (let ((menu (find-menu-item *PWoper-menu* "Draw all when dragging")))    (if (menu-item-check-mark menu)      (set-menu-item-check-mark menu nil)      (set-menu-item-check-mark menu t))    (setf *draw-dragging-mode* (not *draw-dragging-mode*))))(defmethod view-click-event-handler ((self C-patch) where)  (if (eq self (call-next-method))    (progn                                                  ;inside patch,no active controls      (with-focused-view self        (cond ((double-click-p) (open-patch-win self))              ((and (control-key-p) (option-key-p)) (delete-extra-inputs self))              ((control-key-p) (setf *current-move-patch-box* self)(move-or-resize-view self where))              ((inside-rectangle?  (point-h where)(point-v where) 0 0 (w self) 5)                (setf *current-move-patch-box* self)(move-or-resize-view self where))              ((inside-rectangle?  (point-h where)(point-v where) (- (w self) 5) (- (h self) 5) 5 5)                (setf *current-move-patch-box* self)(move-or-resize-view self where t))              ((inside-rectangle?  (point-h where)(point-v where) 0 (- (h self) 12) 15 12)                (cond ((option-key-p)  (print (list 'outputtype (type-list self))))                      ((command-key-p) (print (list 'inputtypes (mapcar 'list                                                                        (ask-all (pw-controls self) 'doc-string)(ask-all (pw-controls self) 'type-list)))))                      (t (flip-controls self (setf (flip-flag self) (not (flip-flag self)))))))               ((option-key-p) (mouse-pressed-no-active-extra self (point-h where) (point-v where)))              (t (toggle-patch-active-mode self)))))    (when (option-key-p)                                   ;inside controls      (let ((ctrl (ask (pw-controls self) #'view-contains-point-p+self where)))        (when ctrl           (disconnect-ctrl self ctrl)          (record--ae :|PWst| :|unco| `((,:|----| ,(mkSO :|cinp| (mkSO :|cbox| nil :|name| (pw-function-string self))                                                                :|indx| (+ (position ctrl (input-objects self)) 1)))))          ))))) ;======================================================;draw(defmethod view-focus-and-draw-contents ((v C-patch) &optional visrgn cliprgn)  (declare (ignore visrgn cliprgn))  (with-focused-view v    (view-draw-contents v)))(defmethod view-draw-contents ((self C-patch))  (with-pen-state (:pattern *white-pattern*)     (fill-rect* 1 1 (- (w self) 2) (- (h self) 2)))    (with-font-focused-view self '("Monaco" 9 :SRCOR :PLAIN)                            (call-next-method)                            (draw-small-rects self)                            (draw-patch-view-outline self)                            (draw-function-name self 2 (- (h self) 5))                            (draw-rect 0 0 (w self)(h self))))(defmethod print-connections ((self C-patch) &optional erase-mode)   (setq erase-mode (if erase-mode *white-pattern* *black-pattern*))   (with-pen-state (:mode :srccopy) ;srccopy       (let* ((input-objects (input-objects self)) (pw-controls (pw-controls self))            (x-self (x self))            (y-self (y self))            (in-xs (in-xs self))            (in-ys (in-ys self))            ctrl x-off x-off2             x1 y1 xi yi right?)         (for (i 0 1 (1- (length pw-controls)))           (setq x-off (if (setq right? (> (car in-xs) 0)) 6 -4))           (setq x-off2 (if right? (* (truncate i 2) 2) (* (truncate i 2) -2)))           (when (and (setq ctrl (pop input-objects))                      (not (eq ctrl (pop pw-controls))))              (when (atom ctrl)(setq ctrl (list ctrl))) ; for nargs                (while ctrl               (unless (eq erase-mode *white-pattern*)                   (setq erase-mode (if (pw-object-p (type-list (car ctrl)))                                *object-connection-draw-mode* *normal-connection-draw-mode*)))               (with-pen-state (:pattern erase-mode)                 (setq x1 (mid-x (out-put (car ctrl))))                 (setq y1 (mid-y (out-put (pop ctrl))))                 (setq xi (+ x-self (car in-xs)))                 (setq yi (+ y-self (car in-ys)))                 (draw-line x1 (+ 1 y1) x1 (+ 3 y1))                  (draw-line x1 (+ 4 y1) (+ x-off2  x-off xi) (+ 4 y1))                 (draw-line (+ x-off2  x-off xi) (+ 4 y1)                                            (+ x-off2 x-off xi) (+ 2 yi))                 (draw-line (+ x-off2 x-off xi)(+ 2 yi)                      (if (= x-off 6)(+ 3 xi)(1- xi)) (+ 2 yi)))))            (pop in-xs)(pop in-ys)))))(defmethod draw-patch-extra ((self C-patch)))(defmethod draw-patch-view-outline ((self C-patch))  (draw-line 0 3 (w self) 3)   (when (active-mode self)      (with-pen-state (:pattern *black-pattern*) (fill-rect* 0 0 (w self) 3)))  (draw-patch-extra self))(defmethod draw-function-name ((self C-patch) x y)  (draw-string x y (pw-function-string self)))(defmethod update-absin-doc-string ((self C-patch)) )(defmethod draw-small-rects ((self C-patch))  (for (i 0 1 (1- (length (pw-controls self))))     (unless (member 'no-connection (type-list (nth i (pw-controls self))) :test 'eq)       (draw-rect (nth i (in-xs self)) (nth i (in-ys self)) 3 6)))); draw-connections is called only by the window not by a patch !(defvar *object-connection-draw-mode* *gray-pattern*) (defvar *normal-connection-draw-mode* *black-pattern*) (defun pw-object-p (types-list)   (intersection types-list *pw-object-type-list* :test 'eq))(defmethod draw-connections ((self C-patch) &optional erase-mode from-patches) (with-focused-view (view-window self)   (setq erase-mode (if erase-mode *white-pattern* *black-pattern*))   (with-pen-state (:mode :srccopy) ;srccopy       (let* ((input-objects (input-objects self)) (pw-controls (pw-controls self))            (x-self (x self))            (y-self (y self))            (in-xs (in-xs self))            (in-ys (in-ys self))            ctrl x-off x-off2             x1 y1 xi yi right?)         (for (i 0 1 (1- (length pw-controls)))           (setq x-off (if (setq right? (> (car in-xs) 0)) 6 -4))           (setq x-off2 (if right? (* (truncate i 2) 2) (* (truncate i 2) -2)))           (when (and (setq ctrl (pop input-objects))                      (not (eq ctrl (pop pw-controls)))                      (or (null from-patches) (member ctrl from-patches :test #'eq)))              (if (atom ctrl) (setq ctrl (list ctrl))) ; for nargs                (while ctrl               (unless (eq erase-mode *white-pattern*)                   (setq erase-mode (if (pw-object-p (type-list (car ctrl)))                                *object-connection-draw-mode* *normal-connection-draw-mode*)))               (with-pen-state (:pattern erase-mode)                 (setq x1 (mid-x (out-put (car ctrl))))                 (setq y1 (mid-y (out-put (pop ctrl))))                 (setq xi (+ x-self (car in-xs)))                 (setq yi (+ y-self (car in-ys)))                 (draw-line x1 (+ 1 y1) x1 (+ 3 y1))                  (draw-line x1 (+ 4 y1) (+ x-off2  x-off xi) (+ 4 y1))                 (draw-line (+ x-off2  x-off xi) (+ 4 y1)                                            (+ x-off2 x-off xi) (+ 2 yi))                 (draw-line (+ x-off2 x-off xi)(+ 2 yi)                      (if (= x-off 6)(+ 3 xi)(1- xi)) (+ 2 yi)))))            (pop in-xs)(pop in-ys))))))(defmethod repaint-connections ((self C-patch) all-dead)  (let ((objects (set-difference (input-objects self) all-dead)))    (dolist (dead-patch all-dead)      (if (intersection objects (input-objects dead-patch))        (draw-connections self)))));======================================================;connect(defmethod check-recursive-connections ((self simple-view) patch) (declare (ignore patch)) nil)(defmethod check-recursive-connections ((self C-patch) patch)  (if (member patch (input-objects self) :test #'eq)     T     (progn        (let ((inputs (input-objects self)) flag)        (while inputs           (if (listp (car inputs))              (setq flag (ask (car inputs)  #'check-recursive-connections patch))               (setq flag (check-recursive-connections (car inputs) patch)))           (when flag (setq inputs ()))           (pop inputs))           flag))))(defmethod connect-nth-control ((self C-patch) nth-ctrl ctrl-panel)  (setf (nth nth-ctrl (input-objects self)) ctrl-panel)  (setf (open-state (nth nth-ctrl (pw-controls self))) ()))(defmethod find-nth-ctrl ((self C-patch) ctrl)  (let ((ctrls (pw-controls self))        (nth-count))    (for (i 0 1 (1- (length ctrls)))         (when (eq (nth i ctrls) ctrl)           (setq nth-count i) (setq i 1000)))    nth-count))(defmethod connect-ctrl ((self C-patch) ctrl patch)   (setf (nth (find-nth-ctrl self ctrl) (input-objects self)) patch))(defmethod disconnect-my-self ((self C-patch) patch)  (for (i 0 1 (1- (length (input-objects self))))       (when (eq (nth i (input-objects self)) patch)         (setf (nth i (input-objects self))(nth i (pw-controls self)))         (setf (open-state (nth i (pw-controls self))) t))))(defmethod disconnect-ctrl-1 ((self C-patch) ctrl)  (let ((nth-count (find-nth-ctrl self ctrl)))      (setf (nth nth-count (input-objects self)) ctrl)))(defmethod disconnect-ctrl ((self C-patch) ctrl)  (let ((nth-count (find-nth-ctrl self ctrl)))    (when (not (eq ctrl (nth nth-count (input-objects self))))      (tell (controls (view-window self)) 'draw-connections t)      (setf (nth nth-count (input-objects self)) ctrl)      (tell (controls (view-window self)) 'draw-connections)      (setf (open-state ctrl) t)      (view-focus-and-draw-contents ctrl))));======================================================;resize(defmethod set-view-size :before ((view C-patch) h &optional v)  (declare (ignore h v))  (inval-r-view-sides view))(defmethod set-view-size :after ((view C-patch) h &optional v)  (declare (ignore h v))  (inval-r-view-sides view))(defmethod inval-r-view-sides ((view C-patch) &optional top&left?)  (when (wptr view)    (let* ((pos (view-scroll-position view))           (size (view-size view))           (end-pos (add-points pos size))           (rgn *r-view-temp-region*))      (unless top&left?        (setq pos (subtract-points pos #@(1 1))))      (#_SetRectRgn :ptr rgn :long pos :long end-pos)      (#_InsetRgn :ptr rgn :long #@(1 1))      (#_DiffRgn :ptr (view-clip-region view) :ptr rgn :ptr rgn)      (with-focused-view view        (#_EraseRgn :ptr rgn)        (#_InvalRgn :ptr rgn)))));======================================================;move(defmethod dmove-patch ((self C-patch) dx dy)  (record--ae :|core| :|move| `((,:|----| ,(mkSO :|cbox| nil :|name| (pw-function-string self)))                                      (,:|insh| ,(cl-user::getDescRecPtr (cl-user::asAEDesc (list (+ (x self) dx) (+ (y self) dy)))))))  (set-view-position self (+ (x self) dx)(+ (y self) dy)))(defmethod set-view-scroll-position ((view C-patch) h &optional v scroll-visibly?)  (declare (ignore scroll-visibly?))  (without-interrupts   (let ((old-scroll (view-scroll-position view)))     (call-next-method)     (let ((pos (view-position view)))       (unwind-protect         (setf (slot-value view 'view-position)               (add-points pos (subtract-points old-scroll (make-point h v))))         (inval-r-view-sides view t))       (setf (slot-value view 'view-position) pos)))   (inval-r-view-sides view t)))(defmethod handle-edit-events ((self C-patch) char)  (case char    (#\Newline      (set-dialog-item-text-from-dialog *pw-controls-current-pw-control*                                        (dialog-item-text *pw-controls-dialog-text-item*))     (kill-text-item))    (otherwise (view-key-event-handler *pw-controls-dialog-text-item* char)               (set-fred-display-start-mark *pw-controls-dialog-text-item* 0)               (fred-update *pw-controls-dialog-text-item*))))  (defun push-modules-to-back (actives)  (let* ((modules (slot-value (view-container (car actives)) 'view-subviews))        (length (1- (length modules)))        (rest actives) (index length)  box)    (for (i length -1 0)      (when (member (setq box (aref modules i)) rest :test #'eq)        (when (/= index i)          (psetf (aref modules index) box                  (aref modules i) (aref modules index)                 rest (remove box rest :test #'eq))          (unless rest (return )))        (decf index)))))(defmethod push-to-top ((view C-patch))  (let* ((modules (slot-value (view-container view) 'view-subviews))         (length (1- (length modules)))         (index (for (i 0 1 length) (if (eq view (aref modules i)) (return i)))))    (if (> index 2)      (psetf (aref modules 0) (aref modules index)              (aref modules index) (aref modules 0)))))(defmethod move-or-resize-view ((view C-patch) where &optional resize-fl)  (let* ((container (view-container view))         (prev-mp (view-mouse-position container))         (last-mp prev-mp)         (delta where)         (fix-pos prev-mp)         (current-pos (view-position view))         (w (view-window view))         (from-end (subtract-points (view-size view) where))         (change-size? (and (resize-patch? view) resize-fl))         (active-patches (active-patches w))         (active-patches-rest (remove view active-patches :test 'eq))         (group-move? (and (member view active-patches :test 'eq)                           active-patches))         (moving-patches (or group-move? (list view)))         (the-rest (set-difference (controls w) moving-patches :test #'eq)))    (if change-size?      (change-your-size view w from-end where)      (progn        (connect/unconn moving-patches the-rest t)        (tell moving-patches 'view-frame-patch current-pos delta prev-mp prev-mp)        (loop          (event-dispatch)          (unless (mouse-down-p) (return))          (let ((mp (view-mouse-position container)))            (unless (eql mp last-mp)              (setq last-mp mp)              (tell moving-patches 'view-frame-patch current-pos delta prev-mp mp)              (setq prev-mp mp)              )))        (tell moving-patches 'view-frame-patch current-pos delta prev-mp prev-mp)        (unless (eql last-mp fix-pos)          (push-to-top view)          (set-view-position view (subtract-points prev-mp delta))          (record--ae :|core| :|move| `((,:|----| ,(mkSO :|cbox| nil :|name| (pw-function-string view)))                                        (,:|insh| ,(cl-user::getDescRecPtr (cl-user::asAEDesc                                                                             (list (point-h (subtract-points prev-mp delta))                                                                                   (point-v (subtract-points prev-mp delta))))))))          (if group-move?            (let ((dif-h (- (point-h prev-mp) (point-h fix-pos)))                  (dif-v (- (point-v prev-mp) (point-v fix-pos)))                  (max-h (- *screen-width* 10                             (point-h (view-position container))))                  (max-v (- *screen-height* 10                             (point-v (view-position container)))))              (dolist (patch active-patches-rest)                (dmove-patch patch                              (min dif-h (- max-h                                           (point-h (view-position patch))))                             (min dif-v (- max-v                                            (point-v (view-position patch))))))))          (if (shift-key-p) (push-modules-to-back moving-patches))          )        (connect/unconn moving-patches the-rest)        (setf *current-move-patch-box* nil)        ))))(defmethod view-frame-patch ((self C-patch) current-pos delta prev next)  (with-pen-state (:pattern *gray-pattern* :mode :patXor)    (with-focused-view (view-container self)      (let ((diff-prev (add-points (subtract-points (view-position self) current-pos)                              (subtract-points prev delta)))            (diff-next (add-points (subtract-points (view-position self) current-pos)                              (subtract-points next delta))))      (draw-rect (point-h diff-prev) (point-v diff-prev) (w self) (h self))      (unless (= prev next)        (draw-rect (point-h diff-next) (point-v diff-next) (w self) (h self)))))))(defmethod change-your-size ((view C-patch) win delta last-mp)  (let ((the-rest (remove view (controls win) :test #'eq)))    (connect/unconn (list view) the-rest t)    (let ((posn (view-position view)))      (view-frame-patch view posn 0 posn posn)      (loop        (unless (mouse-down-p) (return))        (let ((mp (view-mouse-position view)))          (unless (eql mp last-mp)            (view-frame-patch view posn 0 posn posn)            (setq last-mp mp)                    (resize-patch-box view mp delta)            (view-frame-patch view posn 0 posn posn)            )))      (connect/unconn (list view) the-rest)      (setf *current-move-patch-box* nil)      (view-draw-contents view))))(defmethod resize-patch-box ((self C-patch) mp delta) (declare (ignore mp delta)))(defmethod rename-yourbox ((view C-patch))  (if (pw-controls view)    (progn      (unless *pw-controls-dialog-text-item* (make-pw-controls-dialog))      (setf *pw-controls-current-pw-control* view)      (set-dialog-item-text *pw-controls-dialog-text-item* (pw-function-string view))      (set-view-position *pw-controls-dialog-text-item*                          (make-point 1 (- (h view) 14)))      (resize-text-item view (make-point (w view) 13))      (add-subviews view *pw-controls-dialog-text-item*)      (setf *current-small-inBox* (car (pw-controls view)))      (change-menu-actions) )    (ed-beep)) )(defmethod set-dialog-item-text-from-dialog ((view C-patch) str)  (setf (pw-function-string view) (string-downcase str))  (with-focused-view view    (draw-function-name view 2 (- (h view) 5)))) ;====================================================;misc (defmethod am-i-connected? ((self C-patch) patch)  (member patch (input-objects self) :test 'eq))(defmethod connected-out-side? ((self C-patch) win)  (let ((ctrls (controls win))(connect-flag))    (while (and ctrls (not connect-flag))           (setq connect-flag (am-i-connected? (pop ctrls) self)))    (or connect-flag        (not (equal (pw-controls self) (input-objects self))))))(defmethod connect-new-patch? ((self C-patch) old-patch new-patch)  (for (i 0 1 (1- (length (input-objects self))))    (when (eq (nth i (input-objects self)) old-patch)      (setf (nth i (input-objects self)) new-patch))))(defmethod toggle-patch-active-mode ((self C-patch))  (with-focused-view self   (cond ((shift-key-p)           (setf (active-mode self) (not (active-mode self)))          (record--ae :|PWst| :|sele| `((,:|----| ,(mkSO :|cbox| nil :|name| (pw-function-string self)))                                        (,:|chif| ,t)) )          (with-pen-state (:mode :patxor :pattern *black-pattern*)            (fill-rect* 1 1 (- (w self) 2) 2)))        (t          (unless  (active-mode self)          (tell  (controls (view-window self)) 'deactivate-control)          (setf (active-mode self) t)          (with-pen-state  (:pattern *black-pattern*)            (fill-rect* 1 1 (- (w self) 2) 2))          (record--ae :|PWst| :|sele| `((,:|----| ,(mkSO :|cbox| nil :|name| (pw-function-string self)))) )          )))))(defmethod activate-control ((self C-patch)) (when (not (active-mode self))   (with-focused-view self    (with-pen-state (:mode :patxor :pattern *black-pattern*)      (fill-rect* 1 1 (- (w self) 2) 2))    (setf (active-mode self) t))))  (defmethod deactivate-control ((self C-patch)) (when (active-mode self)   (with-focused-view self    (with-pen-state (:mode :patxor :pattern *black-pattern*)      (fill-rect* 1 1 (- (w self) 2) 2))    (setf (active-mode self) ()))))(defmethod flip-controls ((self C-patch) flag)  (for (i 0 1 (1- (length (pw-controls self))))      (when (eq (nth i (pw-controls self))(nth i (input-objects self)))       (set-open-state (nth i (pw-controls self)) flag))))(defmethod patch-value ((self C-patch) obj)  (let ((args (ask-all (input-objects self) 'patch-value obj)))    (apply (pw-function self) args)))(defmethod active-mode+self ((self C-patch)) (when (active-mode self) self))(defmethod x+w ((self C-patch)) (+ (x self)(w self)))(defmethod delete-r-view ((view C-patch) where)  (declare (ignore where))  (set-view-container view nil));______________(defmethod nth-connected-p ((self C-patch) nth-input)  (not (eq (nth nth-input (input-objects self))(nth nth-input (pw-controls self)))))(defmethod play ((self C-patch)))(defmethod stop-play ((self C-patch)))(defmethod open-patch-win ((self C-patch)));;;(defmethod mouse-released-control-after ((self C-patch) ctrl win))(defmethod record ((self C-patch)))(defmethod clock ((self C-patch)) (clock (clock-obj self)))(defmethod update-win-pointers ((self C-patch) win-ptr) (declare (ignore win-ptr))) (defmethod browse ((self C-patch))(print "no browse boxes")) (defmethod remove-yourself-control ((self C-patch)))(defmethod set-pw-window-pointers ((self C-patch) win)(declare (ignore win))) (defmethod resize-patch? ((self C-patch)) nil) (defmethod patch-type-p ((self T)) nil) (defmethod patch-type-p ((self simple-view)) nil) (defmethod patch-type-p ((self C-patch)) t) ;;so that clocked modules don't give an error on clicking(defmethod clock-obj ((self C-patch)) *global-clock*)(defmethod are-you-handling-keys? ((self C-patch) char)  (declare (ignore char)) nil)(defclass C-key-handler-box (C-patch) ())(defclass C-key-handler-box (C-pw-functional) ())(defmethod are-you-handling-keys? ((self C-key-handler-box) char)  (if (char= char (car (coerce (format () "~A" (patch-value (first (input-objects self)) ()))                               'list)))    (or (patch-value self ()) t)))(defunp key-trigger ((char list (:type-list (no-connection) :value "a"))                      (patch list (:type-list nil))) nil "triggers a patch by a key pressed"  (declare (ignore char patch)));; ------------------------------ tutorial search scheme --------------------------------(defmethod get-tutorial-patch ((self C-patch))  (let ((fun (pw-function self)))    (if (symbolp fun)      (or (get-patch-file fun) (format t "no tutorial available for box: ~S ~%" fun))      (format t "no tutorial available for box: ~S ~%" (pw-function-string self)))))(defvar *tutorial-a-list* ())(defvar *tutorial-dirs* '("PW-HELP-DOC:**;"))(eval-when (load eval compile)  (load-once  "PW-HELP-DOC:box-name-list.lisp" :if-does-not-exist nil))#|(defun get-patch-file (file)  (let* ((a-list *tutorial-a-list*)         (file (or (second (assoc file a-list :test #'string=)) file)))    (let ((name (first (directory (format nil "PW-HELP-DOC:**;~A.pw" file)))))      (and name (load-a-patch (namestring name)))      name)))|#(defun push-tutorial-dir (dir)  " adds a directory path to the tutorial directory list. When PatchWork is started the direcotry listcontains one item: PW-HELP-DOC which is normally pw:documentation;online-help and all subdirectories"  (when dir    (pushnew dir *tutorial-dirs*))  )(defun push-tutorial-file (file)"adds an element to the tutorial list. This list is used to map a module's name to a tutorial file only if the names differ"  (cond ((and (listp file) (not (member-if-not #'listp file)))         (setf *tutorial-a-list* (append file *tutorial-a-list*)))        ((and (listp file) (member-if-not #'listp file))         (pushnew file *tutorial-a-list*))        (t ())));;(push-tutorial-file '((filter-spdata llmod-read) (par-spdata iana-read)));; --------- remplace dans kernel:???:pw-patch.lisp ------------(defun get-patch-file (file)  (let* ((a-list *tutorial-a-list*)         (file (or (second (assoc file a-list :test #'string=)) file))         (name (get-tutorial-aux file *tutorial-dirs*)))      (and name (load-a-patch (namestring (first name))))      name))(defun get-tutorial-aux (file dirs)  (when (and file dirs)    (let ((name (directory (format nil "~A~A.pw" (first dirs) file))))      (if name name (get-tutorial-aux file (cdr dirs))))));______________ ;init-patch (defmethod init-patch ((self C-ttybox)))(defmethod init-patch ((self C-patch))  (tell (input-objects self) 'init-patch));====================================================(defun add-patch-box (win patch)  (init-patch-pos win patch)  (add-subviews win patch)  (set-changes-to-file-flag win)  (setf *position-new-box* nil)  (record-patch (pw-function patch)                    (list (point-h (view-position patch)) (point-v (view-position patch))) nil)  patch) (defvar *pw-window-counter* 0)(defun make-new-pw-window (&optional close-button)  (let ((win)        (win-string (concatenate  'string  "PW" (format nil "~D" (incf *pw-window-counter*)))))    (setq win (make-instance 'C-pw-window                 :window-title win-string :close-box-p close-button                :view-position (make-point 50 38) :view-size (make-point 500 300) :window-show t))    (add-menu-items  *pw-windows-menu*                      (setf (wins-menu-item win)                           (new-leafmenu win-string #'(lambda ()(window-select win)))))    (push win *pw-window-list*)     (update-wins-menu-items win)    (record--ae :|core| :|crel| `((,:|kocl| ,:|cpat| )))    win))