;;;;=========================================================;;;;;;;;  PATCH-WORK;;;;  By Mikael Laurson, Jacques Duthen, Camilo Rueda.;;;;  © 1986-1992 IRCAM ;;;;;;;;=========================================================(in-package :pw);==================================================================================================================#|(defun scale-to-fit-in-rect (view)  (let ((x-values (give-x-points (break-point-function view)))        (y-values (give-y-points (break-point-function view)))        (x-min)(x-max)(y-min)(y-max))   (when x-values     (setq x-min (car x-values))    (setq x-max (car (last x-values)))    (setq y-min (apply #'min y-values))    (setq y-max (apply #'max y-values))    (unless (=  x-max x-min)      (setf (h-view-scaler view) (/ (+ (- x-max x-min)(* (- x-max x-min) .01)) (w view) )))     (unless (=  y-max y-min)      (setf (v-view-scaler view) (/ (+ (- y-max y-min)(* (- y-max y-min).01)) (h view) )))      (set-origin view          (make-point (round x-min (h-view-scaler view))                      (- (h view) (round y-max (v-view-scaler view))))))));;Safer...(defun scale-to-fit-in-rect (view)  (let ((x-values (give-x-points (break-point-function view)))        (y-values (give-y-points (break-point-function view)))        (x-min)(x-max)(y-min)(y-max))   (when x-values     (setq x-min (car x-values))    (setq x-max (car (last x-values)))    (setq y-min (apply #'min y-values))    (setq y-max (apply #'max y-values))    (unless (=  x-max x-min)      (setf (h-view-scaler view) (/ (+ (- x-max x-min)(* (- x-max x-min) .01)) (w view) )))     (unless (=  y-max y-min)      (setf (v-view-scaler view) (/ (+ (- y-max y-min)(* (- y-max y-min).01)) (h view) )))    (setq x-min (round x-min (h-view-scaler view))          y-min (- (h view) (round y-max (v-view-scaler view))))    (when (or (> (abs x-min) #,(1- (expt 2 15))) (> (abs y-min) #,(1- (expt 2 15))))      (ed-beep)       (format t "Unable to scale BPF. Please decrease window size (hight) ~%"))    (set-origin view          (make-point (if (minusp x-min)                        (max (- #,(1- (expt 2 15))) x-min)                       (min #,(1- (expt 2 15)) x-min))                     (if (minusp y-min)                       (max (- #,(1- (expt 2 15))) y-min)                       (min #,(1- (expt 2 15)) y-min)))))))|##|(defun scale-to-fit-in-rect (view)  (let* ((current-bpf (break-point-function view))         (bpfs (cons current-bpf (break-point-functions view)))         (x-values (apply 'append (ask-all bpfs #'give-x-points)))         (y-values (and x-values (apply 'append (ask-all bpfs #'give-y-points))))         x-min x-max y-min y-max)   (when x-values     (setq x-min (apply #'min x-values))    (setq x-max (apply #'max x-values))    (setq y-min (apply #'min y-values))    (setq y-max (apply #'max y-values))    (unless (=  x-max x-min)      (setf (h-view-scaler view) (/ (+ (- x-max x-min)(* (- x-max x-min) .01)) (w view) )))     (unless (=  y-max y-min)      (setf (v-view-scaler view) (/ (+ (- y-max y-min)(* (- y-max y-min).01)) (h view) )))    (setq x-min (round x-min (h-view-scaler view))          y-min (- (h view) (round y-max (v-view-scaler view))))    (when (or (> (abs x-min) #,(1- (expt 2 15))) (> (abs y-min) #,(1- (expt 2 15))))      (ed-beep)       (format t "Unable to scale BPF. Please decrease window size (hight) ~%"))    (set-origin view          (make-point (if (minusp x-min)                        (max (- #,(1- (expt 2 15))) x-min)                       (min #,(1- (expt 2 15)) x-min))                     (if (minusp y-min)                       (max (- #,(1- (expt 2 15))) y-min)                       (min #,(1- (expt 2 15)) y-min)))))))|##|(defun scale-to-fit-in-rect (view)  (let* ((bpfs            (if (eq (type-of view) 'C-mini-bpf-view)              (cons (break-point-function view)               (break-point-functions                  (editor-view-object (application-object (view-container view)))))             (cons (break-point-function view) (break-point-functions view))))        (x-values (mapcar #'give-x-points bpfs))        (y-values (mapcar #'give-y-points bpfs))        (x-min)(x-max)(y-min)(y-max))   (when x-values     (setq x-min (apply #'min (mapcar #'car x-values)))    (setq x-max ;(car (last x-values)))          (apply #'max (mapcar #'(lambda (vs) (car (last vs))) x-values)))    (setq y-min (apply #'min (mapcar #'(lambda (vs) (apply #'min vs)) y-values)))    (setq y-max ;(apply #'max y-values))       (apply #'max (mapcar #'(lambda (vs) (apply #'max vs)) y-values)))    (unless (=  x-max x-min)      (setf (h-view-scaler view) (/ (+ (- x-max x-min)(* (- x-max x-min) .01)) (w view) )))     (unless (=  y-max y-min)      (setf (v-view-scaler view) (/ (+ (- y-max y-min)(* (- y-max y-min).01)) (h view) )))    (setq x-min (round x-min (h-view-scaler view))          y-min (- (h view) (round y-max (v-view-scaler view))))    (when (or (> (abs x-min) #,(1- (expt 2 15))) (> (abs y-min) #,(1- (expt 2 15))))      (ed-beep)       (format t "Unable to scale BPF. Please decrease window size (hight) ~%"))    (set-origin view          (make-point (if (minusp x-min)                        (max (- #,(1- (expt 2 15))) x-min)                       (min #,(1- (expt 2 15)) x-min))                     (if (minusp y-min)                       (max (- #,(1- (expt 2 15))) y-min)                       (min #,(1- (expt 2 15)) y-min)))))))|#(defun flatt (list)  (cond ((atom list) list)        ((listp list)         (if (listp (first list))           (append (flatt (first list)) (flatt (rest list)))           (cons (first list) (flatt (rest list)))))))        ; scales all bps not just the active one ;changed by aaa 28-08-95 from pw-modif(defun scale-to-fit-in-rect (view)  (let* ((current-bpf (break-point-function view))         (bpfs (cons current-bpf (break-point-functions view)))         (x-values (flatt (ask-all bpfs #'give-x-points)))         (y-values (and x-values (flatt (ask-all bpfs #'give-y-points))))         x-min x-max y-min y-max)   (when x-values     (setq x-min (apply #'min x-values))    (setq x-max (apply #'max x-values))    (setq y-min (apply #'min y-values))    (setq y-max (apply #'max y-values))    (unless (=  x-max x-min)      (setf (h-view-scaler view) (/ (+ (- x-max x-min)(* (- x-max x-min) .01)) (w view) )))     (unless (=  y-max y-min)      (setf (v-view-scaler view) (/ (+ (- y-max y-min)(* (- y-max y-min).01)) (h view) )))    (setq x-min (round x-min (h-view-scaler view))          y-min (- (h view) (round y-max (v-view-scaler view))))    (when (or (> (abs x-min) #,(1- (expt 2 15))) (> (abs y-min) #,(1- (expt 2 15))))      (ed-beep)       (format t "Unable to scale BPF. Please decrease window size (hight) ~%"))    (set-origin view          (make-point (if (minusp x-min)                        (max (- #,(1- (expt 2 15))) x-min)                       (min #,(1- (expt 2 15)) x-min))                     (if (minusp y-min)                       (max (- #,(1- (expt 2 15))) y-min)                       (min #,(1- (expt 2 15)) y-min)))))));==================================================================================================================(defclass C-mini-bpf-view (view C-ttybox)  ((break-point-function :initform nil :initarg :break-point-function      :accessor break-point-function)   (h-view-scaler :initform 1.0 :initarg :h-view-scaler :accessor h-view-scaler)   (v-view-scaler :initform 1.0 :initarg :v-view-scaler :accessor v-view-scaler)))(defmethod decompile ((self C-mini-bpf-view))  `(make-instance ',(class-name (class-of self))      :view-position ,(view-position self)     :view-size ,(view-size self)     :doc-string ,(doc-string self)     :type-list ',(type-list self)       :break-point-function ,(decompile (break-point-function self))))(defmethod initialize-instance :after ((self C-mini-bpf-view) &key controls)  (declare (ignore controls))  (when (break-point-function self)    (scale-to-fit-in-rect self))) (defmethod set-break-point-function-to-mini ((self C-mini-bpf-view) bpf)  (setf (break-point-function self) bpf)  (scale-to-fit-in-rect self))(defmethod update-mini-view ((self C-mini-bpf-view))  (with-focused-view self    (with-pen-state (:pattern *white-pattern*)        (fill-rect*  (point-h (view-scroll-position self))                      (point-v (view-scroll-position self)) (w self)(h self))))  (scale-to-fit-in-rect self)  (view-draw-contents self));=====================================;draw(defmethod view-draw-contents ((self C-mini-bpf-view)) (with-focused-view self   (draw-rect (point-h (view-scroll-position self)) (point-v (view-scroll-position self))(w self)(h self))    (if (open-state self)     (when (break-point-function self)       (draw-bpf-function             (break-point-function self) self nil (h-view-scaler self)(v-view-scaler self)))       (draw-string 3 9 (doc-string self)))))#|    (setq foo2 (make-instance 'window :window-title "BPF-mini"))(setq bb (make-instance 'C-break-point-function                   :break-point-list (list (make-point 0 20)(make-point 50 0)(make-point 80 80))))(setq bb2 (make-instance 'C-break-point-function     :break-point-list (list (make-point 0 10)(make-point 20 10)(make-point 80 70)(make-point 180 5))))(setq bm (make-instance 'C-mini-bpf-view                  :break-point-function bb                 :view-container foo2                 :view-position #@(5 5)                 :view-size #@(125 125)))(setq bm2 (make-instance 'C-mini-bpf-view                  :break-point-function bb2                 :view-container foo2                 :view-position #@(145 5)                 :view-size #@(80 80)))(setq bm3 (make-instance 'C-mini-bpf-view                  :break-point-function bb                 :view-container foo2                 :view-position #@(5 145)                 :view-size #@(60 100)));(time (repeat 400 (view-draw-contents bm)))  ;(time (repeat 100 (scale-to-fit-in-rect bm)));(set-break-point-function-to-mini bm bb2)|#    