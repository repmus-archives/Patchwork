(defpackage :magic   (:nicknames "MAGIC")  (:use "COMMON-LISP" "CCL"))(in-package :magic)(require :ff)(dispose-ffenv 'magic)(ff-load "CL:pw-inits;drivers+resources;magic.c.o"         :ffenv-name 'magic         :entry-names '("SetUserGroupCode"                        "InitializeProtection"                         "IsResourcePresent"                         "ResourceIsPresent"                        "ResourceIsNotPresent"                        "GetOwnerName")         )#|(dispose-ffenv 'magic)|#; void SetUserGroupCode(short user_group_code)(deffcfun (set-user-group-code "SetUserGroupCode") ((fixnum :word)) :novalue); short InitializeProtection(void)(deffcfun (initialize-protection "InitializeProtection") () :word); short 	IsResourcePresent(void)(deffcfun (is-resource-present "IsResourcePresent") () :word); short ResourceIsPresent(void)(deffcfun (resource-is-present "ResourceIsPresent") () :word); short ResourceIsNotPresent(Str255 owner,long password)(deffcfun (resource-is-not-present "ResourceIsNotPresent") ((string :pstring) (integer :long)) :word);void		GetOwnerName(Str255 owner_name);(deffcfun (get-owner-name "GetOwnerName") ((string :pstring :by-reference)) :word)(eval-when (eval compile load)  (setf	PROTECTION_FAILED		-1)  (setf	INIT_SUCCEEDED			0)  (setf	INIT_FAILED			1)  (setf	RESOURCE_FOUND			2)  (setf   RESOURCE_NOT_FOUND		3)  (setf	RESOURCE_LOAD_SUCCEEDED		4)  (setf	RESOURCE_LOAD_FAILED		5)  (setf	COMPARE_SUCCEEDED		6)  (setf	COMPARE_FAILED			7)  (setf	PASSWORD_GOOD_FOR_DEMO		8)  (setf	PASSWORD_GOOD_FOR_USE		9)  (setf   PASSWORD_NO_GOOD		10)  (setf	NEW_RESOURCE_SUCCEEDED		11)  (setf	NEW_RESOURCE_FAILED		12))(defvar *tmpstring* (make-string  255 :initial-element #\Space))(defvar *group_CAO* 0)#|(mac-default-directory)(setf init-status (initialize-protection))(set-user-group-code *group_CAO*)(is-resource-present)(resource-is-not-present "assayag" 1973122549)(get-owner-name *tmpstring*)|#(defun pw-cant-run (cause)   (case  cause    ((init-failed new-res-failed res-load-failed)      (message-dialog "There has been an internal error while checking the context. Patchwork cannot run."))    (compare-failed     (message-dialog "Patchwork is not regularly installed on that machine. Please proceed to a regular installation."))    (passwd-nogood (message-dialog "This is not a regular password. Patchwork cannot run."))    (dlog-cancelled)    (except-demo (message-dialog "Demo mode not yet implemented. Sorry and good bye.")                 ;(setf *pw-demo-mode* t)                 ;(throw 'check-protection t)                 ))  (print "Now quitting .....")  (ccl:quit))(defun pw-can-run ()   (get-owner-name *tmpstring*)  (Format t "~%~%This copy of PatchWork belongs to : ~A~%~%" *tmpstring*)  (throw 'check-protection t))(defun get-name-passwd ()  (let (name passwd)    (catch :cancel       (setf name (get-string-from-user  "Type a registered name:")))    (when name      (catch :cancel         (setf passwd (get-string-from-user  "Your password :")))      (when passwd        (if  (every  #'digit-char-p passwd)          (setf passwd (read-from-string passwd))          (setf passwd 0))        (values t name  passwd)))))(defun install-user-name (user-name))(defun ccl::check-protection ()  (without-interrupts   (setf *pw-demo-mode* nil)   (setf *tmpstring* (make-string  255 :initial-element #\Space))   (catch 'check-protection     (when  (= (initialize-protection) #.INIT_FAILED)  (pw-cant-run 'init-failed))     (set-user-group-code  *group_CAO*)     (case (is-resource-present)       (#.RESOURCE_FOUND        (case (resource-is-present)          (#.COMPARE_SUCCEEDED (pw-can-run))          (#.COMPARE_FAILED (pw-cant-run 'compare-failed))          (#.RESOURCE_LOAD_FAILED (pw-cant-run 'res-load-failed) )))       (#.RESOURCE_NOT_FOUND         (multiple-value-bind  (ok-dlog user-name passwd) (get-name-passwd)          (unless ok-dlog (pw-cant-run 'dlog-cancelled))          (case (resource-is-not-present user-name passwd)            (#.PASSWORD_GOOD_FOR_DEMO (pw-cant-run 'except-demo))            (#.PASSWORD_GOOD_FOR_USE (install-user-name user-name) (pw-can-run))            (#.PASSWORD_NO_GOOD (pw-cant-run 'passwd-nogood))            (#.NEW_RESOURCE_FAILED (pw-cant-run 'new-res-failed)))))       (t  (pw-cant-run 'init-failed)))     (pw-cant-run 'init-failed))   (dispose-ffenv 'magic))); (get-name-passwd);(check-protection)      