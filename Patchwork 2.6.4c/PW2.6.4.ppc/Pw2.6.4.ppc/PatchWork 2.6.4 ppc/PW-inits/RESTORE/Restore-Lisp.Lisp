(in-package "RESTORE-LISP")(defun pw-path ()  (setf (logical-pathname-translations "IMAGE")      '(("**;" "CL:Images;**;"))        (logical-pathname-translations "WORK")       '(("**;" "CL:WORK;**;"))        (logical-pathname-translations "CLPF")       '(("**;" "CL:CLPF-2.0;**;"))        (logical-pathname-translations "MIDI")       '(("**;" "CLPF:**;"))        (logical-pathname-translations "PW-1.0")     '(("**;" "CL:PW-1.0;**;"))        (logical-pathname-translations "PW-1.5")     '(("**;" "CL:PW-1.5-code;**;"))        (logical-pathname-translations "PW-2.1")     '(("**;" "CL:PW-code;**;"))        (logical-pathname-translations "PW")       '(("**;" "PW-2.1:**;"))        (logical-pathname-translations "EPW-1.0b") '(("**;" "PW:PW-lib;EPW-1.0b;**;"))        (logical-pathname-translations "EPW")      '(("**;" "EPW-1.0b:**;"))        (logical-pathname-translations "PW-LIB") '(("**;" "CL:User-library;**;"))        (logical-pathname-translations "PW-USER") '(("**;" "CL:PW-User;**;"))        (logical-pathname-translations "PW-HELP-DOC") '(("**;" "CL:Documentation;On-line help;**;"))  ;;temporary        (logical-pathname-translations "Chant")        '(("**;" "PW-LIB:Chant;**;"))        (logical-pathname-translations "CLENI")      '(("**;" "PW:PW-lib;CLENI;**;"))))(defun restore-patchwork ();; ==== default environment ====(setf *print-pretty*			t      *print-case*			:downcase            ;CCL:*emacs-mode*  		nil      CCL:*record-source-file*		t      ccl:*AUTOCLOSE-INACTIVE-LISTENERS* t      CCL:*arglist-on-space*		t      CCL:*autoload-traps*		t      CCL:*save-doc-strings*		t      CCL:*save-definitions*		nil      CCL:*compile-definitions*		t      CCL:*save-local-symbols*		t      CCL::*save-arglist-info*		t      CCL:*paste-with-styles*		nil            *load-verbose*			t      CCL:*verbose-eval-selection*	t      CCL:*warn-if-redefine*		t      ccl:*break-on-warnings*		nil      CCL:*backtrace-on-break*		nil      CCL:*break-on-errors*		t      CCL:*autoload-lisp-package*	nil      CCL:*fasl-save-local-symbols*	t  ;; otherwise "can't find arglist"      CCL:*save-local-symbols*	t  ;; otherwise "can't find arglist"            CCL:*save-fred-window-positions*	t            CCL:*listener-default-font-spec*	'("monaco" 9)      CCL:*fred-default-font-spec*	'("monaco" 9)      CCL:*next-screen-context-lines*	5);; ==== Path ====(pw-path);; ==== default position & size of the listener & fred windows ====(let ((*ws* CCL:*screen-width*) (*hs* CCL:*screen-height*)      dx1 dx2 dy1 dy2 dy3 ws hs hl hf yl yf)  (cond   ((< *ws* 640)    (setq dx1 0 dx2 0 dy1 0 dy2 0 dy3 0))   ((< *ws* 1152)    (setq dx1 5 dx2 25 dy1 3 dy2 5 dy3 5)) ; dx2=25 to get the trash under MultiFinder   (t    (setq dx1 5 dx2 25 dy1 3 dy2 5 dy3 5)))  (setq ws (- *ws* dx1 dx2)        hs (- *hs* CCL:*menubar-bottom* dy1 dy2 dy3)        hl (min 200 (floor hs 4))        hf (min 450 (floor (* hs 3) 4))        yl (- *hs* dy3 hl)        yf (- yl dy2 hf))  (setf CCL:*listener-window-position* (CCL:make-point dx1 yl))  (setf CCL:*listener-window-size* (CCL:make-point (min ws 700) hl))  (setf CCL:*window-default-position* (CCL:make-point dx1 yf))  (setf CCL:*window-default-size* (CCL:make-point (min 540 ws) hf))  (unless (equal CCL:*listener-window-size*                 (CCL:view-size CCL:*top-listener*))    (CCL:set-view-size CCL:*top-listener* CCL:*listener-window-size*))  (unless (equal CCL:*listener-window-position*                 (CCL:view-position CCL:*top-listener*))    (CCL:set-view-position CCL:*top-listener* CCL:*listener-window-position*))))(restore-patchwork);; ==== ????? ====#|(ccl::def-load-pointers define-PW-root-paths ()  (setf ccl::*load-verbose* nil)  ;(INIT:convert-mac-pathnames)  ;(INIT:def-root-path)  ;(INIT:build-logical-hosts)  ;(load-again "home:cl-path" :if-does-not-exist nil)  ;(INIT:convert-mac-pathnames)  (setf ccl::*load-verbose* t))|#(ccl::def-load-pointers load-PW-restore ()  (pw-path))