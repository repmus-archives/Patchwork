(in-package :turtle)(defun 2-sides-rect-3dim (turtle size1 size2)  (dotimes (i 3)   (forward turtle (if (oddp i) size1 size2))   (yaw turtle 120)))#|(defun 2-sides-rect-3dim (turtle size1 size2)  (dotimes (i 4)   (forward turtle (if (oddp i) size1 size2))   (yaw turtle 90)))|#(defun draw-x-y-z-coords** (turtle size x-y-z-data rects? string?)  (with-focused-view turtle     (let ((vect (slot-value turtle 'p-vect)))      (when (not (zerop size))        (save-turtle-old-state turtle)        (forward turtle size)        (pw::draw-string  (svref vect 0) (svref vect 1) "X")         (back turtle size)        (yaw turtle 90)        (forward turtle size)        (pw::draw-string  (svref vect 0) (svref vect 1) "Y")         (back turtle size)        (pitch turtle 90)        (forward turtle size)        (pw::draw-string  (svref vect 0) (svref vect 1) "Z")         (back turtle size)        (restore-turtle-old-state turtle))      (when (or rects? string?)        (while x-y-z-data          (draw-x-y-z-coords-data turtle vect (pop x-y-z-data) rects? string?))))))(defun draw-x-y-z-coords-data (turtle vect x-y-z rect-fl label-fl)  (save-turtle-old-state turtle)  (turtle-pen-up turtle)  (forward turtle (pop x-y-z))  (yaw turtle 90)  (forward turtle (pop x-y-z))  (pitch turtle 90)  (forward turtle (pop x-y-z))  (turtle-pen-down turtle)  (when rect-fl    (2-sides-rect-3dim turtle 5 5))  (when (and label-fl x-y-z)    ;(pw::draw-string  (svref vect 0) (svref vect 1) (pop x-y-z))    (with-pstrs ((s (pop x-y-z)))       (#_MoveTo :long (make-point (svref vect 0) (svref vect 1)))       (#_DrawString :ptr s))      )   (turtle-pen-up turtle)  (restore-turtle-old-state turtle));===========================================================(defclass C-3-dim-disp-win (pw::C-application-window)   ((turtle  :initform         (make-instance 'C-turtle          :view-position  (make-point 2 60)          :view-size (make-point 1450 1450))       :accessor turtle)    (turtle-data :initform () :accessor turtle-data)    (scaled-turtle-data :initform () :accessor scaled-turtle-data)    (scaler-ctrl :initform () :accessor scaler-ctrl)    (rects?-ctrl :initform () :accessor rects?-ctrl)    (string?-ctrl :initform () :accessor string?-ctrl)    (yaw-pitch-roll-ctrls :initform () :accessor yaw-pitch-roll-ctrls)))(defmethod pw::decompile ((self C-3-dim-disp-win))    `(make-instance 'C-3-dim-disp-win :window-title "3DIM" :window-show nil         :view-position (make-point 2 40) :view-size (make-point 500 500)         :turtle-data ,(turtle-data self)))(defmethod initialize-instance :after ((self C-3-dim-disp-win) &rest args)  (declare (ignore args))  (add-subviews self (turtle self))  (for (i 0 1 6)    (push     (make-instance 'pw::C-numbox-continuous         :view-position              (make-point                 (+                   (case i (0 5)(1 5)(2 30)(3 30)(4 30) (5 50)(6 50)) (* i 36)) 2)        :value (case i (0 40)(1 100)(2 24)(3 -32)(4 220) (5 200)(6 200))         :max-val  10000 :min-val  -9999        :view-size  (make-point 32 14)        :dialog-item-action #'(lambda (item)  (jpr-turtle-3dim self item))        :doc-string (format nil "~5D" i))       (yaw-pitch-roll-ctrls self)))    (setf (yaw-pitch-roll-ctrls self) (nreverse (yaw-pitch-roll-ctrls self)))  (setf (scaler-ctrl self) (seventh (yaw-pitch-roll-ctrls self)))   (apply #'add-subviews self (yaw-pitch-roll-ctrls self))  (add-subviews self    (make-instance 'button-dialog-item        :view-position  (make-point 350 18)        :view-size  (make-point 20 14)        :view-font  '("monaco" 9)        :dialog-item-text "XY"        :dialog-item-action #'(lambda (item) item (set-only-XY-axis self)))   (make-instance 'button-dialog-item        :view-position  (make-point 380 18)        :view-size  (make-point 20 14)        :view-font  '("monaco" 9)        :dialog-item-text "YZ"        :dialog-item-action #'(lambda (item) item (set-only-YZ-axis self)))   (make-instance 'button-dialog-item        :view-position  (make-point 410 18)        :view-size  (make-point 20 14)        :view-font  '("monaco" 9)        :dialog-item-text "XZ"        :dialog-item-action #'(lambda (item) item (set-only-XZ-axis self)))   (make-instance 'button-dialog-item        :view-position  (make-point 440 18)        :view-size  (make-point 20 14)        :view-font  '("monaco" 9)        :dialog-item-text "XYZ"        :dialog-item-action #'(lambda (item) item (set-only-XYZ-axis self)))   (setf (rects?-ctrl self)      (make-instance 'pw::C-button-latched        :view-position  (make-point 350 2)        :view-size  (make-point 50 14)        :dialog-item-text "rects?"        :dialog-item-action #'(lambda (item)  (jpr-turtle-3dim self item))))   (setf (string?-ctrl self)      (make-instance 'pw::C-button-latched        :view-position  (make-point 405 2)        :view-size  (make-point 50 14)        :dialog-item-text "string?"        :dialog-item-action #'(lambda (item)  (jpr-turtle-3dim self item))))    (make-instance 'static-text-dialog-item         :view-position  (make-point 0 16)        :view-font  '("Monaco" 9 :SRCOR :PLAIN)        :view-size  (make-point 320 14)        :dialog-item-text "   x     y        yaw  pitch  roll     axis  scale")))(defmethod set-only-XY-axis ((self C-3-dim-disp-win))   (pw::set-dialog-item-text-from-dialog (third (yaw-pitch-roll-ctrls self)) "0")   (pw::set-dialog-item-text-from-dialog (fourth (yaw-pitch-roll-ctrls self)) "0")   (pw::set-dialog-item-text-from-dialog (fifth (yaw-pitch-roll-ctrls self)) "180")   (view-draw-contents self))(defmethod set-only-XZ-axis ((self C-3-dim-disp-win))   (pw::set-dialog-item-text-from-dialog (third (yaw-pitch-roll-ctrls self)) "0")   (pw::set-dialog-item-text-from-dialog (fourth (yaw-pitch-roll-ctrls self)) "0")   (pw::set-dialog-item-text-from-dialog (fifth (yaw-pitch-roll-ctrls self)) "90")   (view-draw-contents self))(defmethod set-only-YZ-axis ((self C-3-dim-disp-win))   (pw::set-dialog-item-text-from-dialog (third (yaw-pitch-roll-ctrls self)) "0")   (pw::set-dialog-item-text-from-dialog (fourth (yaw-pitch-roll-ctrls self)) "90")   (pw::set-dialog-item-text-from-dialog (fifth (yaw-pitch-roll-ctrls self)) "180")   (view-draw-contents self))(defmethod set-only-XYZ-axis ((self C-3-dim-disp-win))   (pw::set-dialog-item-text-from-dialog (third (yaw-pitch-roll-ctrls self)) "24")   (pw::set-dialog-item-text-from-dialog (fourth (yaw-pitch-roll-ctrls self)) "-32")   (pw::set-dialog-item-text-from-dialog (fifth (yaw-pitch-roll-ctrls self)) "220")   (view-draw-contents self))(defmethod scale-data-turtle-3dim ((self C-3-dim-disp-win) data-list scale-fc)   (mapcar #'(lambda (data)      (mapcar #'(lambda (a)(if (numberp a) (round (/ (* scale-fc a)100)) a)) data))              data-list))(defmethod jpr-turtle-3dim ((self C-3-dim-disp-win) ctrl)  (when (or (eq (scaler-ctrl self) ctrl) (not (scaled-turtle-data self)))    (setf (scaled-turtle-data self)          (scale-data-turtle-3dim self (turtle-data self) (pw::value (scaler-ctrl self)))))  (when ctrl    (draw-turtle-3dim self ())))(defmethod view-draw-contents :after ((self C-3-dim-disp-win))  (declare (ignore ctrl))  (draw-turtle-3dim self ()))(defmethod draw-turtle-3dim ((self C-3-dim-disp-win) ctrl)  (declare (ignore ctrl))  (let* ((ypr-vals (ask-all (yaw-pitch-roll-ctrls self) 'pw::value))         (x (first ypr-vals))         (y (second ypr-vals))         (yaw (third ypr-vals))         (pitch (fourth ypr-vals))         (roll (fifth ypr-vals))         (axis (sixth ypr-vals)))    (init-turtle-2 (turtle self) x y)    (yaw (turtle self) yaw)    (pitch (turtle self) pitch)    (roll (turtle self) roll)    (erase-rect  self 0 60 1500 1500)    (draw-x-y-z-coords** (turtle self)          axis (scaled-turtle-data self)         (pw::value (rects?-ctrl self))(pw::value (string?-ctrl self)))));====================================================================================================(defclass  C-patch-turtle-3dim (pw::C-patch-application) ())(defmethod pw::make-application-object ((self C-patch-turtle-3dim))  (make-instance 'C-3-dim-disp-win :window-title "3DIM" :window-show nil :close-box-p nil                :view-position (make-point 2 40) :view-size (make-point 500 500)))(defmethod pw::patch-value ((self C-patch-turtle-3dim) obj)  (let ((data (pw::patch-value (car (pw::input-objects self)) obj))        new-data data-now)   (while data     (setq data-now (fourth (car data)))     (if data-now        (if (or (symbolp data-now)(numberp data-now))          (push             (append               (subseq  (car data) 0 3)                   (list (format nil "~A" data-now)))            new-data)          (push (car data) new-data))        (push (car data) new-data))      (pop data))   (setf (turtle-data (pw::application-object self)) (nreverse new-data))   (setf (scaled-turtle-data (pw::application-object self)) ())   (jpr-turtle-3dim (pw::application-object self) ())   (pw::erase+view-draw-contents (pw::application-object self)))   (pw::application-object self));=======================================(pw::defunp 3dim ((3dimdata (list (:dialog-item-text "((1 2 3))")))) nil"3dim is a 3-dimensional display of points.Each point containes three values(X,Y,Z).A fourth value (optional) is the label for each point" (declare (ignore 3dimdata)))(pw::PW-addmenu-fun pw::*pw-menu-patch* '3dim 'C-patch-turtle-3dim)