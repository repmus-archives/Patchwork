;;;-*- Mode: Lisp; Package: COMMON-LISP-USER -*-(in-package :cl-user);; file:  applescript-editor.lisp;;	Author T. Bonura, 1994;;	©Apple Computer;;  an applescript editor (duhh);;  TO DO:;;  Need to check to insure that if the contents of the buffer have changed,;;  before closing the editor, the applescript object gets the new changes - no;;  big deal right now.;(require :scrolling-fred-dialog-item)(DEFMACRO MAKE-LITERAL-STRING (string)  ;;takes a string and string quotes it. e.g. "foo" ->  ;;           "\"foo\""  `(concatenate 'string "\"" ,string "\""))(DEFUN NULL-STRING-P (STRING)  "Return t if the string is "" otherwise nil"  (IF (NOT (STRINGP string))      (ERROR nil (FORMAT nil "The arg to null-string-p, ~a, is not a string.~%" string))      (IF (EQ (LENGTH string) 0)	  t	  nil)))(DEFVAR *record?* NIL )(DEFVAR *ScriptObjet*  nil)(DEFVAR *BOGUS-SCRIPT*   (concatenate 'string "tell application " (make-literal-string "applicationName")               (format nil "~%") (format nil "~%")                "end tell" (format nil "~%"))  );;  THis is where the script is actually written(DEFCLASS AS-INPUT-BUFFER (ccl::scrolling-fred-view)  ()  (:default-initargs     :view-size #@(450 230)    :view-nick-name 'input-buffer    )  )(DEFCLASS AS-EDITOR-WINDOW (window)  ((current.object :initarg :current-object :initform nil :accessor current-object)    (father :initform nil :accessor father)   )  (:default-initargs    :window-type :document-with-grow    :color-p t    :window-title "PW Script Editor"    :view-position #@(150 200)    :view-size #@(400 250)    :close-box-p t    )  )(DEFCLASS RUN-SCRIPT-BTN (ccl::button-dialog-item)  ()  (:default-initargs    :view-nick-name 'run-btn    :default-button nil    :dialog-item-text ">"    :view-size #@(30 20)    :view-position #@(40 274)    :view-font '("Chicago" 12 :SRCOR :PLAIN)    )  )(DEFCLASS RECORD-SCRIPT-BTN (ccl::button-dialog-item)  ()  (:default-initargs    :view-nick-name 'record-btn    :default-button nil    :dialog-item-text "¥"    :view-size #@(30 20)    :view-position #@(10 274)    :view-font '("Chicago" 20 :SRCOR :PLAIN)    )  )(DEFMETHOD DIALOG-ITEM-ACTION ((btn run-script-btn))    ;;  enter the script into the applescript instance then compile and run the script.    (let* ((dialog (view-container btn))              (as-object (current-object dialog))              (script (extract-script-text (remove-end (dialog-item-text (view-named 'input-buffer dialog))))))       ; set the script       (setf (script as-object) script)       (open-component as-object)       (compile-applescript as-object)       (execute-applescript as-object)       ;(if (check-box-checked-p (view-named 'show-result (view-container btn)))        (format t "~a~%" (show-result-as-string as-object));)  ))(DEFCLASS ADD-SCRIPT-BTN (button-dialog-item)  ()  (:default-initargs    :view-nick-name 'add-btn    :dialog-item-text "C"    :view-size #@(30 20)    :view-position #@(100 273)    :view-font '("Courier" 15 :SRCOR :PLAIN) ) )(DEFMETHOD DIALOG-ITEM-ACTION ((btn add-script-btn))    ;;  enter the script into the applescript instance then compile it.    (let* ((dialog (view-container btn))              (as-object (current-object dialog))              (script (extract-script-text  (remove-end (dialog-item-text (view-named 'input-buffer dialog))))))       ; set the script       (setf (script as-object) script)       (open-component as-object)       (compile-applescript as-object)))      (DEFCLASS CANCEL-BTN (button-dialog-item)  ()  (:default-initargs    :view-nick-name 'cancel-btn    :default-button nil    :dialog-item-text "ï"    :view-size #@(30 20)    :view-position #@(70 275)    :view-font '("New York" 12 :SRCOR :PLAIN)))(DEFMETHOD DIALOG-ITEM-ACTION ((btn RECORD-SCRIPT-BTN))  (let ((dialog (view-container btn)))    (start-recording (current-object dialog))    (setf *record?* t)))(DEFMETHOD DIALOG-ITEM-ACTION ((btn cancel-btn))  (let ((dialog (view-container btn)))    (when *record?*      (stop-recording (current-object dialog))      (set-dialog-item-text (view-named 'input-buffer dialog)                             (script (current-object dialog)) )      (setf *record?* nil))))(DEFMETHOD SHOW-SCRIPT ((window AS-EDITOR-WINDOW) &optional (script *bogus-script*))  ;;  shove the script in the AS-INPUT-BUFFER  (let ((input.buffer (view-named 'input-buffer window)))    (set-dialog-item-text input.buffer script)) )(DEFUN MAKE-APPLESCRIPT-EDITOR (&optional as-object)     (let* (the-script-editor )       (setf the-script-editor                (make-instance 'as-editor-window))       (setf (current-object the-script-editor) as-object)       (let* ((v-offset 20)                 (h-offset 15)                 (dialog-size (view-size the-script-editor))                 (dialog-width (point-h dialog-size))                 (dialog-height (point-v dialog-size))                 (reserve-for-button 50)                 (button-margin (floor                                          (/ (- (point-h dialog-width)                                                   350 ;sum of buttons                                                   ) 2)))                 (record-button-position (make-point button-margin  (- dialog-height 25)))                 (run-button-position (make-point (+ 10 (point-h record-button-position) 30)                                                                    (point-v record-button-position)))                 (cancel-button-position (make-point (+ 10 (point-h run-button-position) 30)                                                                        (point-v run-button-position)))                 (add-button-position (make-point (+ 10 (point-h cancel-button-position) 30)                                                                    (point-v run-button-position))))          (add-subviews the-script-editor                                 (make-instance 'as-input-buffer                                     :view-position (make-point 0 v-offset)                                     :view-size (make-point                                                         (- dialog-width                                                            h-offset)                                                        (- dialog-height                                                            v-offset                                                            reserve-for-button)))                                 (make-instance 'run-script-btn                                     :view-position run-button-position)                                 (make-instance 'record-script-btn                                     :view-position record-button-position )                                 (make-instance 'add-script-btn                                     :view-position add-button-position)                                 (make-instance 'cancel-btn                                     :view-position cancel-button-position)))       the-script-editor))  ;;(make-applescript-editor)(defun remove-end (string)  (let* ((string1 (reverse string)) (i 0))    (while (and (not (= 0 (length string1))) (or (char= (elt string1 i) #\return) (char= (elt string1 i) #\Space)               (char= (elt string1 i) #\tab) (char= (elt string1 i) #\Newline)))      (setf string1 (subseq  string1 1)))   (reverse string1)))(defmethod window-close :before  ((dialog AS-EDITOR-WINDOW))  (let* ((as-object (current-object dialog))         (script (extract-script-text  (remove-end  (dialog-item-text  (view-named 'input-buffer dialog))))))    (setf (script as-object) script)    (set-menubar pw::*patch-work-menu-root*)    (window-select (father dialog)) ))      (defmethod ccl::set-view-size ((window AS-EDITOR-WINDOW) h &optional v)   ;;  do the regular thing   (declare (ignore v))   (call-next-method)   ;;  resize the input-buffer proportionally      (let* ((v-offset 20)             (h-offset 15)             (dialog-width (point-h h))             (dialog-height (point-v h))             (reserve-for-button 50)             (button-margin (floor                                      (/ (- dialog-width                                               350 ;sum of buttons                                               ) 2)))             (record-button-position (make-point button-margin  (- dialog-height 25)))             (run-button-position (make-point (+ 10 (point-h record-button-position) 30)                                                                (point-v record-button-position)))             (cancel-button-position (make-point (+ 10 (point-h run-button-position) 30)                                                                    (point-v run-button-position)))             (add-button-position (make-point (+ 10 (point-h cancel-button-position) 30)                                                                (point-v run-button-position))))      (set-view-size (view-named 'input-buffer window)                               (- dialog-width h-offset)                              (- dialog-height  v-offset  reserve-for-button))      (set-view-position (view-named 'record-btn window) (point-h record-button-position)                                    (point-v record-button-position))      (set-view-position (view-named 'run-btn window) (point-h run-button-position)                                    (point-v run-button-position))      (set-view-position (view-named 'add-btn window) (point-h add-button-position)                                    (point-v add-button-position))      (set-view-position (view-named 'cancel-btn window) (point-h cancel-button-position)                                    (point-v cancel-button-position)) ) );; Method for editing scripts using the applescript-editor(defmethod view-activate-event-handler :after  ((self AS-EDITOR-WINDOW))  (set-menubar pw::*default-ccl-menubar*))(DEFMETHOD EDIT-SCRIPT ((self pw::C-aac))  (let* ((ASO (pw::script-obj self))         (script (script ASO))         (theApp (application-name ASO)))    (cond ((and (pw::ed-win self)                (wptr (pw::ed-win self)))           (setf (current-object (pw::ed-win self)) ASO)           (window-select (pw::ed-win self))           (view-click-event-handler (pw::ed-win self)))          (t   (setf (pw::ed-win self) (make-applescript-editor ASO))               (setf (father (pw::ed-win self)) (view-container self))))    (if (and script             (not (null-string-p script)))      (show-script (pw::ed-win self) script)      (if theApp        (show-script (pw::ed-win self)                      (concatenate 'string "tell application"                                  (make-literal-string theApp)                                  " to"))))))(provide :as-edit)