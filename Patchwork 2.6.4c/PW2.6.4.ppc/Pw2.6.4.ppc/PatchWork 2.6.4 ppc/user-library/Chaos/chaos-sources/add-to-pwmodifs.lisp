;addition MM  010494 (in-package :pw);;in file bpf-mini-view(defun scale-to-fit-in-rect (view)  (let* ((current-bpf (break-point-function view))         (bpfs (cons current-bpf (break-point-functions view)))         (x-values (flat (ask-all bpfs #'give-x-points)))         (y-values (and x-values (flat (ask-all bpfs #'give-y-points))))         x-min x-max y-min y-max)   (when x-values     (setq x-min (apply #'min x-values))    (setq x-max (apply #'max x-values))    (setq y-min (apply #'min y-values))    (setq y-max (apply #'max y-values))    (unless (=  x-max x-min)      (setf (h-view-scaler view) (/ (+ (- x-max x-min)(* (- x-max x-min) .01)) (w view) )))     (unless (=  y-max y-min)      (setf (v-view-scaler view) (/ (+ (- y-max y-min)(* (- y-max y-min).01)) (h view) )))    (setq x-min (round x-min (h-view-scaler view))          y-min (- (h view) (round y-max (v-view-scaler view))))    (when (or (> (abs x-min) #,(1- (expt 2 15))) (> (abs y-min) #,(1- (expt 2 15))))      (ed-beep)       (format t "Unable to scale BPF. Please decrease window size (hight) ~%"))    (set-origin view          (make-point (if (minusp x-min)                        (max (- #,(1- (expt 2 15))) x-min)                       (min #,(1- (expt 2 15)) x-min))                     (if (minusp y-min)                       (max (- #,(1- (expt 2 15))) y-min)                       (min #,(1- (expt 2 15)) y-min)))))))