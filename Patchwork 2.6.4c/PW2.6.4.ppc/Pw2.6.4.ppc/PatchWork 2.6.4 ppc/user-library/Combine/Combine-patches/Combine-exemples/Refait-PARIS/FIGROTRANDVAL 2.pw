(in-package :pw)(make-win 'c-pw-window "FIGROTRANDVAL 2" 3145892 35717668 (list (sbox 'c-pw-resize-x 'const "index/ 0=original  1=rétrograde!!" nil 22348062 (list "(1 1 0 0 1 0 0 1 )") 2228391) (sbox 'c-patch-buffer 'c-patch-buffer:buffer "buffer" nil 16842949 '(0) 2228270) (sbox 'c-pw-functional 'g-oper "g-oper" nil 7667754 (list "list" "0" "nil")) (abst 'c-abstract-m 'user-abstraction::permbeat244 "permbeat 3" nil 11665565 (list "(1 2)" "(1 2)" "(0 1 2 3 4 5 6 7 8 9 10 11)") '((common-lisp-user::ls-bas list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (common-lisp-user::measures list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (sequence list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "permbeat 3" 16646543 25690456 (list (sbox 'c-abstract-in 'absin "absin" nil 1048783 (list "measures" 2)) (sbox 'c-abstract-in 'absin "absin" nil 1048691 (list "ls-bas" 1)) (sbox 'c-pw-resize-x 'first "first" nil 11862118 (list "(1 2)") 2228270) (sbox 'c-pw-circ 'circ "circ" t 7209174 (list "(1 2)") 2228270) (sbox 'c-enum-collect-source 'enum "enum" nil 4128814 (list "(1 2)")) (sbox 'c-pw-functional 'permut-circ "permut-circ" t 12910805 (list "(1 2)" 0)) (sbox 'c-pw-functional 'permut-circ "permut-circ" nil 7864420 (list "(1 2)" 0)) (make-instance 'c-pw-resize-x :view-position 10158293 :view-size 2228270 :active-mode t :pw-function 'second :type-list 'nil :view-subviews (list (make-instance 'c-ttybox :view-position 327685 :view-size 917540 :dialog-item-text "0" :doc-string "list" :type-list 'nil))) (sbox 'c-map-first 'pwmap "pwmap" nil 18743340 (list "foo" "(1 2)")) (sbox 'c-abstract-out 'absout "absout" nil 22085713 (list "permbeat 3")) (sbox 'c-abstract-in 'absin "absin" nil 1048599 (list "sequence" 3)) (sbox 'c-pw-functional 'list "list" nil 15728741 (list 0 0))) (list (list 2 0 6) (list 3 0 0) (list 4 0 10) (list 5 0 7) (list 5 1 4) (list 6 0 1) (list 6 1 4) (list 7 0 3) (list 8 0 4) (list 8 1 11) (list 9 0 8) (list 11 0 2) (list 11 1 5)) nil)) (abst 'c-abstract-m 'user-abstraction::retro-mes-contr "retro-mes-contr" nil 29163686 (list "(1 2)" "(1 2)") '((common-lisp-user::tree list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (common-lisp-user::-o/r list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "retro-mes-contr" 22675924 19988726 (list (sbox 'c-abstract-in 'absin "absin" t 524444 (list "-O/R" 2)) (sbox 'c-abstract-out 'absout "absout" nil 17760317 (list "retro-mes-contr")) (make-instance 'c-pw-resize-x :view-position 7667796 :view-size 2228340 :active-mode t :pw-function 'common-lisp-user::retro-mesure :type-list 'nil :view-subviews (list (make-instance 'c-ttybox :view-position 327685 :view-size 917610 :dialog-item-text "0" :doc-string "mesure" :type-list 'nil))) (sbox 'c-enum-collect-source 'enum "enum" t 3276937 (list "(1 2)")) (sbox 'c-map-first 'pwmap "pwmap" t 13369380 (list "foo" "(1 2)" "foo")) (sbox 'c-pw-test 'test "test" t 11272354 (list "=" 0 0 0 0)) (sbox 'c-enum-collect-source 'enum "enum" t 2752523 (list "(1 2)")) (sbox 'c-abstract-in 'absin "absin" t 0 (list "tree" 1))) (list (list 1 0 4) (list 2 0 6) (list 3 0 0) (list 4 0 3) (list 4 1 5) (list 4 2 6) (list 5 1 3) (list 5 3 6) (list 5 4 2) (list 6 0 7)) nil)) (sbox 'c-patch 'rtm-dim "rtm-dim" nil 20447245 (list "nil" 66)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 262466 (list "FIGROTRANDVAL2.pw gives random values anew FOR EACH MEASURE, eliminates zero and rotates discrete figures within measure.N.B. No-0 has been modified with Test instead of List-filter. Retrograde facility included, either fixed or random steering. Total number of measure = tree x en-0b in pwmap.Useful patch for defining multiple lines derived from same sequence of models.Changing bar length allows superposition of different bars in the sequence.") 12058823) (sbox 'c-patch-score-voice 'rtm "rtm" nil 16515084 (list "(4 4)" "((4 (1 1 1 1)))" "(6000)" 60) nil nil) (sbox 'c-patch 'g-random "g-random" nil 23855287 (list 0 1)) (sbox 'c-pw-resize-x 'const "const" nil 262153 (list "((4 ((2 (1 1 1)) -3 (4 (-2 1 -4)) (3 (-5 4)))) (3 (-5 1 -5 1)) (5 (1 (4 (-3 1 -1)) -2 (5 (1 -2 1 1 -2)))))") 2228527) (sbox 'c-pw-resize-x 'const "const" nil 2621451 (list "(4 5 7 3 4 5 4 5 6 4 5 6)") 2228509) (sbox 'c-pw-loop 'pwrepeat "pwrepeat" nil 26345647 (list 12 0)) (sbox 'c-pw-resize-x 'const "const" nil 26476554 (list "(7100)") 2228275) (sbox 'c-pw-functional 'create-list "create-list" nil 29163533 (list 62 0)) (sbox 'c-pw-resize-x 'const "const" nil 4980749 (list "(8 8 16 16 8 32 8 16 8 8 32 8)") 2228502) (sbox 'c-patch-buffer 'c-patch-buffer:buffer "buffer" nil 26345755 '(0) 2228270) (sbox 'c-patch-score-voice 'rtm "rtm" nil 31981717 (list "(4 4)" "((4 (1 1 1 1)))" "(6000)" 60) nil nil) (sbox 'c-pw-resize-x 'const "const" nil 12583181 (list "((4 ((5 (1 2 3)) 7 (4 (2 2 5)) (4 (2 5)))) (3 (5 3 2 6)) (5 (3 (5 (-1 2 4)) 2 (7 (3 -1 1 1 3)))))") 2228485) (sbox 'c-patch-buffer 'c-patch-buffer:buffer "buffer" nil 23068685 '(0) 2228270) (abst 'c-abstract-m 'user-abstraction::no-0247 "no-0" nil 18219300 (list 0 0 0) '((common-lisp-user::low epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list))) (common-lisp-user::high epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list))) (common-lisp-user::l-nth epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list)))) 'nil (make-win 'c-pw-window "no-0" 10879277 26804551 (list (sbox 'c-abstract-in 'absin "absin" nil 1769626 (list "high" 2)) (sbox 'c-patch 'g-random "g-random" nil 4456490 (list 0 0)) (sbox 'c-abstract-out 'absout "absout" nil 19988556 (list "no-0")) (abst 'c-abstract-m 'user-abstraction::w-zero "w-zero" nil 14417976 (list "(1 2)") '((list list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "W-Zero" 8913484 8847510 (list (sbox 'c-abstract-in 'absin "absin" t 0 (list "list" 1)) (sbox 'c-pw-functional 'mapcar "mapcar" t 5242887 (list "1+" "(1 2)")) (sbox 'c-pw-resize-x 'make-num-fun "make-num-fun" t 2686983 (list "(f(x)=(if (= 0 x) -1 x))") 2228303) (sbox 'c-abstract-out 'absout "absout" nil 6619240 (list "W-Zero"))) (list (list 1 0 2) (list 1 1 0) (list 3 0 1)) nil)) (sbox 'c-patch-buffer 'c-patch-buffer:buffer "buffer" nil 7667753 '(0) 2228270) (sbox 'c-abstract-in 'absin "absin" nil 15597723 (list "l-nth" 3)) (sbox 'c-abstract-in 'absin "absin" nil 2 (list "low" 1)) (sbox 'c-pw-resize-x 'flat "flat" nil 11665459 (list "(1 2)") 2228270) (sbox 'c-patch 'posn-match "posn-match" nil 17301568 (list "(1 2)" 0))) (list (list 1 0 6) (list 1 1 0) (list 2 0 8) (list 3 0 7) (list 4 0 1) (list 7 0 4) (list 8 0 3) (list 8 1 5)) nil)) (sbox 'c-pw-resize-x 'const "const" nil 15270228 (list "((0 ((1 (2 3 4)) 5 (6 (7 8 9)) (10 (11 12)))) (13 (14 15 16 17)) (18 (19 (20 (21 22 23)) 24 (25 (26 27 28 29 30)))))") 2228379)) (list (list 1 0 19) (list 2 1 10) (list 2 2 14) (list 3 0 10) (list 3 1 1) (list 4 0 18) (list 4 1 15) (list 5 0 7) (list 7 0 2) (list 7 1 3) (list 11 1 8) (list 13 1 12) (list 15 0 11) (list 16 0 2) (list 16 1 4) (list 16 2 13) (list 18 0 5) (list 19 0 9) (list 19 1 17) (list 19 2 20)) t)