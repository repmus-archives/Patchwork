(in-package :pw)(make-win 'c-pw-window "FIGROTRANDVAL" 4784344 40174184 (list (sbox 'c-patch-buffer 'c-patch-buffer:buffer "buffer" nil 16253101 '(0) 2228270) (sbox 'c-pw-resize-x 'const "const" nil 3866638 (list "(8 32 16 8 16 8 8 16 8 8 8 16)") 2228418) (sbox 'c-patch-score-voice 'rtm "rtm" nil 16777254 (list "(4 4)" "((4 (1 1 1 1)))" "(6000)" 60) nil nil) (sbox 'c-pw-loop 'pwrepeat "pwrepeat" nil 24248638 (list 12 0)) (abst 'c-abstract-m 'user-abstraction::permbeat244 "permbeat 3" nil 11468936 (list "(1 2)" "(1 2)" "(1 2)") '((common-lisp-user::ls-bas list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (common-lisp-user::measures list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (sequence list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "permbeat 3" 16646543 25690456 (list (sbox 'c-abstract-in 'absin "absin" nil 1048783 (list "measures" 2)) (sbox 'c-abstract-in 'absin "absin" nil 1048691 (list "ls-bas" 1)) (sbox 'c-pw-resize-x 'first "first" nil 11862118 (list "(1 2)") 2228270) (sbox 'c-pw-circ 'circ "circ" t 7209174 (list "(1 2)") 2228270) (sbox 'c-enum-collect-source 'enum "enum" nil 4128814 (list "(1 2)")) (sbox 'c-pw-functional 'permut-circ "permut-circ" t 12910805 (list "(1 2)" 0)) (sbox 'c-pw-functional 'permut-circ "permut-circ" nil 7864420 (list "(1 2)" 0)) (make-instance 'c-pw-resize-x :view-position 10158293 :view-size 2228270 :active-mode t :pw-function 'second :type-list 'nil :view-subviews (list (make-instance 'c-ttybox :view-position 327685 :view-size 917540 :dialog-item-text "0" :doc-string "list" :type-list 'nil))) (sbox 'c-map-first 'pwmap "pwmap" nil 18743340 (list "foo" "(1 2)")) (sbox 'c-abstract-out 'absout "absout" nil 22085713 (list "permbeat 3")) (sbox 'c-abstract-in 'absin "absin" nil 1048599 (list "sequence" 3)) (sbox 'c-pw-functional 'list "list" nil 15728741 (list 0 0))) (list (list 2 0 6) (list 3 0 0) (list 4 0 10) (list 5 0 7) (list 5 1 4) (list 6 0 1) (list 6 1 4) (list 7 0 3) (list 8 0 4) (list 8 1 11) (list 9 0 8) (list 11 0 2) (list 11 1 5)) nil)) (sbox 'c-pw-resize-x 'const "index/ 0=original  1=rétrograde!!" nil 17432970 (list "(1 1 0 0 1 0 0 1 )") 2228346) (sbox 'c-pw-loop 'pwrepeat "pwrepeat" nil 30343519 (list 1 0)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 262466 (list "FIGROTRANDVAL.pw gives random values, eliminates zero and rotates discrete figures within measure.N.B. No-0 has been modified with Test instead of List-filter. Retrograde facility included, either fixed or random steering. Total number of measure = tree x en-0b in pwmap.Useful patch for defining multiple lines derived from same sequence of models.Changing bar length allows superposition of different bars in the sequence.") 11272392) (sbox 'c-pw-resize-x 'flat-once "flat-once" nil 33292656 (list "(1 2)") 2228270) (sbox 'c-pw-resize-x 'const "const" nil 8782006 (list "(0 1 2 3 4 5 6 7 8 9 10 11)") 2228286) (sbox 'c-pw-resize-x 'const "const" nil 11862276 (list "((4 (3 7 (4 (2 2 5)) (4 (2 5)))) (3 (5 3 2 6)) (5 (3 (5 (-1 2 4)) 2 (7 (3 -1 1 1 3)))))") 2228485) (sbox 'c-patch 'rtm-dim "rtm-dim" nil 23855233 (list "nil" 66)) (abst 'c-abstract-m 'user-abstraction::retro-mes-contr "retro-mes-contr" nil 27263289 (list "(1 2)" "(1 2)") '((common-lisp-user::tree list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (common-lisp-user::-o/r list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "retro-mes-contr" 22675924 19988726 (list (sbox 'c-abstract-in 'absin "absin" t 524444 (list "-O/R" 2)) (sbox 'c-abstract-out 'absout "absout" nil 17760317 (list "retro-mes-contr")) (make-instance 'c-pw-resize-x :view-position 7667796 :view-size 2228340 :active-mode t :pw-function 'common-lisp-user::retro-mesure :type-list 'nil :view-subviews (list (make-instance 'c-ttybox :view-position 327685 :view-size 917610 :dialog-item-text "0" :doc-string "mesure" :type-list 'nil))) (sbox 'c-enum-collect-source 'enum "enum" t 3276937 (list "(1 2)")) (sbox 'c-map-first 'pwmap "pwmap" t 13369380 (list "foo" "(1 2)" "foo")) (sbox 'c-pw-test 'test "test" t 11272354 (list "=" 0 0 0 0)) (sbox 'c-enum-collect-source 'enum "enum" t 2752523 (list "(1 2)")) (sbox 'c-abstract-in 'absin "absin" t 0 (list "tree" 1))) (list (list 1 0 4) (list 2 0 6) (list 3 0 0) (list 4 0 3) (list 4 1 5) (list 4 2 6) (list 5 1 3) (list 5 3 6) (list 5 4 2) (list 6 0 7)) nil)) (sbox 'c-pw-functional 'g-oper "g-oper" nil 11730955 (list "list" "0" "nil")) (sbox 'c-patch-buffer 'c-patch-buffer:buffer "buffer" nil 25297311 '(0) 2228270) (sbox 'c-pw-resize-x 'const "const" nil 983055 (list "((4 (2 -4 (4 (-3 2 -4)) (3 (-5 4)))) (3 (-5 1 -5 1)) (5 (1 (4 (-3 1 -1)) -2 (5 (1 -2 1 1 -2)))))") 2228527) (sbox 'c-patch 'g-random "g-random" nil 21299516 (list 0 1)) (sbox 'c-patch-polifrtm 'poly-rtm "poly-rtm" t 35192878 (list "nil" "nil") nil nil) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 27590779 (list "N.B. Evaluate no-0, then permbeat 3, otherwise patch will not re-evaluate all modules. This version 2-voiced.") 6488179) (sbox 'c-patch-score-voice 'rtm "rtm" nil 33620219 (list "(4 4)" "((4 (1 1 1 1)))" "(6000)" 60) nil nil) (sbox 'c-pw-resize-x 'const "const" nil 6488085 (list "(1 5 3 2 5 6 2 5 3 2 1 5)") 2228389) (abst 'c-abstract-m 'user-abstraction::no-0247 "no-0" nil 17170693 (list 0 0 0) '((common-lisp-user::low epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list))) (common-lisp-user::high epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list))) (common-lisp-user::l-nth epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list)))) 'nil (make-win 'c-pw-window "no-0" 15073805 35717766 (list (sbox 'c-abstract-in 'absin "absin" nil 1769626 (list "high" 2)) (sbox 'c-patch 'g-random "g-random" nil 4456490 (list 0 0)) (sbox 'c-abstract-out 'absout "absout" t 19988556 (list "no-0")) (abst 'c-abstract-m 'user-abstraction::w-zero "w-zero" nil 14417976 (list "(1 2)") '((list list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "W-Zero" 8913484 8847510 (list (sbox 'c-abstract-in 'absin "absin" t 0 (list "list" 1)) (sbox 'c-pw-functional 'mapcar "mapcar" t 5242887 (list "1+" "(1 2)")) (sbox 'c-pw-resize-x 'make-num-fun "make-num-fun" t 2686983 (list "(f(x)=(if (= 0 x) -1 x))") 2228303) (sbox 'c-abstract-out 'absout "absout" nil 6619240 (list "W-Zero"))) (list (list 1 0 2) (list 1 1 0) (list 3 0 1)) nil)) (sbox 'c-patch-buffer 'c-patch-buffer:buffer "buffer" nil 7667753 '(0) 2228270) (sbox 'c-abstract-in 'absin "absin" t 15597723 (list "l-nth" 3)) (sbox 'c-abstract-in 'absin "absin" nil 2 (list "low" 1)) (sbox 'c-pw-resize-x 'flat "flat" nil 11665459 (list "(1 2)") 2228270) (sbox 'c-patch 'posn-match "posn-match" t 17301568 (list "(1 2)" 0))) (list (list 1 0 6) (list 1 1 0) (list 2 0 8) (list 3 0 7) (list 4 0 1) (list 7 0 4) (list 8 0 3) (list 8 1 5)) nil)) (sbox 'c-patch-buffer 'c-patch-buffer:buffer "buffer" nil 25166085 '(0) 2228270) (sbox 'c-pw-resize-x 'const "const" nil 14418267 (list "((0 (1 2 (3 (4 5 6)) (7 (8 9)))) (10 (11 12 13 14)) (15 (16 (17 (18 19 20)) 21 (22 (23 24 25 26 27)))))") 2228413)) (list (list 0 0 21) (list 2 0 13) (list 2 1 4) (list 3 1 16) (list 4 0 20) (list 4 1 0) (list 4 2 9) (list 6 1 12) (list 8 0 6) (list 11 0 2) (list 12 0 22) (list 12 1 14) (list 13 1 20) (list 13 2 1) (list 14 0 3) (list 17 0 2) (list 17 1 19) (list 19 0 13) (list 19 1 8) (list 21 0 15) (list 21 1 10) (list 21 2 23) (list 22 0 11)) t)