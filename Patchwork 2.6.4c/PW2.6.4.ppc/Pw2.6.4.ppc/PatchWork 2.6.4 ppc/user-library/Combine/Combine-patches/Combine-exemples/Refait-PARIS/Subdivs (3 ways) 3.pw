(in-package :pw)(make-win 'c-pw-window "Subdivs (3 ways) 3" 3866793 32244493 (list (sbox 'c-pw-resize-x 'const "const" nil 8912999 (list "(9 5 14 9 7 3 4 9  9 7 5 4 3 5 4 5 4)") 2228499) (sbox 'c-pw-resize-x 'const "const" nil 5963812 (list "(2 3 4 5 2 3 4 5 6 2 3 4 5 6 7 2 3 4)") 2228496) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 21954690 (list "Version (a)") 1900649) (sbox 'c-pw-functional 'g-oper "g-oper" nil 18284804 (list "list" "0" "8")) (sbox 'c-patch-score-voice 'rtm "rtm" nil 19726703 (list "(4 4)" "((4 (1 1 1 1)))" "(6000)" 60) nil nil) (sbox 'c-patch-score-voice 'rtm "rtm" nil 18088089 (list "(4 4)" "((4 (1 1 1 1)))" "(6000)" 60) nil nil) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 16843127 (list "Version (c)") 2228295) (abst 'c-abstract-m 'user-abstraction::subsubs-var "subsubs-var" nil 7078330 (list "(1 2)" "(1 2)" "(1 2)") '((common-lisp-user::vals list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (list list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (common-lisp-user::arg-0 list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "subsubs-var" 16711855 34210309 (list (sbox 'c-enum-collect-source 'enum "enum" nil 7602378 (list "(1 2)")) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 24707184 (list "Cette abstraction calcule une subdivisions pour des mesures, de façon que la liste de base serve aussi pour le calcule des subdivisions.") 5046471) (abst 'c-abstract-m 'user-abstraction::b-tree154 "b-tre2e" nil 3735552 (list "(1 2)") '((list list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "b-tre2e" 8716476 21495955 (list (sbox 'c-pw-resize-x 'const "const" nil 6684754 (list "(1 )") 2228270) (sbox 'c-enum-collect-source 'enum "enum" nil 3735582 (list "(1 2)")) (sbox 'c-abstract-in 'absin "absin" nil 1048612 (list "list" 1)) (sbox 'c-map-first 'pwmap "pwmap" nil 14221338 (list "foo" "(1 2)")) (sbox 'c-pw-functional 'list "list" nil 9961521 (list 0 0)) (sbox 'c-abstract-out 'absout "absout" nil 18153516 (list "b-tre2e"))) (list (list 1 0 2) (list 3 0 1) (list 3 1 4) (list 4 0 1) (list 4 1 0) (list 5 0 3)) nil)) (sbox 'c-pw-functional 'list "list" nil 19792065 (list 1 0)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 2490623 (list "Dans l'abstraction <circ-1> on controle où va commencer la liste de réference") 5701764) (make-instance 'c-patch :view-position 22151328 :view-size 2228308 :active-mode nil :pw-function 'common-lisp-user::subs-pulse :type-list 'nil :view-subviews (list (make-instance 'c-ttybox :view-position 327685 :view-size 917540 :dialog-item-text "0" :doc-string "liste" :type-list 'nil) (make-instance 'c-ttybox :view-position 327723 :view-size 917540 :dialog-item-text "0" :doc-string "sub" :type-list 'nil))) (sbox 'c-map-first 'pwmap "pwmap" nil 23592978 (list "foo" "(1 2)" "foo" "foo")) (sbox 'c-pw-resize-x 'length "length" nil 10813711 (list "(1 2)") 2228270) (sbox 'c-enum-collect-source 'enum "enum" nil 10223663 (list "(1 2)")) (sbox 'c-abstract-out 'absout "absout" nil 27197483 (list "subsubs-var")) (abst 'c-abstract-m 'user-abstraction::circ-1 "circ-1" nil 5963825 (list "(1 2)") '((common-lisp-user::liste list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "circ-1" 8782163 21299371 (list (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" t 16318467 (list "Cette abstraction calcule une liste d'indices de permutations circulaires") 3342499) (sbox 'c-patch 'arithm-ser "arithm-ser" nil 9437217 (list -1 1 10)) (sbox 'c-patch 'g- "g-" nil 6422564 (list 0 2)) (sbox 'c-abstract-out 'absout "absout" nil 13828152 (list "circ-1")) (sbox 'c-abstract-in 'absin "absin" nil 393252 (list "liste" 1)) (sbox 'c-pw-resize-x 'length "length" nil 3276858 (list "(1 2)") 2228270)) (list (list 1 2 2) (list 2 0 5) (list 3 0 1) (list 5 0 4)) nil)) (sbox 'c-abstract-in 'absin "absin" nil 3670116 (list "vals" 1)) (sbox 'c-enum-collect-source 'enum "enum" nil 15597592 (list "(1 2)")) (sbox 'c-abstract-in 'absin "absin" nil 262166 (list "list" 2)) (sbox 'c-pw-functional 'permut-circ "permut-circ" nil 14680201 (list "(1 2)" 5)) (sbox 'c-patch 'g- "g-" nil 14680374 (list 6 3)) (sbox 'c-abstract-in 'absin "absin" nil 146 (list "arg-0" 3)) (sbox 'c-pw-functional 'butlast "butlast" nil 17301690 (list "(1 2)" 0))) (list (list 0 0 16) (list 2 0 13) (list 3 1 17) (list 5 0 12) (list 5 1 3) (list 6 0 12) (list 6 1 5) (list 6 2 8) (list 6 3 0) (list 7 0 11) (list 8 0 10) (list 9 0 6) (list 10 0 11) (list 12 0 2) (list 14 0 11) (list 14 1 8) (list 15 0 7) (list 15 1 0) (list 17 0 14) (list 17 1 15)) nil)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 22151199 (list "Version (b)") 2097238) (sbox 'c-patch-polifrtm 'poly-rtm "poly-rtm" nil 24903927 (list "nil" "nil" "nil") nil nil) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 1835021 (list "SUBDIVS (THREE WAYS) 2 gives (a) No. of subs. equal to meas and Val but with order of subdiv. values REVERSED(b) measure = val, no. subs. differs & (c) all three variables independent. ") 3604799) (sbox 'c-pw-resize-x 'const "const" nil 2818392 (list "(1 2 3 4 5 6 2 3 4 5 6 3 4 5 6 4 5 6)") 2228516) (abst 'c-abstract-m 'user-abstraction::subdsubs-mesure304 "subdsubs-mesure" nil 14483652 (list 0 "(1 2)") '((common-lisp-user::arg-0 epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list))) (common-lisp-user::ref-list list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "subdsubs-mesure" 7733710 43647618 (list (sbox 'c-pw-functional 'permut-circ "permut-circ" nil 16646317 (list "(1 2)" 5)) (sbox 'c-pw-functional 'list "list" nil 26607823 (list 1 0)) (sbox 'c-enum-collect-source 'enum "enum" nil 7602395 (list "(1 2)")) (abst 'c-abstract-m 'user-abstraction::circ-1 "circ-1" nil 6226023 (list "(1 2)") '((common-lisp-user::liste list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "circ-1" 8782163 21299371 (list (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 16318467 (list "Cette abstraction calcule une liste d'indices de permutations circulaires") 3342499) (sbox 'c-patch 'arithm-ser "arithm-ser" nil 9437217 (list -1 1 10)) (sbox 'c-patch 'g- "g-" nil 6422564 (list 0 2)) (sbox 'c-abstract-out 'absout "absout" nil 13828152 (list "circ-1")) (sbox 'c-abstract-in 'absin "absin" nil 393252 (list "liste" 1)) (sbox 'c-pw-resize-x 'length "length" nil 3276858 (list "(1 2)") 2228270)) (list (list 1 2 2) (list 2 0 5) (list 3 0 1) (list 5 0 4)) nil)) (sbox 'c-enum-collect-source 'enum "enum" nil 15728685 (list "(1 2)")) (sbox 'c-abstract-out 'absout "absout" nil 38731842 (list "subdsubs-mesure")) (sbox 'c-enum-collect-source 'enum "enum" nil 9764923 (list "(1 2)")) (sbox 'c-pw-functional 'butlast "butlast" nil 23527669 (list "(1 2)" 0)) (make-instance 'c-patch :view-position 30474385 :view-size 2228308 :active-mode t :pw-function 'common-lisp-user::subs-pulse :type-list 'nil :view-subviews (list (make-instance 'c-ttybox :view-position 327685 :view-size 917540 :dialog-item-text "0" :doc-string "liste" :type-list 'nil) (make-instance 'c-ttybox :view-position 327723 :view-size 917540 :dialog-item-text "0" :doc-string "sub" :type-list 'nil))) (sbox 'c-abstract-in 'absin "absin" nil 655368 (list "list" 1)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 25362773 (list "Cette abstraction calcule une subdivisions pour des mesures, de façon que la liste de base serve aussi pour le calcule des subdivisions.") 5046471) (sbox 'c-patch 'g- "g-" nil 20382025 (list 6 3)) (sbox 'c-pw-resize-x 'length "length" nil 16974131 (list "(1 2)") 2228270) (sbox 'c-map-first 'pwmap "pwmap" nil 34537511 (list "foo" "(1 2)" "foo" "foo")) (sbox 'c-pw-resize-x 'reverse "reverse" nil 19660990 (list "(1 2)") 2228270) (sbox 'c-abstract-in 'absin "absin" nil 393368 (list "ref-list" 2)) (abst 'c-abstract-m 'user-abstraction::b-tree154 "b-tre2e" nil 5177359 (list "(1 2)") '((list list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "b-tre2e" 8716476 21495955 (list (sbox 'c-pw-resize-x 'const "const" nil 6684754 (list "(1 )") 2228270) (sbox 'c-enum-collect-source 'enum "enum" nil 3735582 (list "(1 2)")) (sbox 'c-abstract-in 'absin "absin" nil 1048612 (list "list" 1)) (sbox 'c-map-first 'pwmap "pwmap" nil 14221338 (list "foo" "(1 2)")) (sbox 'c-pw-functional 'list "list" nil 9961521 (list 0 0)) (sbox 'c-abstract-out 'absout "absout" nil 18153516 (list "b-tre2e"))) (list (list 1 0 2) (list 3 0 1) (list 3 1 4) (list 4 0 1) (list 4 1 0) (list 5 0 3)) nil)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 786772 (list "Dans l'abstraction <circ-1> on controle où va commencer la liste de réference") 5701764)) (list (list 0 0 9) (list 0 1 6) (list 1 1 7) (list 2 0 9) (list 3 0 15) (list 4 0 16) (list 5 0 13) (list 6 0 3) (list 7 0 14) (list 7 1 11) (list 8 0 4) (list 8 1 1) (list 11 0 12) (list 11 1 2) (list 12 0 9) (list 13 0 4) (list 13 1 8) (list 13 2 6) (list 13 3 2) (list 14 0 0) (list 16 0 9)) nil)) (sbox 'c-pw-resize-x 'const "const" nil 24445278 (list "(32 16 32 32 16 8 8 16 32 32 32 16 8 8 8 8 8 8)") 2228568) (sbox 'c-patch-score-voice 'rtm "rtm" nil 18284579 (list "(4 4)" "((4 (1 1 1 1)))" "(6000)" 60) nil nil) (abst 'c-abstract-m 'user-abstraction::subsubs-var "subsubs-var95" nil 13959240 (list "(1 2)" "(1 2)" "(1 2)") '((common-lisp-user::vals list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (list list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (common-lisp-user::arg-0 list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "subsubs-var" 19005890 34210309 (list (make-instance 'c-patch :view-position 22413473 :view-size 2228308 :active-mode nil :pw-function 'common-lisp-user::subs-pulse :type-list 'nil :view-subviews (list (make-instance 'c-ttybox :view-position 327685 :view-size 917540 :dialog-item-text "0" :doc-string "liste" :type-list 'nil) (make-instance 'c-ttybox :view-position 327723 :view-size 917540 :dialog-item-text "0" :doc-string "sub" :type-list 'nil))) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 26083444 (list "Cette abstraction calcule une subdivisions pour des mesures, de façon que la liste de base serve aussi pour le calcule des subdivisions.") 5046471) (abst 'c-abstract-m 'user-abstraction::b-tree154 "b-tre2e" nil 3735552 (list "(1 2)") '((list list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "b-tre2e" 8716476 21495955 (list (sbox 'c-pw-resize-x 'const "const" nil 6684754 (list "(1 )") 2228270) (sbox 'c-enum-collect-source 'enum "enum" nil 3735582 (list "(1 2)")) (sbox 'c-abstract-in 'absin "absin" nil 1048612 (list "list" 1)) (sbox 'c-map-first 'pwmap "pwmap" nil 14221338 (list "foo" "(1 2)")) (sbox 'c-pw-functional 'list "list" nil 9961521 (list 0 0)) (sbox 'c-abstract-out 'absout "absout" nil 18153516 (list "b-tre2e"))) (list (list 1 0 2) (list 3 0 1) (list 3 1 4) (list 4 0 1) (list 4 1 0) (list 5 0 3)) nil)) (sbox 'c-pw-functional 'list "list" nil 19792065 (list 1 0)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 2490623 (list "Dans l'abstraction <circ-1> on controle où va commencer la liste de réference") 5701764) (sbox 'c-enum-collect-source 'enum "enum" nil 7602378 (list "(1 2)")) (sbox 'c-map-first 'pwmap "pwmap" nil 23592978 (list "foo" "(1 2)" "foo" "foo")) (sbox 'c-pw-resize-x 'length "length" nil 10813711 (list "(1 2)") 2228270) (sbox 'c-enum-collect-source 'enum "enum" nil 10223663 (list "(1 2)")) (sbox 'c-abstract-out 'absout "absout" nil 27197483 (list "subsubs-var")) (abst 'c-abstract-m 'user-abstraction::circ-1 "circ-1" nil 5963825 (list "(1 2)") '((common-lisp-user::liste list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list)))) 'nil (make-win 'c-pw-window "circ-1" 8782163 21299371 (list (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" t 16318467 (list "Cette abstraction calcule une liste d'indices de permutations circulaires") 3342499) (sbox 'c-patch 'arithm-ser "arithm-ser" nil 9437217 (list -1 1 10)) (sbox 'c-patch 'g- "g-" nil 6422564 (list 0 2)) (sbox 'c-abstract-out 'absout "absout" nil 13828152 (list "circ-1")) (sbox 'c-abstract-in 'absin "absin" nil 393252 (list "liste" 1)) (sbox 'c-pw-resize-x 'length "length" nil 3276858 (list "(1 2)") 2228270)) (list (list 1 2 2) (list 2 0 5) (list 3 0 1) (list 5 0 4)) nil)) (sbox 'c-abstract-in 'absin "absin" nil 3670116 (list "vals" 1)) (sbox 'c-enum-collect-source 'enum "enum" nil 15597592 (list "(1 2)")) (sbox 'c-abstract-in 'absin "absin" nil 262166 (list "list" 2)) (sbox 'c-pw-functional 'permut-circ "permut-circ" nil 14680201 (list "(1 2)" 5)) (sbox 'c-patch 'g- "g-" nil 14680374 (list 6 3)) (sbox 'c-abstract-in 'absin "absin" nil 146 (list "arg-0" 3)) (sbox 'c-pw-functional 'butlast "butlast" nil 17301690 (list "(1 2)" 0))) (list (list 0 0 12) (list 0 1 3) (list 2 0 13) (list 3 1 17) (list 5 0 16) (list 6 0 12) (list 6 1 0) (list 6 2 8) (list 6 3 5) (list 7 0 11) (list 8 0 10) (list 9 0 6) (list 10 0 11) (list 12 0 2) (list 14 0 11) (list 14 1 8) (list 15 0 7) (list 15 1 5) (list 17 0 14) (list 17 1 15)) nil)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 12845553 (list " N.B. Number of values in each const must be larger than highest value in any const in order to avoid negative vals ") 3539156)) (list (list 3 1 0) (list 3 2 13) (list 4 0 3) (list 4 1 7) (list 5 0 3) (list 5 1 12) (list 7 0 11) (list 7 1 0) (list 7 2 1) (list 9 0 14) (list 9 1 5) (list 9 2 4) (list 12 0 0) (list 12 1 0) (list 14 0 3) (list 14 1 15) (list 15 0 0) (list 15 1 0) (list 15 2 1)) t)