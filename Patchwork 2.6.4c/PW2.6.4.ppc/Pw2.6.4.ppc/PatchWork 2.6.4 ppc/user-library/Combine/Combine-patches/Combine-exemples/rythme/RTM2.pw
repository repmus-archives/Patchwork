(in-package :pw)(make-win 'c-pw-window "RTM2" 4653175 26018139 (list (sbox 'c-pw-functional 'g-oper "g-oper" nil 6225941 (list "list" "0" "8")) (sbox 'c-patch 'common-lisp-user::subs-pul-lis "subs-pul-lis" nil 18612300 (list "nil" 3)) (sbox 'c-pw-resize-x 'const "const" nil 458785 (list "(5 4 3 6 2 1)") 2228317) (sbox 'c-patch-score-voice 'rtm "rtm" nil 14286894 (list "(4 8)" "((4(2 2)))" "(6000)" 60) nil nil) (sbox 'c-patch-score-voice 'rtm "rtm" nil 21823524 (list "(4 8)" "((4(2 2)))" "(6000)" 60) nil nil) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 9437321 (list "L'abstract <mesur-subdv> calcule l'arbre des temps") 4915313) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 17629351 (list "Le module <subs-pul-lis> prend une structure rythmique quelconque est subdivise toutes les pulsations par <sub>") 7078017) (abst 'c-abstract-m 'user-abstraction::mesur-subdv "mesur-subdv" t 7012495 (list "(1 2)" 0) '((common-lisp-user::matrice list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (common-lisp-user::b-list nilnum (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "num" :type-list nil))) 'nil (make-win 'c-pw-window "mesur-subdv" 6815891 21561721 (list (abst 'c-abstract-m 'user-abstraction::n-subd "n-subd" t 4194480 (list 0) '((common-lisp-user::arg-0 nilnum (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "num" :type-list nil))) 'nil (make-win 'c-pw-window "N-subd" 2883755 35062138 (list (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 28835842 (list "Cette abstraction calcule une liste numérique de subdivisions, de telle forme que la lecture de gauche à droite nous donne les subdivisions et la lecture de droite à gauche le nombre de fois que ces subdivisions seront utilisées. Par exemple pour la liste 5 4 3 2 1 on aura 1 fois 5 subds, 2 fois 4 subds, etc...") 5177714) (sbox 'c-patch 'g- "g-" nil 5963875 (list 0 1)) (sbox 'c-map-first 'pwmap "pwmap" nil 22478891 (list "foo" "(1 2)")) (sbox 'c-enum-collect-source 'enum "enum" nil 12648498 (list "(1 2)")) (sbox 'c-pw-resize-x 'reverse "reverse" nil 15597822 (list "(1 2)") 2228270) (sbox 'c-abstract-out 'absout "absout" nil 26017909 (list "N-subd")) (make-instance 'c-patch :view-position 14418064 :view-size 2228308 :active-mode nil :pw-function 'nth :type-list 'nil :view-subviews (list (make-instance 'c-ttybox :view-position 327685 :view-size 917540 :dialog-item-text "3" :doc-string "arg-0" :type-list 'nil) (make-instance 'c-ttybox :view-position 327723 :view-size 917540 :dialog-item-text "0" :doc-string "arg-1" :type-list 'nil))) (sbox 'c-patch 'arithm-ser "arithm-ser" nil 8650848 (list 0 1 3)) (sbox 'c-patch 'g/ "g/" nil 3276893 (list 0 2)) (sbox 'c-pw-resize-x 'flat "flat" nil 25559093 (list "(1 2)") 2228270) (sbox 'c-pw-resize-x 'length "length" nil 3080214 (list "(1 2)") 2228270) (sbox 'c-pw-functional 'create-list "create-list" nil 20709522 (list 10 0)) (sbox 'c-abstract-in 'absin "absin" nil 196698 (list "arg-0" 1)) (make-instance 'c-patch :view-position 17760397 :view-size 2228308 :active-mode nil :pw-function 'nth :type-list 'nil :view-subviews (list (make-instance 'c-ttybox :view-position 327685 :view-size 917540 :dialog-item-text "1" :doc-string "arg-0" :type-list 'nil) (make-instance 'c-ttybox :view-position 327723 :view-size 917540 :dialog-item-text "0" :doc-string "arg-1" :type-list 'nil)))) (list (list 1 0 8) (list 2 0 3) (list 2 1 11) (list 3 0 7) (list 4 0 12) (list 5 0 9) (list 6 0 3) (list 6 1 12) (list 7 2 1) (list 8 0 10) (list 9 0 2) (list 10 0 12) (list 11 0 13) (list 11 1 6) (list 13 0 3) (list 13 1 4)) nil)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" t 16318631 (list "Cette abstract calcule une séquence de mesures à partir d'une séquence numérique <matrice> et d'une deuxième liste <B-list> qui propose des subdivisions") 4915390) (sbox 'c-abstract-in 'absin "absin" nil 590000 (list "B-list" 2)) (sbox 'c-pw-resize-x 'length "length" nil 7995427 (list "(1 2)") 2228270) (sbox 'c-abstract-in 'absin "absin" nil 786478 (list "matrice" 1)) (sbox 'c-pw-circ 'circ "circ" nil 3866668 (list "(1 2)") 2228312) (sbox 'c-abstract-out 'absout "absout" nil 17629278 (list "mesur-subdv")) (abst 'c-abstract-m 'user-abstraction::ord-puls294296 "ord-puls" nil 14352462 (list "0" "nil") '((common-lisp-user::subd list (:view-size 917540 :doc-string "lst" :value 0 :dialog-item-text "(1 2)" :type-list nil)) (common-lisp-user::puls list (:view-size 917540 :doc-string "lst" :value 'nil :dialog-item-text "(1 2)" :type-list nil))) 'nil (make-win 'c-pw-window "ord-puls" 8847760 23396738 (list (sbox 'c-abstract-out 'absout "absout" nil 20185295 (list "ord-puls")) (sbox 'c-abstract-in 'absin "absin" nil 3014676 (list "puls" 2)) (sbox 'c-abstract-in 'absin "absin" nil 2228382 (list "subd" 1)) (sbox 'c-map-first 'pwmap "pwmap" nil 12910613 (list "foo" "(1 2)")) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 6029529 (list "cette abstraction construit une série de mesures avec   des subdivisions <subd> par mesure et <puls> pulsations par mesure!! ") 8061074) (sbox 'c-enum-collect-source 'enum "enum" nil 6684703 (list "(1 2)")) (sbox 'c-pw-functional 'create-list "create-list" t 9764943 (list 10 1)) (sbox 'c-pw-functional 'mapcar "mapcar" nil 15794290 (list "list" "(1 2)" "(1 2)"))) (list (list 0 0 7) (list 3 0 5) (list 3 1 6) (list 5 0 1) (list 6 0 5) (list 7 1 2) (list 7 2 3)) nil)) (sbox 'c-pw-loop 'pwrepeat "pwrepeat" nil 11010104 (list 10 0)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 3145958 (list "L'abstraction <n-subd> calcule des pulsations par mesure selon une division de la séquence de base, de façon que la première moitié indique les pulsations et la deuxième moitié indique combien de fois eles seront reprises!!") 11403393)) (list (list 0 0 2) (list 3 0 0) (list 5 0 4) (list 6 0 7) (list 7 0 8) (list 7 1 0) (list 8 0 3) (list 8 1 5)) nil))) (list (list 0 1 2) (list 1 0 3) (list 3 0 0) (list 3 1 7) (list 4 0 0) (list 4 1 1) (list 7 0 2) (list 7 1 2)) t)