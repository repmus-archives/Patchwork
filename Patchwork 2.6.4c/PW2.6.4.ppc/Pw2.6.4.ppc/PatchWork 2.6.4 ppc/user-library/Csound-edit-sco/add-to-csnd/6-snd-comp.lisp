(in-package "CS-E")(defvar *tailleentete* )(setf *tailleentete* 10);(setf coin (make-aiffstruct :datasize (* 2 1) :samplingrate 44100));(aiffstruct-magic coin)(defstruct aiffstruct  (magic #x464f524d :type longint)       ; lp aiff typ  (datalocation 28 :type longint) ; default header size if 4 char comment (slot info)  (datasize 0 :type longint)  ; no data yet  (dataformat 3 :type longint)  ;;; default data format 16 bit linear  (samplingrate 44100 :type longint) ;; default SR 44100  (channelcount  1 :type longint) ; table is only mono  (info 0 :type longint));***********************************************************(defun read-snd-file-16 (&key (filename (choose-file-dialog )))  (catch 'file-error    (with-open-file (instream filename                              :element-type '(signed-byte 16))      (while (print (read-byte instream nil nil))))));(defun 2-bytes-to-nums (instream);"son 16 bit (2 byte) 1er bit < 127 => positif";  (+ (ash (- (logand (+ 127 (read-byte instream)) #xff) 127) 8);     (read-byte instream)));(read-snd-file-p);(read-snd-file-16);(+ (ash (- (logand (+ 127 128) #xff) 127) 8) 0);(ash 2 2);**********************************************************(defunp aiff-rms ((filename-in list ( :value  '() :type-list '(string)))                  (filename-out list ( :value  '() :type-list '(string)))                  (taille integer ( :value 1024))                  (out-type (menu (:menu-box-list (("txt" . txt)( "bin" . bin))))))       nil        "écrit un fichier texte donnant la variation d'énergie d'un fichier aiff,taille donne la taille de la fenetre pour le calcul de chaque amplitude"  (unless filename-in     (setf filename-in (CCL:choose-file-dialog :button-string "snd")))  (unless filename-out     (setf filename-out (CCL:choose-new-file-dialog :button-string "save")))  (when  (and filename-in filename-out)    (let ((rms 0) sample (n 1))      (with-open-file (input filename-in                             :element-type '(signed-byte 16))        (with-open-file (output filename-out                                :direction :output :if-exists :rename-and-delete                                :if-does-not-exist :create                                :element-type (if (equal out-type 'bin) '(signed-byte 16)                                                  ()))          (read-en-tete input)          (cond ((equal out-type 'bin)                 (while (setf sample (read-byte input nil nil))                   (setf rms (+ rms (expt sample 2))                         n (1+ n))                   (if (= n taille)                     (and (write-byte (- (round (sqrt (/ rms n)))) output)                          (setf rms 0 n 1))))                 (if (> n 1)(write-byte (- (round (sqrt (/ rms n)))) output)))                (t                 (while (setf sample (read-byte input nil nil))                   (setf rms (+ rms (expt sample 2))                         n (1+ n))                   (if (= n taille)                     (and (format output "~a~%" (- (round (sqrt (/ rms n)))))                          (setf rms 0 n 1))))                 (if (> n 1)(format output "~a" (- (round (sqrt (/ rms n)))))))                ))))))           (defunp aiff-crete ((filename-in list ( :value  '() :type-list '(string)))                    (filename-out list ( :value  '() :type-list '(string)))                    (taille integer ( :value 1024))                    (out-type (menu (:menu-box-list (("txt" . txt)( "bin" . bin))))))        nil        "écrit un fichier texte donnant la variation d'amplitude max crête d'un fichier aiff,taille donne la taille de la fenetre pour le calcul de chaque amplitude"  (unless filename-in     (setf filename-in (CCL:choose-file-dialog :button-string "snd")))  (unless filename-out     (setf filename-out (CCL:choose-new-file-dialog :button-string "save")))  (when  (and filename-in filename-out)    (let ((L ()) sample (n 1))      (with-open-file (input filename-in                             :element-type '(signed-byte 16))        (with-open-file (output filename-out                                :direction :output :if-exists :rename-and-delete                                :if-does-not-exist :create                                :element-type (if (equal out-type 'bin) '(signed-byte 16)                                                  ()))          (read-en-tete input)          (cond ((equal out-type 'bin)                 (while (setf sample (read-byte input nil nil))                   (push (abs sample) L)                   (setf n (1+ n))                   (if (= n taille)                     (and (write-byte (- (apply #'max L)) output)                          (setf n 1 L ()))))                 (if (> n 1)(write-byte (- (apply #'max L)) output)))                (t                 (while (setf sample (read-byte input nil nil))                   (push (abs sample) L)                   (setf n (1+ n))                   (if (= n taille)                     (and                       (format output "~a~%" (- (apply #'max L)))                      (setf n 1 L ()))))                 (if (> n 1)(format output "~a~%" (- (apply #'max L))))                 )))))));*******************************************************************************(defun read-en-tete (input)  "provisoire en attendant la norme aiff"  (repeat *tailleentete* (read-byte input))  );(aiff-rms nil nil 1024 'txt);(aiff-crete nil "170:Dossier Bureau:en cours:cret25" 1024);(aiff-rms nil "170:Dossier Bureau:en cours:rmsline" 1)(defunp read-envsnd ((filename-in list ( :value  '() :type-list '(string))))list"lit un fichier binaire d'entiers 16 bytes et donne la liste correspondante"  (unless filename-in     (setf filename-in (CCL:choose-file-dialog :button-string "snd")))(let ((L ()) rms)    (with-open-file (input filename-in                           :element-type '(signed-byte 16))      (while (setf rms (read-byte input nil nil))        (push (- rms) L)))    (reverse L)))(defunp print-envsnd ((filename-in list ( :value  '() :type-list '(string))))list"print un fichier binaire d'entiers 16 bytes"  (unless filename-in     (setf filename-in (CCL:choose-file-dialog :button-string "snd")))    (with-open-file (input filename-in                           :element-type '(signed-byte 16))      (while (print (read-byte input nil nil))        ())));(read-envsnd "170:Dossier Bureau:en cours:rmsline");(print-envsnd (choose-file-dialog));(read-envsnd (choose-file-dialog));****************** réalisation d'un compresseur pour traduction 16->8 bits ********;1- création d'un fichier rms du son à compresser;2- lecture du son et scaling des échantillons sur les valeurs rms interpolées(defun auto-scale-sample (sample rms power &optional max)  "si power = 1 tous les rms vont être égaux à maxsi power entre 0 et 1 on remonte les niveaux faibles"  (if (zerop rms) 0      (round (* sample  (expt (/ (if max max 32767) rms) power)))));(auto-scale-sample 4587 4587 .5 10000)(defun compress-auto1 (sndin rmsin sndout power taille)  "version simplifiée, non interpolée"  (let (rms)    (with-open-file (input sndin                           :direction :input :element-type '(signed-byte 16))      (with-open-file (rms-in rmsin                              :direction :input :element-type '(signed-byte 16))        (with-open-file (output sndout                                :direction :output :if-exists :rename-and-delete                                :if-does-not-exist :create                                :element-type '(signed-byte 16))          (read-write-en-tete input output)             (while (setf rms (read-byte rms-in nil nil))            (repeat taille              (write-byte (auto-scale-sample (print (read-byte input)) (- rms) power 10000)                           output)))))))  (set-mac-file-type sndout "AIFF"))(defun compress-auto2 (sndin rmsin sndout power taille)  "version interpolée sur les valeurs de rms"  (let (rms last-rms sample)    (with-open-file (input sndin                           :direction :input :element-type '(signed-byte 16))      (with-open-file (rms-in rmsin                              :direction :input :element-type '(signed-byte 16))        (with-open-file (output sndout                                :direction :output :if-exists :rename-and-delete                                :if-does-not-exist :create                                :element-type '(signed-byte 16))          (read-write-en-tete input output)                                 ;***** sur une demi fenetre on scale sur rms1          ;***** ensuite on interpole rmslast sur rms (nouveau)           ;         (round (/ (+ (* n rms)(* (- taille n) last-rms)) taille))          ;***** à la fin on scale sur rms          (setf rms (read-byte rms-in nil nil))          (setf last-rms rms)          (repeat (round (/ taille 2))            (write-byte (auto-scale-sample                          (read-byte input)                          (- rms)                          power 1000)                        output))                    (while (setf rms (read-byte rms-in nil nil))            (dotimes (n taille (setf last-rms rms))              (write-byte (auto-scale-sample                            (read-byte input)                           (- (round (/                                       (+ (* n rms)                                         (* (- taille n) last-rms))                                       taille)))                           power 1000)                          output)))                    (while (setf sample (read-byte input))            (write-byte (auto-scale-sample                          sample                          (- last-rms)                          power 1000)                        output))                    ))))  (set-mac-file-type sndout "AIFF"))#|(compress-auto1 (choose-file-dialog) "170:Dossier Bureau:en cours:rmsline""170:Dossier Bureau:en cours:lineaiff3".91)(compress-auto2 (choose-file-dialog) "170:Dossier Bureau:en cours:rmsline""170:Dossier Bureau:en cours:lineaiff25".51)(compress-auto2 (choose-file-dialog)"170:Dossier Bureau:en cours:rms25""170:Dossier Bureau:en cours:aplmarcomp25".51024)(auto-scale-sample 327 327 .5 10000)(set-mac-file-type (choose-file-dialog) "AIFF")|#(defun read-write-en-tete (input output)  "provisoire en attendant la norme aiff"     (repeat *tailleentete* (write-byte (read-byte input) output)))    (defunp rd-aiff-rms ((nf list ( :value  '() :type-list '(string)))                      (taille integer ( :value 1024)))        list         "donne la variation d'amplitude rms d'un fichier aiff mono,taille donne la taille de la fenetre pour le calcul de chaque amplitude"  (unless nf (setf nf (CCL:choose-file-dialog :button-string "snd file"))) (let ((wnf (concatenate 'string (mac-namestring nf) "temp")) L)     (aiff-rms nf  wnf taille "bin")    (setf L (read-envsnd wnf))    (delete-file wnf) L))(defunp rd-aiff-crete ((nf list ( :value  '() :type-list '(string)))                      (taille integer ( :value 1024)))        list         "donne la variation d'amplitude max crête d'un fichier aiff mono,taille donne la taille de la fenetre pour le calcul de chaque amplitude"   (unless nf (setf nf (CCL:choose-file-dialog :button-string "snd file"))) (let ((wnf (concatenate 'string (mac-namestring nf) "temp")) L)    (aiff-crete nf  wnf taille "bin")    (setf L (read-envsnd wnf))    (delete-file wnf) L));***********************************************************************************(ccl::export '(chge-col));********* menus **********************************;;(defparameter *snd-util*  (new-menu "snd-util"));;(pw::add-menu-items *utilcsnd* *snd-util*);;(load-once "PW-LIB:snd-comp;snd-ptr-comp")(add-menu-items *utilcsnd* (pw::new-leafmenu "-" ()))(PW-addmenu *utilcsnd*  '(rd-aiff-rms rd-aiff-crete));; mapping module names and help files if names differ(pw::push-tutorial-file '((rd-aiff-rms env-demo)(rd-aiff-crete env-demo)))