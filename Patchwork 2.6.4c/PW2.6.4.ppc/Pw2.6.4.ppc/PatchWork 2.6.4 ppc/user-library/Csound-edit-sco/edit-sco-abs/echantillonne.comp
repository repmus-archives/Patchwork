(in-package :pw)(progn (setf (fdefinition 'user-comp-abstr::|echantillonne|) (eval (list 'function (list 'lambda '(common-lisp-user::bpf-ob0 common-lisp-user::echan1 common-lisp-user::xinit2 common-lisp-user::xend3 common-lisp-user::xfact4 common-lisp-user::ndec5) (list 'g-round (list 'g* (list 'let '(common-lisp-user::|#:\|*enum-value*257\||) (list 'mapcar (list 'function (list 'lambda '(common-lisp-user::|#:\|*local-val*258\||) '(setf common-lisp-user::|#:\|*enum-value*257\|| common-lisp-user::|#:\|*local-val*258\||) (list 'transfer 'common-lisp-user::bpf-ob0 'common-lisp-user::|#:\|*enum-value*257\||))) (list 'arithm-ser 'common-lisp-user::xinit2 (list 'g/ (list 'g- 'common-lisp-user::xend3 'common-lisp-user::xinit2) (list 'g- 'common-lisp-user::echan1 ''1)) 'common-lisp-user::xend3))) 'common-lisp-user::xfact4) 'common-lisp-user::ndec5))))) (setf (get 'user-comp-abstr::|echantillonne| '*type-intypes*) '((&required (common-lisp-user::bpf-ob0 list (:view-size 917540 :doc-string "lst" :value 'nil :dialog-item-text "(1 2)" :type-list (bpf list))) (common-lisp-user::echan1 epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list))) (common-lisp-user::xinit2 epw::fix/float (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fix/fl" :type-list (fixnum float))) (common-lisp-user::xend3 epw::fix/float (:view-size 917540 :value 100 :min-val -9999 :max-val 999999 :doc-string "fix/fl" :type-list (fixnum float))) (common-lisp-user::xfact4 epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list))) (common-lisp-user::ndec5 epw::fix (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fix/fl" :type-list (fixnum float)))) (&optional) (&rest))) (setf (get 'user-comp-abstr::|echantillonne| '*type-outtype*) 'nil) (let ((box (make-pw-standard-box 'c-patch 'user-comp-abstr::|echantillonne|))) (set-view-position box 15 15) (add-patch-box *active-patch-window* box)))