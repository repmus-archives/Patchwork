(in-package :pw)(progn (setf (fdefinition 'user-comp-abstr::|echantmax|) (eval (list 'function (list 'lambda '(common-lisp-user::bpf-ob0 common-lisp-user::echant1 common-lisp-user::xinit2 common-lisp-user::sxend3 common-lisp-user::max4 common-lisp-user::decimals5) (list 'g-round (list 'g-scaling/max (list 'let '(common-lisp-user::|#:\|*enum-value*332\||) (list 'mapcar (list 'function (list 'lambda '(common-lisp-user::|#:\|*local-val*333\||) '(setf common-lisp-user::|#:\|*enum-value*332\|| common-lisp-user::|#:\|*local-val*333\||) (list 'transfer 'common-lisp-user::bpf-ob0 'common-lisp-user::|#:\|*enum-value*332\||))) (list 'arithm-ser 'common-lisp-user::xinit2 (list 'g/ (list 'g- 'common-lisp-user::sxend3 'common-lisp-user::xinit2) (list 'g- 'common-lisp-user::echant1 ''1)) 'common-lisp-user::sxend3))) 'common-lisp-user::max4) 'common-lisp-user::decimals5))))) (setf (get 'user-comp-abstr::|echantmax| '*type-intypes*) '((&required (common-lisp-user::bpf-ob0 list (:view-size 917540 :doc-string "lst" :value 'nil :dialog-item-text "(1 2)" :type-list (bpf list))) (common-lisp-user::echant1 epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list))) (common-lisp-user::xinit2 epw::fix/float (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fix/fl" :type-list (fixnum float))) (common-lisp-user::sxend3 epw::fix/float (:view-size 917540 :value 100 :min-val -9999 :max-val 999999 :doc-string "fix/fl" :type-list (fixnum float))) (common-lisp-user::max4 epw::midics? (:view-size 917540 :value 1 :min-val 0 :max-val 12700 :doc-string "midic" :type-list (fixnum list))) (common-lisp-user::decimals5 epw::fix (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fix/fl" :type-list (fixnum float)))) (&optional) (&rest))) (setf (get 'user-comp-abstr::|echantmax| '*type-outtype*) 'nil) (let ((box (make-pw-standard-box 'c-patch 'user-comp-abstr::|echantmax|))) (set-view-position box 15 15) (add-patch-box *active-patch-window* box)))