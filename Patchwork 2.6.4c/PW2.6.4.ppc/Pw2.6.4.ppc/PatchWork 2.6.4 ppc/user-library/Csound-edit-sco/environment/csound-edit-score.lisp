;=====================================================;;                CSOUND;;======================================================;;                                      by  Mikhail MALT   1992;                                                             IRCAM;;(in-package "CS-E")(ccl::export '(table instrument0 instrument1 paramXY pargen9 pargen03 pargen15 editsco))(pw::defunp table  ( (table fix>0) (ttab fix/float) (points fix>0) (gen  fix/float) (pargen list) ) list  "  génère des paramètres pour une table  Csound. <table> numéro de  table   <ttab>  temps d'attaque  <table>   <points> nombre de points de  <table>   <gen>  numéro de la routine gen   <pargen> paramètres de <gen>  "    (list (append               (list 'f table  ttab  points gen  )               pargen)))(pw::defunp instrument0 ( (instr fix>0) (notes fix>0) (tmpsatt  numbers?)                            (durée numbers?)  &rest (others numbers?)) numbers? " Génère un score  csound pour être imprimé à partir de la boite <<edistsco>> , sans le <e> de end.      <notes> nombre de notes   <instr> instrument   <tmpsatt> temps d'attaque de chaque note   <durée> durée de chaque note   <others> paramètres suplementaires (p4, p5, etc...)"  (let ( (resform) (auxform2) )    (dotimes (n notes resform)                                           (setf auxform2 nil)                          (dotimes ( z  (length others) auxform2)                            (push    (if (atom (nth z others))  (nth z others)  (nth n (nth z others)))  auxform2))                                                    (push (append                                   (list                                  'i                                  (if (atom instr) instr (nth n instr))                                  (if (atom tmpsatt) tmpsatt (nth n tmpsatt))                                  (if (atom durée) durée (nth n durée)))                                  (reverse auxform2))                                resform))                     (reverse resform)))(pw::defunp instrument1 ( (instr fix>0) (notes fix>0) (tmpsatt  numbers?)                            (durée numbers?) (p4 numbers?) (p5 numbers?)  (others list)) numbers?" Génère un score  csound pour être imprimé à partir de la boite <<edistsco>> .      <notes> nombre de notes   <instr> instrument   <tmpsatt> temps d'attaque de chaque note   <durée> durée de chaque note    <p4> fréquence de chaque note   <p5> amplitude de chaque note   <others> paramètres suplementaires (p6, p7, etc...) fournis tous dans une seule liste    OBS:  <others> peut être soit une liste simple soit une liste de listes.    Ce module est spécialement important quand on a un nombre important    de paramètres à gérer."(let ( (resform) (auxform2) )                (dotimes (n notes resform)                                           (setf auxform2 nil)                 (if (atom (nth n others))  (push     (nth n others)  auxform2)                          (dotimes ( z  (length (nth n others)) auxform2)                            (push    (nth z (nth n others))  auxform2)))                                                    (push (append                                   (list                                  'i                                  (if (atom instr) instr (nth n instr))                                  (if (atom tmpsatt) tmpsatt (nth n tmpsatt))                                  (if (atom durée) durée (nth n durée))                                  (if (atom p4) p4 (nth n p4))                                 (if (atom p5) p5 (nth n p5)))                                  (reverse auxform2))                                resform))                     (reverse resform)))(pw::defunp paramXY ((Xlist  list (:value '(0 5))) (Ylist  list)) list"Formate deux listes: Xlist - liste des ordonnées et  Ylist - liste des abscisses en parametres pour la construction de tables en Csound"(let ((lstxy (list Xlist Ylist ))(auxlist) (x) (y))  (setf x (pw::x->dx (first lstxy)))  (setf y (second lstxy))  (dotimes (z (length x))    (push (nth z y) auxlist)    (push (nth z x) auxlist))  (push (nth (- (length y) 1) y) auxlist)  (reverse auxlist)))(pw::defunp pargen9 ((str numbers?) (pn numbers?) (phs numbers?) (Npart fix>0) )numbers?"Construction de la liste de paramètres pour Gen routine9, où Npart est le nombre de partiels choisi "(let ((res))  (dotimes (n Npart)    (push (if (atom pn) pn (nth n pn)) res)    (push (if (atom str) str (nth n str)) res)    (push (if (atom phs) phs (nth n phs)) res))  (reverse res)))(pw::defunp pargen03 ((xmin fix/float) (xmax fix/float) &rest (donnees numbers?) ) numbers?"formatage de paramètres pour la Gen03, où les arg sont les coefficients du polynôme"(pw::flat (list  xmin  xmax donnees)))(pw::defunp  pargen15 ((xint  fix/float) (xamp fix/float)  (Ho list) (Phs list)) numbers?"formatage de paramètres pour la Gen15, où la liste Ho est une liste d'intensités et la liste Phs une liste de phases"(pw::flat (append (list xint xamp)                  (pw::mat-trans  (list  Ho  Phs)))))(pw::defunp editsco  ((filename list ( :value  '() :type-list '(string))) &rest (donnees numbers?)  ) nil            "Cette boite rassemble les tables et notes pour les imprimer dans un fichier <file.sco>"  (when donnees    (setf donnees (pw::flat-once (mapcar #'flat-max-1 donnees)))    (unless filename       (setf filename (CCL:choose-new-file-dialog :directory (directoryp *lastcsdfile*) :button-string "file" :prompt "Save csound")))    (when  filename      (setf *lastcsdfile* filename)      (format t "ecriture en cours du fichier ~a ~%" *lastcsdfile*)      (with-open-file (fd filename                          :direction :output :if-exists :overwrite  :if-does-not-exist :create)     (let ((glou nil))       (dotimes (n (length donnees))          (dotimes (j (length (nth n donnees)))          (setf glou (print-comment (nth j (nth n donnees)) fd glou))            (printscoseq  (nth j (nth n donnees)) fd))          (format fd "~%")))        (format fd "e")        " - - - - - > mission accomplie, chef ! "))))#|(pw::defunp editsco  (  &rest (donnees numbers?)  ) nil            "Cette boite rassemble les tables et notes pour les imprimer dans un fichier <file.sco>"  (let (fichier)     (setf donnees (pw::flat-once donnees))    (setq fichier (ccl:choose-new-file-dialog  :directory "file.sco" :prompt "Save csound"))    (when fichier      (with-open-file  (fd fichier                           :direction :output :if-exists :overwrite                            :if-does-not-exist :create)        (dotimes (n (length donnees))          (dotimes (j (length (nth n donnees)))            (format fd "~D "(nth j (nth n donnees))))          (format fd "~%"))        (format fd "e~%")))))|#(defun flat-max-1 (l)  (while (listp (caar l))    (setf l  (pw::flat-once l))) l)