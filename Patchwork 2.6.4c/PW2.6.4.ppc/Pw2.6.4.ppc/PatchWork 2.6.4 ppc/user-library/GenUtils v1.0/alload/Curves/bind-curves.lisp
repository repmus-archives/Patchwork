;===============================; NEW FILE : BIND CURVES TOOLS       (HPST 3/2/95 IRCAM);===============================#|    Tools attempting a format for 'bounded' transitions between 2 points,    a point being defined as a xy-coordinate pair.   The initial idea was to split 2 points into 6 other ones, in the following manner:   p1 = point a origine  (source point)   p7 = point at arrival (target point)    p4 = mid point offset by <xoff>,<yoff> (in float-procentage)   p2 = departure prolongation point, controlled by <width>,<slope> (in float-procentage)   p3 = middle anticipation point, (idem)   p5 = middle prolongation point, (idem)   p6 = arrival anticipation point, (idem)   note that if <xoff>,<yoff> both equals zero only beg,end point will be returned   or if <width>,<slope> equals zero departure,anticipation points will be skipped.   meant to feed some of the matrix spline functions, like BSPLINE or CATMULL.   Some macros were made for easy calculation of slow/fast fades in/out,   using 2-points splines as BEZIER and HERMITE, controlled by <xoff> & <yoff> only. |#;========================; DEFINE ENVIRONMENT;========================   (in-package :genutils);========================; SOME POINTS FUNCTIONS;========================(DEFUN IPOINT (p1 p2 px py)  "interplates <p1> and <p2> (any range) by px/py (unit range)"   (list      (unit px 0 1 (first p1) (first p2))      (unit py 0 1 (second p1) (second p2))));===============================; TRANSITION BINDING TOOLS     ;===============================;functions with a general slow/fast beg/end tendency(DEFUNP BIND-BEZIER  ((p1   list (:value '(100 100)))                       (p2   list (:value '(200 200)))                       (xoff fix/float (:value  0.5))                       (yoff fix/float (:value -0.5)) ) all-types     "make a BEZIER function with easy input of control-points.  <p1> is a xy-coordinate of origine, and <p2> that of the target.  <xoff> and <yoff> describes a xy-point relative to a linear transition   between <p1> and <p2> towards which the curve will be attracted.   outputs an object containing <xlist> and <ylist>"    (if   (= (first p1) (first p2))    ;IF-EQUAL-ERROR        (error "x's must be unequal!")                (let* ( (xlist (list (first p1) (first p2)))                (ylist (list (second p1) (second p2)))                (plist (append (ipoint p1 p2 xoff yoff)                               (ipoint p2 p1 xoff yoff))) )                          (make-bezier-class xlist ylist plist))));(bind-bezier '(100 100) '(200 200) 0.1 0.1);(do-any '((100 100) (400 400)) #'bind-bezier '(200 200) 0.1 0.1)(DEFUNP BIND-HERMITE ((p1   list (:value '(100 100)))                       (p2   list (:value '(200 200)))                       (xoff fix/float (:value  0.5))                       (yoff fix/float (:value -0.5)) ) all-types     "make a HERMITE function with easy input of control-points.  <p1> is a xy-coordinate of origine, and <p2> that of the target.  <xoff> and <yoff> describes a xy-point relative to a linear transition   between <p1> and <p2> towards which the curve will be attracted.   outputs an object containing only <ylist>"    (if   (= (first p1) (first p2))    ;IF-EQUAL-ERROR        (error "x's must be unequal!")                (let  ( (xlist (list (first p1) (first p2)))                (ylist (list (second p1) (second p2)))                (plist (ipoint p1 p2 (* -4 xoff) (* 4 yoff))) )          (make-hermite-class xlist ylist plist) )));(bind-bezier '(100 100) '(200 200) 0.5 -0.5);========================; MATRIX BINDING TOOLS;========================;functions with more control points to be given to a matrix-curve(DEFUNP BIND-2POINTS ((p1   list (:value '(100 100)))                       (p2   list (:value '(200 200)))                       (xoff fix/float (:value  0.1))                       (yoff fix/float (:value  0.1)) ) all-types     "from a fictive mid-point between 2 coordinate-pairs <p1> and <p2>,    calculate 2 new points as relative offset <xoff> and <yoff>.   the mid-point is in the exact middle between <p1> and <p2>.   the function returns a list of 4 coordinate pairs,    and is used to insert extra points into a transition."  (mat-trans      (if (and (= 0 xoff) (= 0 yoff))          (list p1 p2)          (let ((midp (ipoint p1 p2 0.5 0.5)))            (list p1 (ipoint p1 midp xoff yoff)                     (ipoint p2 midp xoff yoff)                  p2)))));(bind-2points '(100 100) '(200 500) 0.1 0.1)(DEFUNP BIND-4POINTS ((p1    list (:value '(100 100)))                       (p2    list (:value '(200 200)))                       (xoff  fix/float (:value  0.5))                       (yoff  fix/float (:value  0.5))                       (width fix/float (:value  0.1))                      (slope fix/float (:value  0.1))) all-types     "from 2 coordinate-pairs <p1> and <p2>, calculate 4 new points   with <xoff> and <yoff> describing a relative mid-point.   between <p1> and this mid-point 2 new points are calculated   from <width> and <slope> tells, likewise from mid-point to <p2>.   the function returns a list of 6 coordinate-pairs,   and is used to insert extra points into a transition."  (mat-trans   (if (and (= 0 xoff) (= 0 yoff))       (list p1 p2)       (let ((midp (ipoint p1 p2 xoff yoff)))         (if (and (= 0 width) (= 0 slope))           (list p1 midp p2)           (list p1 (ipoint p1 midp width slope)                    (ipoint midp p1 width slope)                    (ipoint midp p2 width slope)                    (ipoint p2 midp width slope)                 p2))))));(bind-4points '(100 100) '(200 500) 0.4 0.8 0.1 0.25);================; END FILE     ;================