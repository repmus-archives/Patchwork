;=============================; NEW FILE : WRAP TO PW              (HPST 16/6/94 Montmatre);=============================#| This file is mostly just a shell around the CLASS version,   wrapping it to nice and friendly modules! Each formular has   got it own make-word, that actually compiles the class as an    anonymous function. To be able to use the different methods   when evaluating the function with FUNCALL, a index system has   been made, that via a key chooses the rigth method to use.   Meant only for internal regulation! All DEFUNP things are menu-ready. |#  ;================; ENVIRONMENT;================  (in-package :genutils);==========================; INDEX-MACRO to METHODS      OUT WHEN EVERYTHING WORKS;==========================(DEFUN MAKE-FUNCTION-KEYS  (cube key &optional par)        (case key          (self   (eval cube))          (xs     (give-x-points cube))          (ys     (give-y-points cube))          (ps     (give-p-points cube))          (curve  (trans-curve  cube par))          (sample (sample-curve cube par))))(DEFUN MAKE-LAMBDA-CUBE (cube)         (eval `(function (lambda (key &optional par)                             (make-function-keys ,cube key par)))));==================; MAKE FUNCTIONS;==================(DEFUNP MAKE-BEZIER ((xlist fix/fl/list (:value 10))                     (ylist list (:value '(100 200)))                       &optional                      (x-slope fix/fl/list (:value 15))                      (y-slope fix/fl/list (:value 150))) all-types  "make a BEZIER function to be used by time-, grid- or auto-sample.   input <ylist> must be of 2 items, describing start and end value   in a transition. if <xlist> is given it should also have 2 items.   Optionally one can specify upto 2 control points, given as seperate   lists of <x-slope> and <y-slope> towards which the curve is attracted."  (make-bezier-class (make-tlist xlist ylist)                      (make-vlist ylist)                      (make-plist x-slope y-slope)) )(DEFUNP MAKE-HERMITE ((xlist fix/fl/list (:value 10))                      (ylist list (:value '(100 200)))                      &optional                      (beg-slope fix/float (:value -100))                      (end-slope fix/float (:value -100))) all-types  "make a HERMITE function to be used by time-, grid- or auto-sample.   input <ylist> must be of 2 items, describing start and end value   in a transition. if <xlist> is given it should also have 2 items.   Optionally one can specify 2 slopes, given as seperate numbers of   <beg-slope> and <end-slope> that tells how the curve depart/arrive."  (make-hermite-class (make-tlist xlist ylist)                       (make-vlist ylist)                      (make-plist beg-slope end-slope)) )(DEFUNP MAKE-SPLINE ((xlist fix/fl/list (:value 10))                      (ylist list (:value '(100 200)))) all-types  "make a SPLINE function to be used by time-, grid- or auto-sample.   if input is just a <ylist> then <xlist> is an interval (as with bpf),   otherwise <xlist> and a <ylist> should be of equal lengths."    (make-spline-class (make-tlist xlist ylist)                        (make-vlist ylist)) )(DEFUNP MAKE-BLEND ((xlist fix/fl/list (:value 10))                     (ylist list (:value '(100 200)))                     (plist list (:value '(2 2)))) all-types  "make a BLEND function to be used by time-, grid- or auto-sample   if input is just a <ylist> then <xlist> is an interval (as with bpf),   otherwise <xlist> and a <ylist> should be of equal lengths.   for the use of <plist> please refer to the tutorials."  (make-blend-class (make-tlist xlist ylist)                     (make-vlist ylist) plist) )(DEFUNP MAKE-MATRIX ((xlist fix/fl/list (:value 10))                      (ylist list (:value '(100 200)))                      (matrix menu (:menu-box-list (("hermite" . hermite)                                                   ("parabol" . parabol)                                                   ("bspline" . bspline)                                                   ("catmull" . catmull)                                                   ("tension" . tension))                                   :type-list (all-types)))                     &optional                     (tension fix/float (:value 1.0)) ) all-types  "make a MATRIX function to be used by time-, grid- or auto-sample.   if input is just a <ylist> then <xlist> is an interval (as with bpf),   otherwise <xlist> and a <ylist> should be of equal lengths.   for the use of menu <matrix> please refer to the tutorials."  (make-matrix-class (make-tlist xlist ylist)                      (make-vlist ylist)                      (setup-matrix matrix tension)) );==================; MAIN FUNCTIONS     KEEP FOR COMPABATEBILLITY;==================(DEFUNP SNIP-CURVE ((curve  symbol  (:value "()"))                     (times  fix/fl/list (:value 0))) all-types   "sample an anonymous curve <function> in the x-range at <times>,  <times> migth be a number or a list of any depth and order.   sampling outside of the x-range forces output to end-points."  (trans-curve curve times)) ; COULD IT BE GENERALISED?(DEFUNP GRAP-CURVE ((curve  symbol  (:value "()"))                     (grids  fix/fl/list (:value 10 :min-val 1))) all-types  "sample an anonymous curve <function> evenly over the whole x-range in <grids> steps,  <grids> migth be a number or a list of any depth and order, reflected in the output."  (epw::deep-mapcar/1 #'(lambda(grid)                           (sample-curve curve (abs grid))) grids))(DEFUNP GET-CURVE ((curves symbol (:value "()"))                   (points menu   (:menu-box-list (("xlist" . give-x-points)                                                   ("ylist" . give-y-points)                                                   ("plist" . give-p-points))                                   :type-list (no-connection)))) all-types  "get points according to menu from curve"  (epw::deep-mapcar/1 #'(lambda(curve)                           (funcall points curve)) curves));===============; END FILE;===============