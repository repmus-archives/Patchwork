;============================; NEW FILE : SERACHING TOOLS                  (HPST 28/2/95 IRCAM);============================  (in-package :genutils);============================; BASIC PREV,CURR,NEXT TOOLS;============================(DEFUN PREV-ID (id list)  (nth (min (1- (length list)) (max 0 (1- id))) list))(DEFUN CURR-ID (id list)  (nth (min (1- (length list)) (max 0 id)) list))(DEFUN NEXT-ID (id list)  (nth (min (1- (length list)) (max 0 (1+ id))) list));(prev-id  1 '(0 50 100));(curr-id  1 '(0 50 100));(next-id  1 '(0 50 100));===========================; SAFE SEARCH LIST TOOLS;===========================(DEFUN SEARCH-LOW-LIST (x list)  "safety function to find id of item in list closest to x."  (loop for i from 0 to (1- (length list))    until (< x (nth i list))    finally (return (- i (signum i)))))(DEFUN SEARCH-HIGH-LIST (x list)  "safety function to clip x if outside min/max of list."  (clipto x (nth 0 list)              (nth (- (length list) 2) list)));==========================; BASIC POSITION FUNCTIONS;==========================(DEFUN ABS< (v1 v2)  (<= (abs v1) (abs v2)))(DEFUN ABS> (v1 v2)  (>= (abs v1) (abs v2)))  (DEFUN CLOSEST (val match)  (+ val (first (sort (g- match val) 'abs<))))          (DEFUN X-CLOSEST (list match)  (mapcar #'closest list (cirlist match)))  (DEFUN CLOSEST-ID (val match)  (position (closest val match) match :test '=))(DEFUN X-POSITION (list1 list2)  (mapcar #'closest-id list1 (cirlist list2)));========================; BASIC SEARCH FUNCTIONS;========================(DEFUN SEARCH-CURRENT (val list &optional (tol 0))  "function that search closest possible id of value matching"(let ((result (mapcan #'(lambda (x)               (if (<= (- x tol) val (+ x tol)) (list x))) list)))   (if (not result) val (position (car result) list))));(pw::search-current 51 '(0 50 100) 10)(DEFUN SEARCH-LOWER (val list)  "function that search lowest possible id of value matching"(let ((result (search (list val) list :test '<=)))   (if (not result) 0 result)));(search '(51) '(0 50 100) :test '>);(search-lower 51 '(0 50 100))(DEFUN SEARCH-HIGHER (val list) "function that search highest possible id of value matching" (let ((result (search (list val) list :test '>=)))   (if (not result) (1- (length list)) result)));(search-higher 49 '(0 50 100));=============================; END FILE : SEARCHING TOOLS;=============================