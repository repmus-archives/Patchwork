(in-package :pw)(make-win 'c-pw-window "bind-4points" 3473429 27656559 (list (sbox 'c-patch-multi-function 'multi-bpf "multi-bpf" nil 19005578 (list 10 "100" "Untitled") 7077972 '(((6553700 6881405 9502845 10158255 12779695 13107400) nil :bpf) ((6553700 6881405 9502845 10158255 12779695 13107400)))) (sbox 'c-pw-resize-x 'first "first" nil 17367114 (list "(1 2)") 2228270) (make-instance 'c-pw-resize-x :view-position 16318704 :view-size 2228270 :active-mode nil :pw-function 'second :type-list 'nil :view-subviews (list (make-instance 'c-ttybox :view-position 327685 :view-size 917540 :dialog-item-text "0" :doc-string "list" :type-list 'nil))) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 589834 (list "As the other BIND modules BIND-4POINTS is working on points or xy-coordinates. like BIND-BEZIER it works is on both x and y, and it returns always a double list. One specifies a control point (optionally a second one) in a transition between p1 and p2, by giving xoff & yoff as RELATIVE values. The idea is to control departure/arrival around main points, and in addition a around a mid-point. firstly the mid-point is set by xoff & yoff, nextly width tells expansion of p1 towards mid, mid is split upwards & downwards, & p2 towards mid; in total 4 new points. finally slope tells devation from the new (in fact interpolated) points. result can be jumpy, and could be passed on to smoothing function (like bspline) for pleasant curves.") 10944851) (sbox 'c-patch 'genutils::bind-4points "bind-4points" nil 12583052 (list "(100 100)" "(200 200)" 0.5 0.5 0.5 0.1))) (list (list 0 0 1) (list 0 1 2) (list 1 0 4) (list 2 0 4)) t)