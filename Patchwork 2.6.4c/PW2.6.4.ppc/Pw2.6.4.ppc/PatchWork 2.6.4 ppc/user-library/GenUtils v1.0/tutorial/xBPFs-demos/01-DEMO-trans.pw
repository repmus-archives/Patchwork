(in-package :pw)(make-win 'c-pw-window "01-DEMO-trans" 3145751 27329187 (list (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 590132 (list "TRANS-BPF is a module to make <bpf-in> use <bpf-map> as transfer-function. Here the idea is to resample a bpf with resolution many points between each x-point. so that each x is kept even if they are uneven. For that reason they are put into a bpf with linear time, so that it can be sampled at regular intervals. All original x's are located at whole numbered positions. The abstraction 'auto-estimate' at right calculates new sample-points to resample x-points, that are then used to resample original bpf. The module stach at left and the one at right are identical in results, the right-most showing the flow of what's going on in TRANS-BPF.") 9372001) (abst 'c-abstract-m 'user-abstraction::auto-estimate "auto-estimate" nil 10486164 (list "nil" 4) '((common-lisp-user::bpf object (:view-size 917540 :doc-string "obj" :value 'nil :dialog-item-text "()" :type-list nil)) (common-lisp-user::resolution epw::numbers? (:view-size 917540 :value 4 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list)))) 'nil (make-win 'c-pw-window "auto-estimate" 14287030 19595625 (list (sbox 'c-abstract-in 'absin "absin" nil 720922 (list "bpf" 1)) (sbox 'c-abstract-out 'absout "absout" nil 15990992 (list "auto-estimate")) (sbox 'c-patch 'arithm-ser "arithm-ser" nil 11993252 (list 0 1 10)) (sbox 'c-pw-resize-x 'g-min "g-min" nil 10354772 (list "(1 2)") 2228270) (sbox 'c-pw-resize-x 'g-max "g-max" nil 11403294 (list "(1 2)") 2228270) (sbox 'c-pw-functional 'g-round "g-round" nil 5111981 (list 0)) (sbox 'c-pw-functional 'apply "apply" nil 7536747 (list "gcd" "(1 2)")) (sbox 'c-abstract-in 'absin "absin" nil 6357250 (list "resolution" 2)) (sbox 'c-patch 'g/ "g/" nil 9175251 (list 1 4)) (sbox 'c-patch 'get-slot "get-slot" nil 3473478 (list "()" "x-points"))) (list (list 1 0 2) (list 2 0 3) (list 2 1 8) (list 2 2 4) (list 3 0 9) (list 4 0 9) (list 5 0 9) (list 6 1 5) (list 8 0 6) (list 8 1 7) (list 9 0 0)) nil)) (sbox 'c-patch 'get-slot "get-slot" nil 2359409 (list "()" "x-points")) (abst 'c-abstract-m 'user-abstraction::auto-estimate "auto-estimate" nil 11731009 (list "nil" 4) '((common-lisp-user::bpf object (:view-size 917540 :doc-string "obj" :value 'nil :dialog-item-text "()" :type-list nil)) (common-lisp-user::resolution epw::numbers? (:view-size 917540 :value 4 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list)))) 'nil (make-win 'c-pw-window "auto-estimate" 14287030 19595625 (list (sbox 'c-abstract-in 'absin "absin" nil 720922 (list "bpf" 1)) (sbox 'c-abstract-out 'absout "absout" nil 15990992 (list "auto-estimate")) (sbox 'c-patch 'arithm-ser "arithm-ser" nil 11993252 (list 0 1 10)) (sbox 'c-pw-resize-x 'g-min "g-min" nil 10354772 (list "(1 2)") 2228270) (sbox 'c-pw-resize-x 'g-max "g-max" nil 11403294 (list "(1 2)") 2228270) (sbox 'c-pw-functional 'g-round "g-round" nil 5111981 (list 0)) (sbox 'c-pw-functional 'apply "apply" nil 7536747 (list "gcd" "(1 2)")) (sbox 'c-abstract-in 'absin "absin" nil 6357250 (list "resolution" 2)) (sbox 'c-patch 'g/ "g/" nil 9175251 (list 1 4)) (sbox 'c-patch 'get-slot "get-slot" nil 3473478 (list "()" "x-points"))) (list (list 1 0 2) (list 2 0 3) (list 2 1 8) (list 2 2 4) (list 3 0 9) (list 4 0 9) (list 5 0 9) (list 6 1 5) (list 8 0 6) (list 8 1 7) (list 9 0 0)) nil)) (sbox 'c-patch 'transfer "transfer" nil 13304165 (list "nil" 0)) (sbox 'c-patch-multi-function 'multi-bpf "multi-bpf" nil 18874631 (list 1 "100" "Untitled") 7077972 '(((0 851972 1703944 2293771 3145743 2686994 2097174 1507354 1048605 2097188 3211307 4325426 5374009 4259904 3014728 1966159 852054 2490458 3670109 4915296 6553700) nil :bpf) ((0 851972 1703944 2293771 3145743 2686994 2097174 1507354 1048605 2097188 3211307 4325426 5374009 4259904 3014728 1966159 852054 2490458 3670109 4915296 6553700)))) (sbox 'c-patch-multi-function 'multi-bpf "multi-bpf" nil 3997717 (list 1 "100" "Untitled") 7077972 '(((0 983041 1900546 3735555 5636100 6553605) nil :bpf) ((0 983041 1900546 3735555 5636100 6553605)))) (sbox 'c-pw-functional 'genutils:trans-bpf "trans-bpf" nil 12320931 (list "()" "()" "(0 1)")) (sbox 'c-patch-multi-function 'multi-bpf "multi-bpf" nil 16187508 (list 1 "100" "Untitled") 7077972 '(((0 0 0 3145743 3145743 3145743 1048605 1048605 1048605 1048605 1048605 5374009 5374009 5374009 852054 852054 852054 852054 852054 6553700 6553700) nil :bpf) ((0 0 0 3145743 3145743 3145743 1048605 1048605 1048605 1048605 1048605 5374009 5374009 5374009 852054 852054 852054 852054 852054 6553700 6553700)))) (sbox 'c-patch-multi-function 'multi-bpf "multi-bpf" nil 2490573 (list 1 "100" "Untitled") 7077972 '(((0 3145743 1048605 5374009 852054 6553700) nil :bpf) ((0 3145743 1048605 5374009 852054 6553700)))) (sbox 'c-patch 'transfer "transfer" nil 15925558 (list "nil" 0))) (list (list 1 0 6) (list 2 0 9) (list 3 0 6) (list 4 0 6) (list 4 1 1) (list 5 0 4) (list 5 1 10) (list 6 1 2) (list 7 0 9) (list 7 1 6) (list 7 2 3) (list 8 1 7) (list 10 0 9) (list 10 1 4)) t)