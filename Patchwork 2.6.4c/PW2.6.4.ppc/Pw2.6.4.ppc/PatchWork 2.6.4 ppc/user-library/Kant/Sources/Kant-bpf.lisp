(in-package "C-PATCH-BOX-KANT")(import '(epw::flat-once ));===============BPF KANT=====================================(defclass C-bpf-kant (pw::C-bpf-view ) ((kant-ob :initform nil :accessor kant-ob)))(in-package :pw)(defmethod view-window-grown ((self C-PATCH-BOX-KANT::C-bpf-kant))  (set-size-view-window-grown self)   (scale-to-fit-in-rect self)  (update-bpf-scroll-bar-settings self)  (event-dispatch)  (view-draw-contents self))(defmethod view-draw-contents ((self C-PATCH-BOX-KANT::C-bpf-kant))  (event-dispatch)  (with-focused-view self     (with-pen-state (:pattern *white-pattern*)      (fill-rect*  (point-h (view-scroll-position self))                    (point-v (view-scroll-position self)) (w self) (h self))))  (let ((*no-line-segments*))    (when (mini-view self)      (setf *no-line-segments*            (display-only-points (view-container (mini-view self)))))    (with-focused-view self      (when (show-bpf-grid-fl self) (view-draw-axis self))      (draw-bpf-function (break-point-function self) self t (h-view-scaler self) (v-view-scaler self)))    (let* ((mn-view (C-PATCH-BOX-KANT::kant-ob self))          (event-list (C-PATCH-BOX-KANT::mk-event-list (C-PATCH-BOX-KANT::entre mn-view) nil nil))          rep)      (mapc #'(lambda (mes)                (setf rep (C-PATCH-BOX-KANT::mk-merge rep mes))) (C-PATCH-BOX-KANT::marcas-archi mn-view))      (mapc #' (lambda (me)                 (draw-line (round (C-PATCH-BOX-KANT::onset (nth me event-list)) (h-view-scaler self))                             (point-v (view-scroll-position self))                            (round (C-PATCH-BOX-KANT::onset (nth me event-list)) (h-view-scaler self))                            (+ (point-v (view-size  self)) (point-v (view-scroll-position self))))) rep))))(defmethod update-bpf-view ((self C-PATCH-BOX-KANT::C-bpf-kant) &optional mini-draw-lock)  (declare (ignore mini-draw-lock))  (view-draw-contents self))(defun make-BPF-edi (bp &optional editor-view-class ed title)  (let* ((win-string title)         (win (make-instance                 'C-BPF-window :window-title win-string :close-box-p nil :window-show nil                :view-position #@(10 40) :view-size #@(250 275)))         (bp-view           (make-instance             (if editor-view-class editor-view-class 'C-bpf-kant)             :view-container win            :view-position #@(2 2) :view-size #@(240 217)             :break-point-function bp             :track-thumb-p t)))    (add-subviews win bp-view)    (setf (BPF-editor-object win) bp-view)    (scale-to-fit-in-rect bp-view)    (setf (pw-win win) ed)    win))(in-package "C-PATCH-BOX-KANT")(defmethod view-mouse-dragged ((self C-bpf-kant) mouse)  (declare (ignore mouse)))(defmethod view-click-event-handler ((self C-bpf-kant) where)  (declare ( ignore where))  (setf pw::*bpf-view-draw-lock* t)  (if (pw::selection? self)    (pw::reset-selection self)    (let ((new-point (view-mouse-position self)))      (setf pw::*last-mouse-point* new-point)      (setf pw::*global-last-mouse-point* (view-mouse-position (view-window self)))        (setf pw::*last-scroll-position* (view-scroll-position self))      ))     (if  (eq 1 (active-menu (kant-ob self)))    (if (option-key-p)      (let* ((x (point-h (view-mouse-position self) ))             (durs (mk-event-list (entre (kant-ob self) ) nil nil))             (lis (mapcar #'(lambda (mes)                              (round mes)) (collecte durs 'onset)))             (lis2 (copy-tree lis))             (i 0) ti)        (when lis           (setf ti (car lis))          (while (and (< ti x) (not (null lis)))            (setf i (+ i 1))            (setf lis (cdr lis))            (if (not (null lis))              (setf ti (car lis))))          (if (< (abs (- (nth (- i 1) lis2) x)) (abs (- (nth i lis2) x)))            (setf i (- i 1)))          (when lis            (setf (nth 0 (marcas-archi  (kant-ob self))) (cons i (nth 0 (marcas-archi  (kant-ob self)))))            (setf (nth 0 (marcas-archi  (kant-ob self))) (sort (nth 0 (marcas-archi  (kant-ob self))) '<))            (setf (nth 0 (marcas-archi  (kant-ob self))) (remove-duplicates (nth 0 (marcas-archi  (kant-ob self)))))            (setf (cambio-marca (kant-ob self)) 11)            (view-draw-contents (kant-ob self))            (when (bpf (kant-ob self))              (view-draw-contents (bpf (kant-ob self))))             (when (bpf-p (kant-ob self))              (view-draw-contents (bpf-p (kant-ob self))))            (when (bpf-v (kant-ob self))              (view-draw-contents (bpf-v (kant-ob self))))            )))      (if (shift-key-p)        (let* ((x (point-h (view-mouse-position self) ))               (durs (mk-event-list (entre (kant-ob self) ) nil nil))               (lis (mapcar #'(lambda (mes)                                (round mes)) (collecte durs 'onset)))               (lis (mapcar #'(lambda (mes)                                (nth mes lis)) (nth 0 (marcas-archi (kant-ob self)))))               (lis2 (copy-tree lis))               (i 0) ti)          (when lis             (setf ti (car lis))            (while (and (< ti x) (not (null lis)))              (setf i (+ i 1))              (setf lis (cdr lis))              (if (not (null lis))                (setf ti (car lis))))            (if (null lis)              (setf i (- i 1)))            (if (not (eq i 0))              (if (< (abs (- (nth (- i 1) lis2) x)) (abs (- (nth i lis2) x)))                (setf i (- i 1))))            (setf (nth 0 (marcas-archi  (kant-ob self))) (delete (nth i (nth 0 (marcas-archi (kant-ob self)))) (nth 0 (marcas-archi  (kant-ob self)))))            (setf (cambio-marca (kant-ob self)) 11)            (view-draw-contents (kant-ob self))            (when (bpf (kant-ob self))              (view-draw-contents (bpf (kant-ob self))))             (when (bpf-p (kant-ob self))              (view-draw-contents (bpf-p (kant-ob self))))            (when (bpf-v (kant-ob self))              (view-draw-contents (bpf-v (kant-ob self))))            ))))))