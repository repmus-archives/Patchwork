;;;;=========================================================;;;;  KANT PATCH-WORK;;;;  Rep. Mus.;;;;  © 1994 IRCAM ;;;;=========================================================(in-package "C-PATCH-BOX-KANT")(defmethod bidon ((self C-MN-view-mod-kant)  lis)  (declare (ignore self  lis))    nil)(defvar *rep-standar* nil)(defmethod standar ((self C-MN-view-mod-kant)  lis)  (let* ((dialog (make-instance 'dialog :window-show nil :view-size #@(420 150)                                 :window-type :double-edge-box                                 :view-position (ccl:make-point 100 200)))         (num-d 0) (num-p 0) (num-v 0)          (ed (make-instance 'pw::editable-text-dialog-item               :dialog-item-text  ""               :view-position (make-point 145 10)               :view-size (make-point 40 16)               :view-font '("monaco" 9 :srcor)))         (ep (make-instance 'pw::editable-text-dialog-item               :dialog-item-text  ""               :view-position (make-point 145 45)               :view-size (make-point 40 16)               :view-font '("monaco" 9 :srcor)))         (ev (make-instance 'pw::editable-text-dialog-item               :dialog-item-text  ""               :view-position (make-point 145 80)               :view-size (make-point 40 16)               :view-font '("monaco" 9 :srcor)))         (bd (make-instance 'pw::editable-text-dialog-item               :dialog-item-text  ""               :view-position (make-point 285 10)               :view-size (make-point 40 16)               :view-font '("monaco" 9 :srcor)))         (bp (make-instance 'pw::editable-text-dialog-item               :dialog-item-text  ""               :view-position (make-point 285 45)               :view-size (make-point 40 16)               :view-font '("monaco" 9 :srcor)))         (bv (make-instance 'pw::editable-text-dialog-item               :dialog-item-text  ""               :view-position (make-point 285 80)               :view-size (make-point 40 16)               :view-font '("monaco" 9 :srcor)))         (ad (make-instance 'pw::editable-text-dialog-item               :dialog-item-text  ""               :view-position (make-point 365 10)               :view-size (make-point 40 16)               :view-font '("monaco" 9 :srcor)))         (ap (make-instance 'pw::editable-text-dialog-item               :dialog-item-text  ""               :view-position (make-point 365 45)               :view-size (make-point 40 16)               :view-font '("monaco" 9 :srcor)))         (av (make-instance 'pw::editable-text-dialog-item               :dialog-item-text  ""               :view-position (make-point 365 80)               :view-size (make-point 40 16)               :view-font '("monaco" 9 :srcor))) )    (setf *rep-standar* nil)    (add-subviews dialog                  (make-dialog-item 'static-text-dialog-item (make-point 10 10) (make-point 60 16) "duration" nil :view-font '("monaco" 9 :srcor))                  (make-dialog-item 'static-text-dialog-item (make-point 10 45) (make-point 60 16) "pitch" nil :view-font '("monaco" 9 :srcor))                  (make-dialog-item 'static-text-dialog-item (make-point 10 80) (make-point 60 16) "velocity" nil :view-font '("monaco" 9 :srcor))                  (make-dialog-item 'static-text-dialog-item (make-point 330 10) (make-point 40 16) "and" nil :view-font '("monaco" 9 :srcor))                  (make-dialog-item 'static-text-dialog-item (make-point 330 45) (make-point 40 16) "and" nil :view-font '("monaco" 9 :srcor))                  (make-dialog-item 'static-text-dialog-item (make-point 330 80) (make-point 40 16) "and" nil :view-font '("monaco" 9 :srcor))                  ed ep ev bd bp bv ad ap av                  (make-instance 'pw::radio-button-dialog-item                    :view-position (make-point 80 10)                    :dialog-item-text "equal"                    :view-font '("monaco" 9 :srcor)                    :dialog-item-action                    #'(lambda(item) (declare (ignore item)) (progn (setf num-d 0) (view-click-event-handler ed 0))))                  (make-instance 'pw::radio-button-dialog-item                    :view-position (make-point 80 45)                    :dialog-item-text "equal"                    :view-font '("monaco" 9 :srcor)                    :radio-button-cluster 1                    :dialog-item-action                    #'(lambda(item) (declare (ignore item)) (progn (setf num-p 0) (view-click-event-handler ep 0))))                  (make-instance 'pw::radio-button-dialog-item                    :view-position (make-point 80 80)                    :dialog-item-text "equal"                    :view-font '("monaco" 9 :srcor)                    :radio-button-cluster 2                    :dialog-item-action                    #'(lambda(item) (declare (ignore item)) (progn (setf num-v 0) (view-click-event-handler ev 0))))                  (make-instance 'pw::radio-button-dialog-item                    :view-position (make-point 200 10)                    :view-font '("monaco" 9 :srcor)                    :dialog-item-text "between"                    :dialog-item-action                    #'(lambda(item) (declare (ignore item)) (progn (setf num-d 1) (view-click-event-handler bd 0))))                  (make-instance 'pw::radio-button-dialog-item                    :view-position (make-point 200 45)                    :radio-button-cluster 1                    :dialog-item-text "between"                    :view-font '("monaco" 9 :srcor)                    :dialog-item-action                    #'(lambda(item) (declare (ignore item)) (progn (setf num-p 1) (view-click-event-handler bp 0))))                  (make-instance 'pw::radio-button-dialog-item                    :view-position (make-point 200 80)                    :radio-button-cluster 2                    :dialog-item-text "between"                    :view-font '("monaco" 9 :srcor)                    :dialog-item-action                    #'(lambda(item) (declare (ignore item)) (progn (setf num-v 1) (view-click-event-handler bv 0))))                  (make-instance 'pw::button-dialog-item                    :default-button ()                    :dialog-item-text "cancel"                    :view-position (make-point 340 120)                    :view-size (make-point 60 25)                    :dialog-item-action                    #'(lambda(item) (declare (ignore item)) (return-from-modal-dialog nil)))                   (make-instance 'pw::button-dialog-item                    :default-button t                    :dialog-item-text "OK"                    :view-position (make-point 250 120)                    :view-size (make-point 60 23)                    :dialog-item-action                    #'(lambda(item) (declare (ignore item)) (fun-standar lis num-d num-p num-v ed ep ev bd bp bv ad ap av))))    (modal-dialog dialog)    *rep-standar*    )) (defun fun-standar ( event-list num1 num2 num3 ed ep ev bd bp bv ad ap av )  (let* ((i 0) rep)    (if (not (and (equal (dialog-item-text ed) "") (equal (dialog-item-text ep) "") (equal (dialog-item-text ev) "") (= num2 0) (= num3 0) (= num1 0)))    (mapc #'(lambda (mes)             (if (and (or (and (= num1 0) (or (equal (dialog-item-text ed) "") (= (dur mes) (read-from-string (dialog-item-text ed)))))                          (and (= num1 1) (and (not (or (equal (dialog-item-text ad) "") (equal (dialog-item-text bd) "")))                                               (<= (dur mes) (read-from-string (dialog-item-text ad))) (>= (dur mes) (read-from-string (dialog-item-text bd))))))                      (or (and (= num2 0) (or (equal (dialog-item-text ep) "") (= (pitch mes) (read-from-string (dialog-item-text ep)))))                          (and (= num2 1) (and (not (or (equal (dialog-item-text ap) "") (equal (dialog-item-text bp) "")))                                               (<= (pitch mes) (read-from-string (dialog-item-text ap))) (>= (pitch mes) (read-from-string (dialog-item-text bp))))))                      (or (and (= num3 0) (or (equal (dialog-item-text ev) "") (= (velocity mes) (read-from-string (dialog-item-text ev)))))                          (and (= num3 1) (and (not (or (equal (dialog-item-text av) "") (equal (dialog-item-text bv) "")))                                               (<= (velocity mes) (read-from-string (dialog-item-text av))) (>= (velocity mes) (read-from-string (dialog-item-text bv)))))))               (setf rep (cons i rep)))             (incf i)) event-list))    (setf *rep-standar* (reverse rep)))  (return-from-modal-dialog ())  )