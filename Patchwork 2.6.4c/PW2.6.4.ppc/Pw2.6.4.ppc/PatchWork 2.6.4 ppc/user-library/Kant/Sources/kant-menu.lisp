;;;;=========================================================;;;;  KANT PATCH-WORK;;;;  Rep. Mus.;;;;  © 1994 IRCAM ;;;;=========================================================(in-package :C-PATCH-BOX-KANT);============MENU KANT====================(defclass C-popUpkant (pw::C-popUpbox ) ((kant-ob :initform nil :accessor kant-ob)  (enable :initform nil :accessor enable)  (num :initform nil :accessor num)))(defmethod make-kant-menu ((self C-MN-view-mod-kant) )(setf (slot-value self '*Kant-popUpMenu1*)      (pw::new-menu        " "       (pw::new-menu "segmentation" )       (pw::new-leafmenu "-" ())       (pw::new-leafmenu "bpf" #'(lambda() (do-bpf pw::*target-action-object* )))       (pw::new-leafmenu "go" #'(lambda() (do-resume-m1 pw::*target-action-object* )))))(setf (slot-value self '*Kant-popUpMenu2*)      (pw::new-menu        " "       (pw::new-menu "segmentation"                      (pw::new-leafmenu "patterns" #'(lambda() (go-pattern pw::*target-action-object* ))))       (pw::new-leafmenu "-" ())       (pw::new-leafmenu "go" #'(lambda() (do-resume-m2 pw::*target-action-object* )))))(setf (slot-value self '*Kant-popUpMenu3*)      (pw::new-menu        " "       (pw::new-leafmenu "Quantify" #'(lambda()(Quanti pw::*target-action-object*)))       (pw::new-leafmenu "-" ())       (pw::new-leafmenu "Tempi" #'(lambda() (fun-tempi pw::*target-action-object*)))       (pw::new-menu "parameters"                      (pw::new-leafmenu "global" #'(lambda()(do-default pw::*target-action-object*)))                     (pw::new-leafmenu "forbid" #'(lambda()(do-forbid pw::*target-action-object*)))                     (pw::new-leafmenu "preci" #'(lambda()(do-preci pw::*target-action-object*)))                     (pw::new-leafmenu "max/" #'(lambda() (do-max pw::*target-action-object* )))))))(defun make-popUpkant (name object menu &rest initargs)                           "creates a popUpbox called <name>, hooked up to a popUpMenu <menu>located in the x,y position specified by the &rest key arguments"    (let ((the-box (apply #'make-instance 'C-popUpkant                         :dialog-item-text name                        :menu menu                        initargs)))        (setf (pw::patch-box the-Box) object)    the-Box))(defmethod view-click-event-handler ((self C-PopUpkant) mouse)  (declare (special pw::*target-action-object*)           (ignore mouse))  (unwind-protect    (progn      (if (enable self)        (prog1          (setf (active-menu (kant-ob self)) (num self))          (view-draw-contents (kant-ob self))))      (add-menu-items pw::*pw-menu-apps* (menu self))    ;adds the PUMenu in the menu-bar       (let ((hdl (menu-handle (menu self)))            (selection) (ID) (item) (menu-object)            (global (local-to-global self (view-mouse-position  self))))        (when hdl                                  ; just in case of weird menu deallocation          (#_insertmenu  :ptr hdl :word -1)        ;this actually inserts the popUpMenu               (setq selection                 (#_popUpMenuSelect                  :ptr hdl                  :word (point-v global)                 :word (point-h global)                 :word 1 :long))           ;selection is an encoding of ID plus ITEM chosen          (setq ID (ldb (byte 16 16) selection) item (ldb (byte 16 0) selection))          (unless (zerop ID)                                    ;0=no selection            (setq menu-object  (gethash ID *menu-id-object-table*))            (setf pw::*target-action-object* (pw::patch-box self))  ;necessary for proper funcalling of menu's methods            (if (pw::leafmenu-p menu-object)              (menu-item-action menu-object)              (menu-item-action (nth (1- item) (menu-items menu-object)) ))))))    (remove-menu-items pw::*pw-menu-apps*  (menu self))))(defmethod disable-menu ((self C-MN-view-mod-kant) num)  (declare (special *list-method-seg*))  (case num     (2 (prog1         (set-part-color (popUpBox1 self) :body 0)         (set-part-color (popUpBox1 self) :text 16777215)         (set-part-color (popUpBox2 self) :body 16777215)         (set-part-color (popUpBox2 self) :text 0)         (setf (enable (popUpBox2 self)) nil)         (setf (active-menu self) 1)         (menu-item-disable (find-menu-item   (find-menu-item (slot-value self '*Kant-popUpMenu2*) "segmentation") "patterns"))         (mapc #'(lambda (mes)                   (menu-item-disable (find-menu-item   (find-menu-item (slot-value self '*Kant-popUpMenu2*) "segmentation") (first mes)))                   ) *list-method-seg*)         (menu-item-disable (find-menu-item (slot-value self '*Kant-popUpMenu2*) "go"))))    (3 (prog1         (set-part-color (popUpBox2 self) :body 0)         (set-part-color (popUpBox2 self) :text 16777215)         (set-part-color (popUpBox3 self) :body 16777215)         (set-part-color (popUpBox3 self) :text 0)         (setf (enable (popUpBox3 self)) nil)         (setf (active-menu self) 2)         (menu-item-disable (find-menu-item (slot-value self '*Kant-popUpMenu3*) "Quantify"))         (menu-item-disable (find-menu-item (slot-value self '*Kant-popUpMenu3*) "Tempi"))         (menu-item-disable (find-menu-item (find-menu-item  (slot-value self '*Kant-popUpMenu3*) "parameters") "max/"))         (menu-item-disable (find-menu-item (find-menu-item  (slot-value self '*Kant-popUpMenu3*) "parameters") "preci"))              (menu-item-disable (find-menu-item (find-menu-item  (slot-value self '*Kant-popUpMenu3*) "parameters") "global"))              (menu-item-disable (find-menu-item (find-menu-item  (slot-value self '*Kant-popUpMenu3*) "parameters") "forbid"))))))(defmethod enable-menu ((self C-MN-view-mod-kant) num)  (declare (special *list-method-seg*))  (case num     (2 (prog1         (set-part-color (popUpBox2 self) :body 0)         (set-part-color (popUpBox2 self) :text 16777215)         (set-part-color (popUpBox1 self) :body 16777215)         (set-part-color (popUpBox1 self) :text 0)         (setf (enable (popUpBox2 self)) t)         (setf (active-menu self) 2)         (menu-item-enable (find-menu-item (find-menu-item  (slot-value self '*Kant-popUpMenu2*) "segmentation") "patterns"))         (mapc #'(lambda (mes)                   (menu-item-enable (find-menu-item   (find-menu-item (slot-value self '*Kant-popUpMenu2*) "segmentation") (first mes)))                   ) *list-method-seg*)         (menu-item-enable (find-menu-item (slot-value self '*Kant-popUpMenu2*) "go"))))    (3 (prog1         (set-part-color (popUpBox3 self) :body 0)         (set-part-color (popUpBox3 self) :text 16777215)         (set-part-color (popUpBox2 self) :body 16777215)         (set-part-color (popUpBox2 self) :text 0)         (setf (forbid-list self) nil)         (setf (max-list self) nil)         (setf (preci-list self) nil)         (setf (enable (popUpBox3 self)) t)         (setf (active-menu self) 3)         (menu-item-enable (find-menu-item (slot-value self '*Kant-popUpMenu3*) "Quantify"))         (menu-item-enable (find-menu-item (slot-value self '*Kant-popUpMenu3*) "Tempi"))         (menu-item-enable (find-menu-item (find-menu-item  (slot-value self '*Kant-popUpMenu3*) "parameters") "max/"))         (menu-item-enable (find-menu-item (find-menu-item  (slot-value self '*Kant-popUpMenu3*) "parameters") "global"))         (menu-item-enable (find-menu-item (find-menu-item  (slot-value self '*Kant-popUpMenu3*) "parameters") "preci"))              (menu-item-enable (find-menu-item (find-menu-item  (slot-value self '*Kant-popUpMenu3*) "parameters") "forbid"))))))(defmethod arch-method ((self C-MN-view-mod-kant) fn simbol  &key parametres)  (let* ((num (position simbol (simbol-archi self) :test 'equal)) (i 0) lis-par lis-text)    (setf (nth num (marcas-archi self))  nil)    (if parametres      (progn        (setf lis-par (mapcan  #'(lambda (ca)                                   (progn                                      (setf i (+ i 1))                                     (list (make-instance 'pw::editable-text-dialog-item                                             :dialog-item-text (if (null (parametre-arch self))                                                                  (format () "~A" (cadr ca))                                                                 (format () "~A" (car (nth (- i 1) (parametre-arch self)))))                                             :view-position (make-point 186 (* 20 i))                                             :view-size (make-point 40 16)                                             :view-font '("monaco" 9 :srcor))))) parametres))        (setf i 0)        (setf lis-text (mapcan  #'(lambda (ca)                                    (progn                                       (setf i (+ i 1))                                      (list (make-instance 'pw::static-text-dialog-item                                              :dialog-item-text (format () "~A" (car ca))                                              :view-position (make-point 86 (* 20 i))                                              :view-size (make-point 40 16)                                              :view-font '("monaco" 9 :srcor))))) parametres))        (let ((dialog (make-instance 'dialog :window-show nil :view-size #@(285 200)                                      :window-type :double-edge-box                                      :view-position (ccl:make-point 100 200))))          (prog1            (mapc #'(lambda (ca) (add-subviews dialog ca)) lis-text)            (mapc #'(lambda (ca) (add-subviews dialog ca)) lis-par)            (add-subviews dialog                          (slot-value self 'cancel-button) (make-instance 'pw::button-dialog-item                                                             :default-button t                                                             :dialog-item-text "OK"                                                             :view-position (make-point 80 150)                                                             :view-size (make-point 40 23)                                                             :dialog-item-action                                                             #'(lambda(item) (declare (ignore item)) (mk-new-arch self num fn lis-par ))))            (modal-dialog dialog))))      (mk-new-arch self num fn nil )))  )(defmethod seg-method ((self C-MN-view-mod-kant) fn simbol  &key parametres)  (let* ((num (position simbol (simbol-seg self) :test 'equal)) (i 0) lis-par lis-text)    (setf (nth num (marcas-seg self))  nil)    (setf (cont self) 0)    (if (not (null (selection-m1 self)))      (setf (entre-m2 self) (list (nth (selection-m1 self) (rep-m1 self))))      (setf (entre-m2 self) (rep-m1 self)))    (setf lis-par (mapcan  #'(lambda (ca)                               (progn                                  (setf i (+ i 1))                                 (list (make-instance 'pw::editable-text-dialog-item                                         :dialog-item-text (if (null (parametre-seg self))                                                              (format () "~A" (cadr ca))                                                             (format () "~A"  (nth (- i 1) (nth (- num 1) (parametre-seg self)))))                                         :view-position (make-point 120 (* 20 i))                                         :view-size (make-point 60 16)                                         :view-font '("monaco" 9 :srcor))))) parametres))    (setf i 0)    (setf lis-text (mapcan  #'(lambda (ca)                                (progn                                   (setf i (+ i 1))                                  (list (make-instance 'pw::static-text-dialog-item                                          :dialog-item-text (format () "~A" (car ca))                                          :view-position (make-point 20 (* 20 i))                                          :view-size (make-point 60 16)                                          :view-font '("monaco" 9 :srcor))))) parametres))    (mapc #'(lambda (lis)              (declare (ignore lis))              (if parametres                (let ((dialog (make-instance 'dialog :window-show nil :view-size (make-point 200 (+ 80 (* 20 i)) )                                              :window-type :double-edge-box                                              :view-position (ccl:make-point 100 200))))                  (prog1                    (mapc #'(lambda (ca) (add-subviews dialog ca)) lis-text)                    (mapc #'(lambda (ca) (add-subviews dialog ca)) lis-par)                    (add-subviews dialog                                  (make-instance 'pw::button-dialog-item                                    :default-button ()                                    :dialog-item-text "cancel"                                    :view-position (make-point 100 (+ 40 (* 20 i)))                                    :view-size (make-point 60 25)                                    :dialog-item-action                                    #'(lambda(item) (declare (ignore item)) (return-from-modal-dialog nil)))                                  (make-instance 'pw::button-dialog-item                                    :default-button t                                    :dialog-item-text "OK"                                    :view-position (make-point 20 (+ 40 (* 20 i)))                                    :view-size (make-point 40 23)                                    :dialog-item-action                                    #'(lambda(item) (declare (ignore item)) (mk-new-seg self num fn lis-par ))))                    (modal-dialog dialog)))                (mk-new-seg self num fn nil))              (setf (cont self)  (+ (cont self) 1))) (entre-m2 self))))(defmethod mk-new-arch ((self C-MN-view-mod-kant) num fn lis-par )  (let*  ((parametres (mapcar #'(lambda (ca )                                   (read-from-string (dialog-item-text ca )))                              lis-par )))    (setf (nth (- num 1) (parametre-arch self)) (mapcan #'(lambda (ca )                                                             (list (dialog-item-text ca )))                                                        lis-par ))    (setf (nth num (marcas-archi self)) (mapcan #'(lambda (note)                                                    (list note)) (apply fn `(,self ,(mk-event-list (entre self) (entre-pitch self) (entre-velo self)) ,.parametres))))    (setf (cambio-marca self) (+ 11 num))    (view-draw-contents self)    (when lis-par      (return-from-modal-dialog ()))))(defmethod mk-new-seg ((self C-MN-view-mod-kant) num fn lis-par )    (let*  ((durs (nth (cont self) (entre-m2 self)))          (ofset (caar durs))          (fin (second (car durs)))          (durs (cadr durs))          (event-list (mk-event-list (entre2 self) (entre2-pitch self) (entre2-velo self)))          (lis-p (get-archimes event-list ofset fin 'pitch (length durs)))           (lis-d (get-archimes event-list ofset fin 'velocity (length durs)))           (lista (mk-event-list durs lis-p lis-d))          (parametres (mapcar #'(lambda (ca )                                   (read-from-string (dialog-item-text ca )))                              lis-par )))     (setf (nth (- num 1) (parametre-seg self)) (mapcar #'(lambda (ca )                                                            (read-from-string (dialog-item-text ca )))                                                       lis-par ))    (setf (nth num (marcas-seg self)) (mk-merge (mapcan #'(lambda (note)                                                            (list  (+ ofset note)))  (apply fn `(,self ,lista ,.parametres)))                                                (nth num (marcas-seg self))))    (nth num (marcas-seg self))    (setf (cambio-marca self) (+ 21 num))    (view-draw-contents self)    (when lis-par      (return-from-modal-dialog ()))))