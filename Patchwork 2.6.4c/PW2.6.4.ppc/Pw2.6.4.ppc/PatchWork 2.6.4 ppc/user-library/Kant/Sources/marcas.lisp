;;;;=========================================================;;;;  KANT PATCH-WORK;;;;  Rep. Mus.;;;;  © 1994 IRCAM ;;;;=========================================================(in-package "C-PATCH-BOX-KANT")(defun mk-point (a b)  (let* ((c (view-container b)))  (ccl:make-point (+ (point-h (view-position a))  (point-h (view-position c)))                  (+ (point-v (view-position a))  (point-v (view-position c))))))(defmethod act-par-for ((self C-MN-view-mod-kant) item)  (setf (act-num self) 3)  (setf (selected-par self) item)  (set-dialog-item-text (slot-value self 'forb2)  (nth (view-nick-name item) (forbid-list self)))  (let ((dialog (make-instance 'dialog :window-show nil :view-size #@(285 80)                                :window-type :double-edge-box                                :view-position (mk-point item self))))    (add-subviews dialog                  (make-dialog-item 'static-text-dialog-item (make-point 5 10) (make-point 40 16) "Forbid" nil :view-font '("monaco" 9 :srcor))                   (slot-value self 'forb2)                  (make-instance 'pw::button-dialog-item                       :default-button t                       :dialog-item-text "OK"                       :view-position (make-point 120 45)                       :view-size (make-point 50 20)                       :dialog-item-action                       #'(lambda(item) (declare (ignore item)) (do-chosen-action self)))                  (make-instance 'pw::button-dialog-item                       :default-button ()                       :dialog-item-text "cancel"                       :view-position (make-point 200 43)                       :view-size (make-point 60 25)                       :dialog-item-action                       #'(lambda(item) (declare (ignore item)) (return-from-modal-dialog nil))))             (modal-dialog dialog)))(defmethod act-par-max ((self C-MN-view-mod-kant) item)  (setf (act-num self) 5)  (setf (selected-par self) item)  (set-dialog-item-text (slot-value self 'maxi2)  (nth (view-nick-name item) (max-list self)))  (let ((dialog (make-instance 'dialog :window-show nil :view-size #@(285 80)                                :window-type :double-edge-box                                :view-position (mk-point item self))))    (add-subviews dialog                  (make-dialog-item 'static-text-dialog-item (make-point 5 10) (make-point 40 16) "Max/" nil :view-font '("monaco" 9 :srcor))                   (slot-value self 'maxi2)                  (make-instance 'pw::button-dialog-item                       :default-button t                       :dialog-item-text "OK"                       :view-position (make-point 120 45)                       :view-size (make-point 50 20)                       :dialog-item-action                       #'(lambda(item) (declare (ignore item)) (do-chosen-action self)))                  (make-instance 'pw::button-dialog-item                       :default-button ()                       :dialog-item-text "cancel"                       :view-position (make-point 200 43)                       :view-size (make-point 60 25)                       :dialog-item-action                       #'(lambda(item) (declare (ignore item)) (return-from-modal-dialog nil))))    (modal-dialog dialog)))(defmethod act-par-preci ((self C-MN-view-mod-kant) item)  (setf (act-num self) 4)  (setf (selected-par self) item)  (set-dialog-item-text (slot-value self 'preci2)  (nth (view-nick-name item) (preci-list self)))  (let ((dialog (make-instance 'dialog :window-show nil :view-size #@(285 80)                                :window-type :double-edge-box                                :view-position (mk-point item self))))    (add-subviews dialog                  (make-dialog-item 'static-text-dialog-item (make-point 5 10) (make-point 40 16) "Preci" nil :view-font '("monaco" 9 :srcor))                   (slot-value self 'preci2)                  (make-instance 'pw::button-dialog-item                       :default-button t                       :dialog-item-text "OK"                       :view-position (make-point 120 45)                       :view-size (make-point 50 20)                       :dialog-item-action                       #'(lambda(item) (declare (ignore item)) (do-chosen-action self)))                  (make-instance 'pw::button-dialog-item                       :default-button ()                       :dialog-item-text "cancel"                       :view-position (make-point 200 43)                       :view-size (make-point 60 25)                       :dialog-item-action                       #'(lambda(item) (declare (ignore item)) (return-from-modal-dialog nil))))    (modal-dialog dialog)))(defmethod act-item ((self C-MN-view-mod-kant)  item)  (setf (car-select self) (dialog-item-text item))  (setf (item-selec self) t)  (if (not (double-click-p))    (prog1      (set-part-color item :body 0)      (set-part-color item :text 16777215)      (setf (item-selected self) item))));ACA HAY UNO FEO A CORREGIR(defmethod act-resume ((self C-MN-view-mod-kant)  item)  (when (eq (active-menu self) 2)    (if (command-key-p)      (progn        (if (not (null (resume-selected self)))          (prog1            (if (position (resume-selected self) (vis-resume-m1 self))               (progn                (set-view-size (resume-selected self) (make-point 2 50))                (if (nth (+  (position (resume-selected self) (vis-resume-m1 self)) 1) (vis-resume-m1 self))                  (set-view-size  (nth (+  (position (resume-selected self) (vis-resume-m1 self)) 1) (vis-resume-m1 self))  (make-point 2 50)))))))        (if (eq (view-nick-name (car  (last (vis-resume-m1 self)))) (- (length (resume-m1 self)) 1))          (set-view-size (car (last (vis-resume-m1 self))) (make-point 4 50)))        (if (eq  (view-nick-name (nth 0  (vis-resume-m1 self))) 0)          (set-view-size (nth 0 (vis-resume-m1 self)) (make-point 4 50)))        (setf (resume-selected self) nil)      (setf (selection-m1 self) nil))      (if (and   (not (eq (view-nick-name item) (- (length (resume-m1 self)) 1))) )         (prog1          (if (not (null (resume-selected self)))            (prog1              (if (position (resume-selected self) (vis-resume-m1 self))                 (progn                  (set-view-size (resume-selected self) (make-point 2 50))                  (if (nth (+  (position (resume-selected self) (vis-resume-m1 self)) 1) (vis-resume-m1 self))                    (set-view-size  (nth (+  (position (resume-selected self) (vis-resume-m1 self)) 1) (vis-resume-m1 self))  (make-point 2 50))))))            (progn              (if (eq (view-nick-name (car  (last (vis-resume-m1 self)))) (- (length (resume-m1 self)) 1))                (set-view-size (car (last (vis-resume-m1 self))) (make-point 2 50)))              (if (eq  (view-nick-name (nth 0  (vis-resume-m1 self))) 0)                (set-view-size (nth 0 (vis-resume-m1 self)) (make-point 2 50)))))          (set-view-size item (make-point 4 50))          (if (nth (+  (position item (vis-resume-m1 self)) 1) (vis-resume-m1 self))            (set-view-size (nth (+  (position item (vis-resume-m1 self)) 1) (vis-resume-m1 self)) (make-point 4 50)))          (setf (resume-selected self) item)          (setf (selection-m1 self) (view-nick-name item)))))))(defmethod delete-marca ((self C-MN-view-mod-kant)  num )  (let* ((lista (cond ((= num 33) (vis-max self))                      ((= num 32) (vis-preci self))                      ((= num 8)  (vis-compaces self))                      ((= num 31) (vis-forbid self))                      ((= num 1)  (vis-resume-m1 self))                      ((= num 2)  (vis-resume-m2 self))                      ((> num 20) (nth (- (mod num 10) 1) (vis-marcas-seg self)))                      (t          (nth (- (mod num 10) 1) (vis-marcas-archi self))))))     (if (null lista) nil        (prog1          (mapc #' (lambda (mes)              (remove-subviews  (view-container mes) mes)) lista)          (cond  ((= num 33)   (setf (vis-max self) nil))                 ((= num 32)   (setf (vis-preci self) nil))                 ((= num 8)    (setf (vis-compaces self) nil))                 ((= num 31)   (setf (vis-forbid self) nil))                 ((= num 1)    (setf  (vis-resume-m1 self) nil))                 ((= num 2)    (setf  (vis-resume-m2 self) nil))                 ((> num 20)   (setf (nth (- (mod num 10) 1) (vis-marcas-seg self)) nil))                  (t            (setf (nth (- (mod num 10) 1) (vis-marcas-archi self)) nil)))))))(defmethod draw-marca ((self C-MN-view-mod-kant)  num  sn lar)  (let* ((lista (calcule-marca1 self num sn lar))         (lispat (if (= num 22) (mapcan #'(lambda (mes)                                            (collecte mes 'cadr)) lista) nil))         (lista (if (= num 22) (mapcan #'(lambda (mes)                                           (list (collecte mes 'car))) lista) lista))         (car  (if (< num 20)  (nth (- (mod num 10) 1) (simbol-archi self))                   (nth (- (mod num 10) 1) (simbol-seg self))))         (hor (+ 40 (* 9 (- (mod num 10) 1))))         (hor     (-  pw::*MN-C5* hor))         (lis  (if (> num 20) (nth (- (mod num 10) 1) (vis-marcas-seg self))                   (nth (- (mod num 10) 1) (vis-marcas-archi self)))))    (if (null lista) nil        (let* ((i 0) (j -1))          (mapc #'(lambda (mes)                    (prog1                        (mapc #'(lambda (mes1)                                (progn (setf j (+ j 1))                                       (let ((diag (make-instance 'Kstatic-text-dialog-item                                                     :view-position (make-point  (+ 37 (-  (round  mes1) (* (+ lar 3)  i )))  hor)                                                     :dialog-item-text (if (= num 22) (nth j lispat) car)                                                     :view-font '("monaco" 9 :srcor)                                                     :view-size  (make-point 8 10)                                                     :view-nick-name j                                                     :dialog-item-action  #'(lambda (item) (act-item self item)))))                                         (setf lis (cons diag lis))                                         (add-subviews (nth i (editor-objects self)) diag)))) mes)                      (setf i (+ i 1)))) lista)          (if (> num 20)  (setf  (nth (- (mod num 10) 1) (vis-marcas-seg self)) lis )              (setf  (nth (- (mod num 10) 1) (vis-marcas-archi self)) lis ))))))(defmethod draw-par ((self C-MN-view-mod-kant)  num  sn lar)  (let* ((lista (calcule-marca1 self 2 sn lar))         (j (second lista))         (lista  (car lista))         (lis  (case num (33 (vis-max self))                         (32 (vis-preci self))                         (31 (vis-forbid self)))))    (if (null lista) nil        (let* ((i 0) )          (mapc #'(lambda (mes)                     (prog1                      (mapc #'(lambda (mes1)                                (let ((diag (make-instance 'Kstatic-text-dialog-item                                              :view-position  (make-point (+ 37 (-  mes1   (* (+ lar 3)  i ))) (-  pw::*MN-C5* 45))                                              :dialog-item-text (case num (33 (if (and (listp (read-from-string (nth j (max-list self))))                                                                                       (or (> (length (read-from-string (nth j (max-list self)))) 3)                                                                                           (flistp (read-from-string (nth j (max-list self))))))                                                                                "(*)" (nth j (max-list self))))                                                                          (32 (if (and (listp (read-from-string (nth j (preci-list self))))                                                                                       (or (> (length (read-from-string (nth j (preci-list self)))) 3)                                                                                           (flistp (read-from-string (nth j (preci-list self))))))                                                                                "(*)" (nth j (preci-list self))))                                                                          (31 (if (and (listp (read-from-string (nth j (forbid-list self))))                                                                                       (or (> (length (read-from-string (nth j (forbid-list self)))) 3)                                                                                           (flistp (read-from-string (nth j (forbid-list self))))))                                                                                "(*)" (nth j (forbid-list self)))))                                              :view-nick-name j                                              :view-font '("monaco" 7 :srcor)                                              :view-size (make-point 40 12)                                              :dialog-item-action (case num (33 #'(lambda (item) (act-par-max self item)))                                                                            (32 #'(lambda (item) (act-par-preci self item)))                                                                            (31 #'(lambda (item) (act-par-for self item)))))))                                  (setf lis (cons diag lis))                                  (add-subviews (nth i (editor-objects self)) diag)                                  (setf j (+ j 1)))                                 ) mes)                      (setf i (+ i 1)))) lista)          (case num (33 (setf  (vis-max self) lis ))                    (32 (setf  (vis-preci self) lis ))                    (31 (setf  (vis-forbid self) lis )))))))(defmethod draw-resume ((self C-MN-view-mod-kant)  num  sn lar)  (let* (( lista   (calcule-marca1 self num sn lar))         (pri      (cadr lista))         (lista    (car lista))         (lon1     (case num (1   -35) (8   12) (2   -20)))         (lon1     (+  pw::*MN-C5* lon1))         (lis      (case num (1 (vis-resume-m1 self))                              (8 (vis-compaces self))                              (2 (vis-resume-m2 self))))         (lon2     (case num (1   50) (8   6) (2   17))))    (if (null lista) nil        (let* ((i 0) (j pri))          (mapc #'(lambda (mes)                    (prog1                       (mapc #'(lambda (mes1)                                (let ((diag (make-instance 'Kstatic-text-dialog-item                                              :view-position (make-point   (+ 38 (-  (round  mes1)   (* (+ lar 3)  i ))) lon1)                                              :dialog-item-text ""                                              :view-font '("monaco" 40 :srcor)                                              :view-size (if (and (eq num 1) (not (null (resume-selected self))))                                                            (if (or (eq j (view-nick-name (resume-selected self)))                                                                   (eq j (+ (view-nick-name (resume-selected self)) 1)))                                                             (make-point 4 lon2)                                                             (make-point 2 lon2))                                                           (make-point 2 lon2))                                              :part-color-list '(:body 0 )                                              :view-nick-name j                                              :dialog-item-action (case num (1 #'(lambda (item) (act-resume self item)))                                                                         (8 #'(lambda (item) (declare (ignore item))                                                                               (ed-beep)))                                                                        (2 #'(lambda (item) (declare (ignore item))                                                                               (ed-beep)))))))                                  (if (and (not (null (resume-selected self))) (eq num 1))                                    (if (eq j (view-nick-name (resume-selected self)))                                      (setf (resume-selected self) diag)))                                  (setf lis (cons diag lis))                                  (add-subviews (nth i (editor-objects self)) diag)                                  (setf j (+ j 1)))) mes)                      (setf i (+ i 1)))) lista)          (if (and (null (selection-m1 self)) (not (null lis)) (eq num 1) )            (progn              (if (eq (view-nick-name (car  (last lis))) 0)                (set-view-size (car (last lis)) (make-point 4 50)))              (if (eq (view-nick-name (car  lis)) (- (length (resume-m1 self)) 1))                (set-view-size (car lis) (make-point 4 50)))))          (if (and (eq (selection-m1 self) 0) (not (null lis)) (eq num 1))            (if  (eq (view-nick-name (car  (last lis))) 0)              (progn                (set-view-size (first (last lis)) (make-point 4 50))                (setf (resume-selected self) (first (last lis)))                 (when (butlast lis)                  (set-view-size (second (reverse lis)) (make-point 4 50))))))                                    (case num (1 (setf  (vis-resume-m1 self) (reverse lis)))                     (8 (setf  (vis-compaces self)  (reverse lis)))                     (2 (setf  (vis-resume-m2 self) (reverse lis))))))))          ;ACA OTRA A MEJORAR(defmethod calcule-marca1 ((self C-MN-view-mod-kant)  num s0 sf)  (let* ((lista (cond                  ((= num 1) (if (eq (active-menu self) 1)                              (ind->pix self (domaine self) (entre self))                              (if (eq (active-menu self) 3)                                (ind->pix self (resume-m1 self) (entre3 self))                                (ind->pix self (resume-m1 self) (entre2 self)))))                 ((= num 2)  (if (null (list-of-mes self)) nil (ind->pix self (list-of-mes self) (entre3 self))))                 ((= num 8)  (mk-scal self (compaces self)))                 ((= num 22) (if (null (patte self)) nil (ind->pix self (collecte (patte self) 'car) (entre2 self))))                 ((< num 20) (if (null  (nth (- (mod num 10) 1)  (marcas-archi self))) nil                                 (ind->pix self (nth (- (mod num 10) 1)  (marcas-archi self)) (entre self))))                 (t (if (null  (nth (- (mod num 10) 1)  (marcas-seg self))) nil                        (ind->pix self (nth (- (mod num 10) 1)  (marcas-seg self)) (entre2 self))))))         (i 0)         (n (length lista)) ti pri resu)    (if (null lista) nil        (let* ((ac s0))          (setf resu (mapcan #'(lambda (view)                                 (declare (ignore view))                                 (let* (rep )                                   (if (< i n)                                     (setf ti (nth i lista)))                                   (while (and (< ti ac) (< i n))                                     (prog1                                       (setf i (+ i 1))                                       (if  (< i n)                                         (setf ti  (nth i lista)))))                                   (if (null pri) (setf pri i))                                   (while (and (< ti (+ ac sf)) (< i n))                                     (prog1                                       (setf rep (cons  (if (= num 22) (list (nth i lista) (cadr (nth i (patte self)))) (nth i lista)) rep))                                       (setf i (+ i 1))                                       (if  (< i n)                                         (setf ti  (nth i lista)))))                                   (setf ac (+ ac sf))                                   (list (reverse rep)))) (editor-objects self)))))    (if (or (eq num 1) (eq num 2) (eq num 8))  (list resu pri ) resu)))        (defun flistp (lista)  (if (position nil (mapcar #'(lambda (mes)     (integerp mes)) lista)) t)) (defmethod new-pos-marca  ((self C-MN-view-mod-kant)  x)  (let* ((x-editor (point-h (view-size (car (editor-objects self)))))         (ed-num (floor x x-editor))         (posx (mod x x-editor)))    (list ed-num posx)))    