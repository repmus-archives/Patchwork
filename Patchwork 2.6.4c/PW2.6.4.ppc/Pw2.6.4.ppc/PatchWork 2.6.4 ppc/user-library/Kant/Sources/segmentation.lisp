;;;;=========================================================;;;;  KANT PATCH-WORK;;;;  Rep. Mus.;;;;  © 1994 IRCAM ;;;;=========================================================(in-package "C-PATCH-BOX-KANT")(defmethod all-methodes ((self C-MN-view-mod-kant))  (declare (special *list-method-seg*))  (declare (special *list-method-arch*))  (mapc #'(lambda (mes)             (progn              (add-menu-items (find-menu-item (slot-value self '*Kant-popUpMenu2*) "segmentation")                                (pw::new-leafmenu (first mes) #'(lambda() (seg-method self (second mes) (third mes) :parametres (fourth mes)))))              (setf (parametre-seg self) (reverse (cons (mapcan #'(lambda (ca )                                                                     (list (cadr  ca )))                                                                (fourth mes) ) (reverse (parametre-seg self)))))              (setf (marcas-seg self) (reverse (cons nil (reverse (marcas-seg self)))))             (setf (simbol-seg self) (reverse (cons (third mes) (reverse (simbol-seg self)))))              (setf (vis-marcas-seg self) (reverse (cons nil (reverse (vis-marcas-seg self))))))            ) *list-method-seg*)  (mapc #' (lambda (mes)              (progn               (add-menu-items (find-menu-item (slot-value self '*Kant-popUpMenu1*) "segmentation")                                 (pw::new-leafmenu (first mes) #'(lambda() (arch-method self (second mes) (third mes) :parametres (fourth mes)))))               (setf (parametre-arch self) (reverse (cons  (mapcan #'(lambda (ca)                                                                        (list (cadr  ca )))                                                                   (fourth mes) ) (reverse (parametre-arch self)))))               (setf (marcas-archi self) (reverse (cons nil (reverse (marcas-archi self)))))               (setf (simbol-archi self) (reverse (cons (third mes) (reverse (simbol-archi self)))))               (setf (vis-marcas-archi self) (reverse (cons nil (reverse (vis-marcas-archi self))))))) *list-method-arch*))(defmethod compute-silences ((self C-MN-view-mod-kant) ev-list time)  (declare (ignore self))  (let* ((lista (collecte ev-list 'vrai-dur))         (i 0) rep)    (mapc #' (lambda (mes)        (progn          (if (and (minusp mes) (>= (abs mes) time))            (setf rep (cons i rep)))          (setf i (+ i 1)))) lista)    (reverse rep)))            #|(defmethod compute-peakmax ((self C-MN-view-mod-kant) ev-list edge smooth)  (declare (ignore self))  (let* ((lista (collecte (reduce-event-list ev-list) 'dur)))   (if (eq edge 1)    (collecte (compute-peaks lista smooth nil) 'value)    (mapcar  #' (lambda (mes) (+ mes 1))      (collecte (compute-peaks lista smooth nil) 'value) ))))|#;; GA 13/10/94(defmethod compute-peakmax ((self C-MN-view-mod-kant) ev-list  smooth threshold)  (declare (ignore self))  (let* ((lista (collecte (reduce-event-list ev-list) 'dur)))   (collecte (compute-peaks lista smooth nil :threshold threshold) 'value)))(defmethod compute-peakmin ((self C-MN-view-mod-kant) ev-list smooth)  (declare (ignore self))  (collecte (compute-peaks (density-function ev-list 65) smooth nil) 'value))   (defmethod compute-chords ((self C-MN-view-mod-kant) lista delta)  (let* ((n (length lista ))         (i 0) j k siga )    (setf (slot-value self 'deltachord) delta)  (while (< i n)       (progn         (setf k 0)         (setf j (+ i 1))         (setf siga t)         (while (and (< j n) siga)           (progn           (if (>= delta (abs (- (onset (nth i lista)) (onset (nth j lista)))))             (progn (weight (nth i lista) (+ (weight (nth i lista)) 21))                    (setf k (+ k 1)))             (setf siga nil))           (setf j (+ j 1))))         (setf i (+ k (+ i 1)))))  (if (eq (length (entre self)) 1)    (mapcan #' (lambda (mes) (list (position mes (collecte lista 'onset))))                            (remove-duplicates (collecte (select lista 'weight '> 20) 'onset)))    (butlast (mapcan #' (lambda (mes) (list (position mes (collecte lista 'onset))))                            (remove-duplicates (collecte (select lista 'weight '> 20) 'onset)))))))  