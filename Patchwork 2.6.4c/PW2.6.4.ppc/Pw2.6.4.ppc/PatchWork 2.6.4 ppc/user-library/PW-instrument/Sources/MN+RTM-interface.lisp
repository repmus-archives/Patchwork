(in-package :PW);=================================================================; a special class to access the application-object(defclass C-patch-give-first-editor-obj (C-patch) ())(defmethod patch-value ((self C-patch-give-first-editor-obj) obj)  (let ((args (ask-all (cdr (input-objects self)) #'patch-value obj))        (edit-obj (first (input-objects self))))    (apply (pw-function self) (cons edit-obj args))))(defun set-instrument-to-chord-notes (chords ins)  (dolist (chord chords)    (dolist (note (notes chord))      (setf (instrument note) (if (not (stringp ins)) (eval (decompile ins)) ())))));=================================================================; MN(defunp set-ins-sel-mn ((mn-editor list (:type-list (collector list) :dialog-item-text "mn-editor")) (ins Nilnum (:value "ins"))) ()"set an instrument-object to selected chord-notes in a collector"  (let ((chords (saved-selected (car (subviews (application-object mn-editor))))))    (set-instrument-to-chord-notes chords ins)))(pw-addmenu-fun *pw-instrument-menu-item* 'set-ins-sel-mn 'C-patch-give-first-editor-obj);=================================================================; rtm;=================================================================(defunp set-ins-sel-rtm ((rtm-editor list (:type-list (measure-line measure-lines) :value "rtm-editor")) (ins Nilnum (:value "ins"))) ()"set an instrument-object to selected chord-notes in a rtm-editor"  (let ((chords (give-rtm-range-chords (editor-collection-object (application-object rtm-editor)) t)))    (set-instrument-to-chord-notes chords ins)))(pw-addmenu-fun *pw-instrument-menu-item* 'set-ins-sel-rtm 'C-patch-give-first-editor-obj)