(in-package :PW);==========================================================================================; PW interface;==========================================================================================;set-default-chant-value(defmethod set-default-chant-value ((self C-ttybox) value)   (set-default-pw-value self value)) (defmethod set-default-chant-value ((self C-mini-bpf-view) bpf)  (when bpf   (set-break-point-function-to-mini self (eval (decompile bpf))))) ;==========================================================================================;==========================================================================================; C-abstract-ins;==========================================================================================(defclass C-chant-abstract-ins (C-patch)  ((chant-abs-ins-pointer :initform ()    :initarg :chant-abs-ins-pointer :accessor chant-abs-ins-pointer)))#|(defmethod decompile ((self C-chant-abstract-ins))  `(make-instance ',(class-name (class-of self))               :view-position ,(view-position self)               :view-size ,(view-size self)               :active-mode  ,(active-mode self)               :pw-function  ',(pw-function self)               :type-list ',(type-list self)                 :view-subviews (list ,@(ask-all (pw-controls self) 'decompile))               :chant-abs-ins-pointer ,(chant-abs-ins-pointer self))) ;??|#(defun decompile-abstract-ins (abstract)  `(make-instance 'C-chant-abstract-ins               :view-position ,(view-position abstract)               :view-size ,(view-size abstract)               :active-mode  ,(active-mode abstract)               :pw-function  ',(window-title (patch-win abstract))               :view-subviews (list ,@(ask-all (pw-controls abstract) 'decompile))               :chant-abs-ins-pointer ,abstract));==========================================================================================; double-click(defmethod open-patch-win ((self C-chant-abstract-ins))  (when (chant-abs-ins-pointer self)    (window-select (patch-win (chant-abs-ins-pointer self)))));==========================================================================================(defmethod abstract-instrument-box-p ((self simple-view)) nil)(defmethod abstract-instrument-box-p ((self C-chant-abstract-ins))  self);==========================================================================================;only port is directly connected to absout (defmethod connect-inputs-if-instrument-port-p ((self simple-view)) nil)(defmethod connect-inputs-if-instrument-port-p ((self C-chant-abstract-ins))  (let* ((abstract (chant-abs-ins-pointer self))        (port          (abstract-instrument-port-p (car (input-objects (out-obj abstract)))))        in-boxes)    (when port      (setq in-boxes           (find-abstract-in-boxes (patch-win abstract) (controls (patch-win abstract))))      (for (i 0 1 (1- (length in-boxes)))          (connect-to-nth-input (nth i in-boxes) i self)))    port));==========================================================; ??????(defmethod patch-value ((self C-abstract) obj)  (patch-value2 self obj));  (time (patch-value2 self obj)))(defmethod patch-value2 ((self C-abstract) obj)  (if (abstract-instrument-port-p (car (input-objects (out-obj self))))    (progn (let (ctrl)             (setq ctrl (eval (decompile-abstract-ins self)))             (mapcar #'set-default-chant-value (input-objects ctrl)               (ask-all (input-objects self) 'patch-value obj))           ctrl))    (patch-value (out-obj self) obj)));==========================================================(defvar *pw-chant-window-counter* 0)(defun make-new-chant-window (string)  (make-instance 'C-pw-window       :window-title          (concatenate  'string  string (format nil "~D" (incf *pw-chant-window-counter*)))       :view-position (make-point 50 38)      :view-size (make-point 200 200) :close-box-p nil :window-show ()))(defmethod MAKE-SUPER-NOTE-CONNECTIONs  ((self C-chant-abstract-ins) super-note super-win)  (declare (ignore super-note super-win)))(defmethod remove-instrument-item ((self C-chant-abstract-ins) x y)  (declare (ignore x y)));=====================================================================(defmethod draw-instrument ((self C-chant-abstract-ins)  x y t-scfactor)    (declare (ignore y t-scfactor))   (setf (pw-function self) (window-title (patch-win (chant-abs-ins-pointer self))))   (set-view-font  *current-MN-window* '("Monaco"  9 :srcor))   (draw-string x *MN-note-ins-y* (pw-function self))   (set-view-font  *current-MN-window* '("MusNot-j" 18 :srcor))   (incf *MN-note-ins-y* 12))(defmethod play-instrument ((self C-chant-abstract-ins) note)  (declare (ignore note)));=========================================(defmethod open-instrument-editor ((self C-chant-abstract-ins)  win x y)  (declare (ignore x y)) (unless (view-window self)   (let ((pw-win (make-new-chant-window (pw-function self)))         (chant-patch self)         (super-note  *global-selected-note*)         (super-win win))        (setf (instrument super-note) pw-win)  ; instrument will now point to pw-win      (setf (super-note pw-win) super-note)      (setf (super-win pw-win) super-win)      (set-view-position chant-patch 20 20)      (add-patch-box pw-win chant-patch)      (tell (controls pw-win) 'set-pw-window-pointers pw-win)      (erase+view-draw-contents *current-mn-editor*)))  (window-select (view-window self)))