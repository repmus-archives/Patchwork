(in-package :PW);==========================================================================================(defclass C-patch-chant-port (C-pw-extend) ());==================================(defmethod give-new-extended-title ((self C-patch-chant-port)) 'port) (setf *instrument-port-type*  (make-instance 'C-pw-type  :control-form   `(make-instance 'C-ttybox  :view-size #@(36 14) :doc-string "synth" :dialog-item-text "synth"     :type-list '(chant-synth midi-synth))))(defmethod generate-extended-inputs ((self C-patch-chant-port))   (let (arg-list)    (repeat (1+ (length (pw-controls self)))          (push  '*instrument-port-type* arg-list)          (push  "synth" arg-list))    (nreverse arg-list)))(defmethod patch-value ((self C-patch-chant-port) obj)  (declare (ignore obj))   (input-objects self));==================================(defmethod abstract-instrument-port-p ((self simple-view)) nil)(defmethod abstract-instrument-port-p ((self C-patch-chant-port))  self)(defunp port ((port list (:value "synth" :type-list (chant-synth midi-synth)))              &rest (port list (:value "synth" :type-list (chant-synth midi-synth)))) all-types"Instrument port.All instrument-abstractions should have a port-box connected to the input of an absout-box.         A midi-bpf or midi-val must be connected to its inputA chant synthesizer (filter or fof) must be connected to its input"  (declare (ignore port)))