(in-package :PW);==========================================================================================;last thing called while loading the main window;from -graphics:window+menu:pw-window;==========================================================================================(defun PW-update-wins-menu (&optional pathname)  (let ((window-now (car *pw-window-list*)))    (when (and (not (abstract-box window-now))               (not (wins-menu-item window-now)))       (when pathname (setf (patch-win-pathname window-now) pathname))        (window-select window-now)       (add-menu-items  *pw-windows-menu*            (setf (wins-menu-item window-now)              (new-leafmenu  (window-title window-now)                  #'(lambda ()(window-select window-now))))))       (when (eq (front-window)  window-now)          (update-wins-menu-items window-now)         (tell (subviews window-now) #'last-update-from-main-win window-now)))) ;;;;;;ML;;paste to another window ????(defmethod paste ((self C-pw-window))  (when (patch-scrap self)    (apply #'add-subviews self (eval (patch-scrap self)))    (set-changes-to-file-flag self)     (tell (controls self) 'set-pw-window-pointers self)    (tell (subviews self) #'last-update-from-main-win self) ;;;;;;ML    (view-draw-contents self)))(defmethod duplicate ((self C-pw-window))  (when (active-patches self)    (set-changes-to-file-flag self)     (copy self)    (tell (controls self) 'deactivate-control)    (let* ((*compile-definitions* ())             (new-patches (eval (patch-scrap self))))        (apply #'add-subviews self  new-patches)        (tell (controls self) 'set-pw-window-pointers self)        (tell new-patches 'dmove-patch 20 20)        (tell (subviews self) #'last-update-from-main-win self) ;;;;;;ML        (view-draw-contents  self))));=================================================;=================================================(defmethod last-update-from-main-win ((self C-patch) main-win)  (declare (ignore main-win))); instrument-abstraction can be in any abstraction inside main-window(defmethod last-update-from-main-win ((self C-abstract) main-win)  (tell (subviews (patch-win self)) #'last-update-from-main-win main-win))(defmethod last-update-from-main-win ((self C-patch-chant-port) main-win) (let (abst)    (when (setq abst (abstract-box (view-window self)))      (make-all-instrument-connections main-win abst))));=================================================(defmethod make-all-instrument-connections ((self C-pw-window) ins-abst)  (tell (subviews self) #'make-all-instrument-connections ins-abst))(defmethod make-all-instrument-connections ((self C-patch) ins-abst)  (declare (ignore ins-abst)));;MN + RTM;==================================================================(defun make-all-instrument-connections-mn (self ins-abst)  (let ((notes           (apply #'append              (ask-all                 (apply #'append                   (ask-all                          (ask-all                            (editor-objects (editor-view-object (application-object self)))                            #'chord-line)                      #'chords))                  #'notes))))     (while notes        (when (instrument (car notes))           (connect-instrument+mnwin               (instrument (car notes))  ins-abst (car notes) (application-object self)))         (pop notes))))(defmethod make-all-instrument-connections ((self C-patch-midi-Mod) ins-abst)  (make-all-instrument-connections-mn self ins-abst))     (defmethod make-all-instrument-connections ((self C-patch-PolifMN-mod) ins-abst)  (make-all-instrument-connections-mn self ins-abst))     ;=============(defun make-all-instrument-connections-rtm (self ins-abst)  (let ((notes           (apply #'append             (ask-all                (ask-all                  (apply #'append                   (ask-all                          (ask-all                            (beat-editors  (editor-collection-object (application-object self)))                            #'measure-line)                      #'collect-all-chord-beat-leafs))                   #'beat-chord)                  #'notes))))     (while notes        (when (instrument (car notes))           (connect-instrument+mnwin               (instrument (car notes))  ins-abst (car notes) (application-object self)))         (pop notes))))(defmethod make-all-instrument-connections ((self C-patch-application-rtm-editor) ins-abst)  (make-all-instrument-connections-rtm self ins-abst))     (defmethod make-all-instrument-connections ((self C-patch-PolifRTM) ins-abst)  (make-all-instrument-connections-rtm self ins-abst))     ;==================================================================(defmethod connect-instrument+mnwin ((self C-pw-window) ins-abst super-note super-win)  (let ((ins-box (ask (subviews self) #'abstract-instrument-box-p)))    (setf (super-note self) super-note)    (setf (super-win self) super-win)    (when  ins-box         (connect-instrument+mnwin ins-box ins-abst super-note super-win))));check for inputboxes ?(defmethod connect-instrument+mnwin ((self C-chant-abstract-ins) ins-abst super-note super-win)  (declare (ignore super-note super-win)) ; (print (list 'abstract-ins!! (pw-function self) (window-title (patch-win ins-abst))))  (when (string=  (pw-function self) (window-title (patch-win ins-abst)))     (setf (chant-abs-ins-pointer self) ins-abst)));==================================================================; editing by hand;==================================================================;;;???????????;;;*decompile-chords-mode* t when save-with-MN   true when front window PW-win(defmethod decompile ((self C-chant-abstract-ins))  (if  *decompile-chords-mode*    `(make-instance ',(class-name (class-of self))                    :view-position ,(view-position self)                    :view-size ,(view-size self)                    :active-mode  ,(active-mode self)                    :pw-function  ',(window-title (patch-win (chant-abs-ins-pointer self)))                    :type-list ',(type-list self)                      :view-subviews (list ,@(ask-all (pw-controls self) 'decompile)))    `(let ((note            (make-instance ',(class-name (class-of self))                           :view-position ,(view-position self)                           :view-size ,(view-size self)                           :active-mode  ,(active-mode self)                           :pw-function  ',(pw-function self)                           :type-list ',(type-list self)                             :view-subviews (list ,@(ask-all (pw-controls self) 'decompile)))))       (when ,(chant-abs-ins-pointer self)         (if (abstract-ins-obj-in-same-main-window? ,(chant-abs-ins-pointer self) )            (setf (chant-abs-ins-pointer note) ,(chant-abs-ins-pointer self))           (error  (format () "INSRUMENT ABSTRACTION FOR ~A NOT ON MAIN WINDOW !!"                            ,(window-title (patch-win (chant-abs-ins-pointer self) ))))))       note))) ;??#|(defmethod abstract-ins-obj-in-same-main-window? ((self C-abstract)) (or (eq (front-window) (view-window self))       ;;?? should be main-window method     (when (or (eq (type-of (front-window)) 'C-rtm-editor-window)               (eq (type-of (front-window)) 'C-mn-window-mod))         (eq (pw-win (front-window)) (view-window self)))))|#(defmethod abstract-ins-obj-in-same-main-window? ((self C-abstract)) (let ((main-win (give-main-window-for-abstratcion self)))   (or (eq (front-window) main-win)       ;;making side-effects to MN or RTM       (when (or (eq (type-of (front-window)) 'C-rtm-editor-window)  ;;;editing by hand                 (eq (type-of (front-window)) 'C-mn-window-mod))                 (eq (pw-win (front-window)) main-win)))))(defmethod give-main-window-for-abstratcion ((self C-abstract))  (if (abstract-box (view-window self))       (give-main-window-for-abstratcion (abstract-box (view-window self)))       (view-window self)))