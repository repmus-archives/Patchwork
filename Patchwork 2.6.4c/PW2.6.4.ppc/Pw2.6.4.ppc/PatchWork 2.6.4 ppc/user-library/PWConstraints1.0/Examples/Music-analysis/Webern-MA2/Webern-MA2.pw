(in-package :pw)(make-win 'c-pw-window "Webern-MA2" 2490418 11600294 (list (sbox 'c-patch-polifrtm 'poly-rtm "prtm" nil 1966145 (list "nil" "nil" "nil") nil (list '(327685 33883145 0 3 81 (10 10224619 2 31 20 81/100) (10223626 10224619 2 25 20 81/100) (20447242 10224619 4 -6 20 81/100) 3276810 34210845 "prtm") (list (let* ((m-line (make-instance 'c-measure-line :measures (list (make-instance 'c-measure :low "4" :metronome 50 :metronome-unit 4 :beat-objects (list (beat-constructor 1 '(-1) (list)) (beat-constructor 1 '(-1 3) (list (make-c-chord 150 (list (make-c-note 6800 40 #\I 90 100 1 nil 0 0 nil))))) (beat-constructor 1 '(-1 1) (list (make-c-chord 300 (list (make-c-note 6000 35 nil 60 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 50 :metronome-unit 4 :beat-objects (list (beat-constructor 1 '(1 1) (list (make-c-chord 360 (list (make-c-note 7100 41 nil 60 100 1 nil 0 0 nil))) (make-c-chord 420 (list (make-c-note 6600 38 #\Y 60 100 1 nil 0 0 nil))))) (beat-constructor 1 '(-1) (list)) (beat-constructor 1 '(-1 1 1) (list (make-c-chord 640 (list (make-c-note 6100 35 #\Y 40 100 1 nil 0 0 nil))) (make-c-chord 680 (list (make-c-note 6700 39 nil 40 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 50 :metronome-unit 4 :beat-objects (list (beat-constructor 1 '(1 1) (list (make-c-chord 720 (list (make-c-note 7200 42 nil 60 100 1 nil 0 0 nil))) (make-c-chord 780 (list (make-c-note 7100 41 nil 60 100 1 nil 0 0 nil))))) (beat-constructor 1 '(-1 2 1) (list (make-c-chord 870 (list (make-c-note 6600 38 #\Y 60 100 1 nil 0 0 nil))) (make-c-chord 930 (list (make-c-note 6500 38 nil 30 100 1 nil 0 0 nil))))) (beat-constructor 1 '(-1 1 -1 1) (list (make-c-chord 990 (list (make-c-note 7600 44 nil 30 100 1 nil 0 0 nil))) (make-c-chord 1050 (list (make-c-note 7100 41 nil 30 100 1 nil 0 0 nil)))))))))) (beats-info '(nil nil nil nil nil nil nil nil nil nil nil nil)) (beats (collect-all-chord-beat-leafs m-line)) (beats2 beats) temp) (while (and beats-info beats2) (setq temp (pop beats-info)) (while temp (if (and (listp (car temp)) (first (car temp)) (second (car temp)) (third (car temp))) (make-beat-groups (car beats2) (first (car temp)) (second (car temp)) (third (car temp)) beats) (make-beat-expr (car beats2) (car temp))) (pop temp)) (pop beats2)) m-line) (let* ((m-line (make-instance 'c-measure-line :measures (list (make-instance 'c-measure :low "4" :metronome 50 :metronome-unit 4 :beat-objects (list (beat-constructor 1 '(-1) (list)) (beat-constructor 1 '(-1) (list)) (beat-constructor 1 '(-1 3) (list (make-c-chord 270 (list (make-c-note 5700 33 nil 90 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 50 :metronome-unit 4 :beat-objects (list (beat-constructor 1 '(-1 1) (list (make-c-chord 420 (list (make-c-note 4900 28 #\Y 60 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1 1) (list (make-c-chord 480 (list (make-c-note 6000 35 nil 60 100 1 nil 0 0 nil))) (make-c-chord 540 (list (make-c-note 5500 32 nil 60 100 1 nil 0 0 nil))))) (beat-constructor 1 '(-1) (list)))) (make-instance 'c-measure :low "4" :metronome 50 :metronome-unit 4 :beat-objects (list (beat-constructor 1 '(-1 1 1) (list (make-c-chord 760 (list (make-c-note 5000 29 nil 40 100 1 nil 0 0 nil))) (make-c-chord 800 (list (make-c-note 5600 33 #\I 40 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1 1) (list (make-c-chord 840 (list (make-c-note 6100 35 #\Y 60 100 1 nil 0 0 nil))) (make-c-chord 900 (list (make-c-note 6000 35 nil 60 100 1 nil 0 0 nil))))) (beat-constructor 1 '(-1 2 1) (list (make-c-chord 990 (list (make-c-note 5500 32 nil 60 100 1 nil 0 0 nil))) (make-c-chord 1050 (list (make-c-note 5400 31 #\Y 30 100 1 nil 0 0 nil)))))))))) (beats-info '(nil nil nil nil nil nil nil nil nil nil)) (beats (collect-all-chord-beat-leafs m-line)) (beats2 beats) temp) (while (and beats-info beats2) (setq temp (pop beats-info)) (while temp (if (and (listp (car temp)) (first (car temp)) (second (car temp)) (third (car temp))) (make-beat-groups (car beats2) (first (car temp)) (second (car temp)) (third (car temp)) beats) (make-beat-expr (car beats2) (car temp))) (pop temp)) (pop beats2)) m-line) (let* ((m-line (make-instance 'c-measure-line :measures (list (make-instance 'c-measure :low "4" :metronome 50 :metronome-unit 4 :beat-objects (list (beat-constructor 1 '(-1 3) (list (make-c-chord 30 (list (make-c-note 5100 30 #\I 90 100 1 nil 0 0 nil))))) (beat-constructor 1 '(-1 1) (list (make-c-chord 180 (list (make-c-note 4300 25 nil 60 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1 1) (list (make-c-chord 240 (list (make-c-note 5400 31 #\Y 60 100 1 nil 0 0 nil))) (make-c-chord 300 (list (make-c-note 4900 28 #\Y 60 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 50 :metronome-unit 4 :beat-objects (list (beat-constructor 1 '(-1) (list)) (beat-constructor 1 '(-1 1 1) (list (make-c-chord 520 (list (make-c-note 4400 26 #\I 40 100 1 nil 0 0 nil))) (make-c-chord 560 (list (make-c-note 5000 29 nil 40 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1 1) (list (make-c-chord 600 (list (make-c-note 5500 32 nil 60 100 1 nil 0 0 nil))) (make-c-chord 660 (list (make-c-note 5400 31 #\Y 60 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 50 :metronome-unit 4 :beat-objects (list (beat-constructor 1 '(-1 2 1) (list (make-c-chord 750 (list (make-c-note 4900 28 #\Y 60 100 1 nil 0 0 nil))) (make-c-chord 810 (list (make-c-note 4800 28 nil 30 100 1 nil 0 0 nil))))) (beat-constructor 1 '(-1 1 -1 1) (list (make-c-chord 870 (list (make-c-note 5900 34 nil 30 100 1 nil 0 0 nil))) (make-c-chord 930 (list (make-c-note 5400 31 #\Y 30 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1 1 1) (list (make-c-chord 960 (list (make-c-note 4600 27 #\I 40 100 1 nil 0 0 nil))) (make-c-chord 1000 (list (make-c-note 4900 28 #\Y 40 100 1 nil 0 0 nil))) (make-c-chord 1040 (list (make-c-note 6000 35 nil 40 100 1 nil 0 0 nil)))))))))) (beats-info '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)) (beats (collect-all-chord-beat-leafs m-line)) (beats2 beats) temp) (while (and beats-info beats2) (setq temp (pop beats-info)) (while temp (if (and (listp (car temp)) (first (car temp)) (second (car temp)) (third (car temp))) (make-beat-groups (car beats2) (first (car temp)) (second (car temp)) (third (car temp)) beats) (make-beat-expr (car beats2) (car temp))) (pop temp)) (pop beats2)) m-line)) t)) (sbox 'c-score-ma-pmc-boxii 'ma-pmc2 "ma-pmc2" t 4653213 (list "()" "()")) (sbox 'c-patch-ascii-buffer 'text-win "Webern-MA2" nil 3014907 (list "(1 2)" 4) nil '#P"HD:PW 2.5.2 PPC:User-library:PWConstraints1.0:Examples:Music-analysis:Webern-MA2:Webern-MA2.lisp")) (list (list 1 0 0) (list 1 1 2)) t)