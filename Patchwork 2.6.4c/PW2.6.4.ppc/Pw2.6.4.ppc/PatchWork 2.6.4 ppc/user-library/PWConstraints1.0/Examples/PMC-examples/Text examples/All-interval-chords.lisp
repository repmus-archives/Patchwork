;===============================================;===============================================;;; PWConstraints by Mikael Laurson (c), 1995;===============================================;===============================================(in-package "PWCS");===============================================;===============================================;===============================================;     Eliot Carter: Night Fantasies     ; All interval chords, tritone in the middle, ; symmetrical inversional intervals ;===============================================(defun mk-carter-chord (rl)  (let ((high (list (pop rl))) (low (list (pop rl))))    (while rl      (push (+ (car high) (- 12 (- (car low) (car rl)))) high)      (push (pop rl) low))    (append low (nreverse high))));(mk-carter-chord '(66 60 59));(mk-carter-chord '(66 60 57 55))     ;(5.088 seconds)(time (defparameter *carter-chords*   (PMC (cons (list 66) (cons (list 60) (mapcar #'reverse (pw::expand-lst '(5* ((1_59)))))))        '((* ?1 ?2 (?if (< ?2 ?1)) "desc")          (* ?1 ?2 (?if (let ((ints (pw::x->dx (butlast l))) carter-ints carter-chord)                           (and (< (- ?1 ?2) 12)                               (not (member (mod (- ?1 ?2) 12) ints :key #'(lambda (n) (mod n 12))))                               (setq carter-chord (mk-carter-chord l))                               (setp carter-chord :key #'(lambda (n) (mod n 12)))                               (setq carter-ints (PW::x->dx carter-chord))                               (setp carter-ints)))) "carter chord"))        :rnd? nil :sols-mode :all))); 176 solutions  / 2 = 88;(length  *carter-chords*);(mapcar #'mk-carter-chord  *carter-chords*);(mapcar #'(lambda (l) (length (remove-duplicates (pw::x->dx l)))) (mapcar #'mk-carter-chord *carter-chords*))  ;(mapcar #'(lambda (l) (setp l :key #'(lambda (n) (mod n 12)))) (mapcar #'mk-carter-chord *carter-chords*))  