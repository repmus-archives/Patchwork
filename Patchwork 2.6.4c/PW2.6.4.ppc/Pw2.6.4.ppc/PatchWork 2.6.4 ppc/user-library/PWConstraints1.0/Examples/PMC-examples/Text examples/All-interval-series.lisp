;===============================================;===============================================;;; PWConstraints by Mikael Laurson (c), 1995;===============================================;===============================================(in-package "PWCS");===============================================;===============================================;     All Interval series;===============================================;3856 solutions;(58.283 seconds)(time (defparameter *AI-series*   (PMC '((0) (1 2 3 4 5 7 8 9 10 11) (1 2 3 4 5 7 8 9 10 11) (1 2 3 4 5 7 8 9 10 11)           (1 2 3 4 5 7 8 9 10 11) (1 2 3 4 5 7 8 9 10 11) (1 2 3 4 5 7 8 9 10 11)           (1 2 3 4 5 7 8 9 10 11) (1 2 3 4 5 7 8 9 10 11) (1 2 3 4 5 7 8 9 10 11)          (1 2 3 4 5 7 8 9 10 11) (6))        '((* ?1 (?if (not (member ?1 (rest rl)))) "no pitch-class dups")          (* ?1 ?2 (?if (unique-int? (mod (- ?2 ?1) 12) (rest rl) :key #'(lambda (n) (mod n 12))))              "no (modulo 12) interval duplicates 2"))        :rnd? nil :sols-mode :all)));(length *AI-series*);========================; Forward checking demo;(14.527 seconds)(time (PMC '((0) (1 2 3 4 7 8 9 10 11) (1 2 3 4 7 8 9 10 11) (1 2 3 4 7 8 9 10 11)          (1 2 3 4 7 8 9 10 11) (1 2 3 4 7 8 9 10 11) (1 2 3 4 7 8 9 10 11)         (1 2 3 4 7 8 9 10 11) (1 2 3 4 7 8 9 10 11)         (1 7 11) (5) (6))      '((* ?1 (?if (not (member ?1 (rest rl)))) "no pitch-class dups")        (* ?1 ?2 (?if (unique-int? (mod (- ?2 ?1) 12) (rest rl)                                    :key #'(lambda (n) (mod n 12))))            "no (modulo 12) interval duplicates 2")        (i1 i5 i10 (?if (member (sc-name (list i1 i5 i10)) '(3-5b)))            "indexes 1,5 and 10 -> 3-5b")        (i2 i10 (?if (member (sc-name (list i2 i10)) '(2-5)))             "indexes 2 and 10 -> 2-5"))       :sols-mode :all)); same problem, but with forward checking;(1.464 seconds)(time (PMC '((0) (1 2 3 4 7 8 9 10 11) (1 2 3 4 7 8 9 10 11) (1 2 3 4 7 8 9 10 11)          (1 2 3 4 7 8 9 10 11) (1 2 3 4 7 8 9 10 11) (1 2 3 4 7 8 9 10 11)         (1 2 3 4 7 8 9 10 11) (1 2 3 4 7 8 9 10 11)         (1 7 11) (5) (6))      '((* ?1 (?if (not (member ?1 (rest rl)))) "no pitch-class dups")        (* ?1 ?2 (?if (unique-int? (mod (- ?2 ?1) 12) (rest rl)                                    :key #'(lambda (n) (mod n 12))))            "no (modulo 12) interval duplicates 2")        (i1 i5 i10 (?if (member (sc-name (list i1 i5 i10)) '(3-5b)))            "indexes 1,5 and 10 -> 3-5b")        (i2 i10 (?if (member (sc-name (list i2 i10)) '(2-5)))             "indexes 2 and 10 -> 2-5"))       :fwc-rules       '((i1 i5 i10 (?if (member (sc-name (list i1 i5 i10)) '(3-5b)))            "indexes 1,5 and 10 -> 3-5b")        (i2 i10 (?if (member (sc-name (list i2 i10)) '(2-5)))             "indexes 2 and 10 -> 2-5"))       :sols-mode :all))