(in-package :PWCS);;----------------     IMITAION (* ?1 (?if (or (imitation?  ?1 1 1 20  2 1 -7) (imitation?  ?1 1 1 20  2 1 -6))) "imit1") ;;----------------     MELODIC (* ?1 ?2 (?if  (member (- (m ?2) (m ?1)) '(1 -1 2 -2 3 -3 4 -4 5 -5 7 -7 12 -12 8 ))) "allowed ints") (* ?1 ?2 ?3 (?if (not (eq-SC? '(3-11a 3-11b 3-10 3-12) (m ?1) (m ?2) (m ?3)))) "no triads") (* ?1 ?2 ?3 ?4 ?5 ?6 (?if (>= (length (remove-duplicates (list (m ?1) (m ?2) (m ?3) (m ?4) (m ?5) (m ?6)))) 4))    "always 4 new pitches win = 6")  (* ?1 ?2 ?3 ?4 ?5 ?6     (?if (let ((midis (list (m ?1) (m ?2) (m ?3) (m ?4) (m ?5) (m ?6))))           (<= (apply #'max (mapcar #'(lambda (midi) (count midi midis)) midis)) 2))) "win = 6 pitch dupl max = 2") (* ?1 ?2 ?3 (?if (let ((n1 (m ?1)) (n2 (m ?2)) (n3 (m ?3))) (not (and (member (abs (- n3 n1)) '(6 10 14 11 13)) (up-down-movem? n1 n2 n3)))))     "avoid reaching tritone, 7th, 9th")  (* ?1 ?2 ?3 (?if (let ((n1 (m ?1)) (n2 (m ?2)) (n3 (m ?3))) (not (and (or (> (abs (- n2 n1)) 7) (> (abs (- n3 n2)) 7)) (up-down-movem? n1 n2 n3)))))    "counter-movement")  (* ?1 ?2 ?3 (?if (ballistic? (m ?1) (m ?2) (m ?3))) "ballistic")  (* ?1 ?2 ?3 (?if (if (>= (abs (- (m ?2) (m ?1))) 7) (<= (abs (- (m ?2) (m ?3))) 2) t)) "after big jump stepwise movement")  ;(* ?1 ?2 ?3 ?4 (?if (not (and (= (m ?1) (m ?3)) (= (m ?2) (m ?4))))) "no zig-zag")   ;;-----------------    1/8 NOTE MOVEMENTS  (* ?1 ?2     (?if (if (match-rtm? (1 ((?1 1) (?2 1))))            (<= -4 (- (m ?2) (m ?1)) 2) t))    "never onbeat up jumps and  never greater onbeat down jumps than 4 with 1/8 notes")  (* ?1 ?2     (?if (if (match-rtm? (1 (1 (?1 1))))            (<= -4 (- (m ?2) (m ?1)) 4) t)) "never greater upbeat jumps than 4 with 1/8 notes")  ;; is in conflict with cambiatas !!!;; check !!! (* ?1 ?2 ?3  (?if (if (or (match-rtm? (2 (3 (?2 1))))            ; 1.                           (match-rtm? (1 (1.0 (?2 1)))))                      (if (and (or  (= (- (m ?2) (m ?1)) -1) (= (- (m ?2) (m ?1)) -2))                                 (< (durt ?2) (durt ?3)))            ; 3.                         (> (- (m ?3) (m ?2)) 0)                    ; 4.                                                            (<= (abs (- (m ?3) (m ?2))) 4))            ; 5.                     t)) "dotted or slurred upbeat 1/8 note mel rule") ;;-----------------    SKYLINE    (* ?1 ?2 ?3 ?4 (?if (let ((win 2)                           (max-skyline-jump 4)                           (skyline (skyline (l->ms l))))                       (if (>= (length skyline) 2)                         (and                           (<= (apply #'max (mapcar #'abs (pw::x->dx skyline))) max-skyline-jump)                           (setp (window-list (reverse skyline) win)))                         t))) "no skyline dups inside win and max-skyline-jump 4")  ;;------------------    VOICE-CROSSINGS (* ?1 (?if (no-voice-crossings? ?1)) "no crossings")                  (* ?1 (?if (no-unisons? ?1 nil)) "no unisons")                   ;;-------------------   VOICE-LEADING (* ?1 ?2 (?if (if (open-parallels? ?1 ?2) nil t)) "no parallels")                   (* ?2 (?if (let ((?1 (prev-item-on-downbeat ?2))) (if (and ?1 (downbeat? ?2) (downbeat-parallels? ?1 ?2)) nil t))) "no beat-parallels dist = 2 beat") (* ?1 ?2 (?if (not (hidden-parallels?   ?1 ?2 t))) "no hidden-parallels") ;(* ?1(?if (one-stepwise-chord-movem? ?1))"one-stepwise-chord-movem?") ;;-------------------   HARMONY ;; downbeat consonace or suspension (* ?D (?if (suspension-part1? ?D)) "suspension 1.  rule") (* ?1 ?2 (?if (suspension-part2? ?1 ?2)) "suspension 2.  rule")  ;; upbeat (* ?1 ?2 ?3 ?4 (?if (upbeat-dissonance? ?1 ?2 ?3 ?4)) "upbeat neighboring notes, passing notes and cambiata")  