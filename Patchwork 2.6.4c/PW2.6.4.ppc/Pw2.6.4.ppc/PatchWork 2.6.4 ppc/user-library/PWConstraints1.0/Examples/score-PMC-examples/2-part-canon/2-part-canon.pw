(in-package :pw)(make-win 'c-pw-window "2-part-canon" 2490418 16974336 (list (sbox 'c-pw-resize-x 'const "const" nil 9830424 (list "((pwcs::mk-imitation-graph 1 1 20  2 1 (-7 -6)))") 2228443) (sbox 'c-patch-polifrtm 'poly-rtm "RTM6" nil 1704151 (list "nil" "nil") nil (list '(327685 17695739 0 2 42 (10 7209969 2 31 20 21/50) (7208970 7209969 2 22 20 21/50) 3276810 18023439 "RTM6") (list (let* ((m-line (make-instance 'c-measure-line :measures (list (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1) (list (make-c-chord 0 (list (make-c-note 7200 42 nil 50 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 50 (list (make-c-note 6700 39 nil 50 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 100 (list (make-c-note 7200 42 nil 100 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1.0) (list)))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1) (list (make-c-chord 200 (list (make-c-note 6900 40 nil 75 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1.0 1) (list (make-c-chord 275 (list (make-c-note 7100 41 nil 25 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 300 (list (make-c-note 6900 40 nil 50 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 350 (list (make-c-note 7400 43 nil 100 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1.0) (list)) (beat-constructor 1 '(1) (list (make-c-chord 450 (list (make-c-note 7100 41 nil 75 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1.0 1) (list (make-c-chord 525 (list (make-c-note 7600 44 nil 25 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 550 (list (make-c-note 7400 43 nil 50 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1 1) (list (make-c-chord 600 (list (make-c-note 6900 40 nil 25 100 1 nil 0 0 nil))) (make-c-chord 625 (list (make-c-note 7100 41 nil 25 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 650 (list (make-c-note 7200 42 nil 75 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1.0 1) (list (make-c-chord 725 (list (make-c-note 7100 41 nil 25 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 750 (list (make-c-note 7400 43 nil 50 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1) (list (make-c-chord 800 (list (make-c-note 7200 42 nil 50 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 850 (list (make-c-note 6700 39 nil 50 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1 1) (list (make-c-chord 900 (list (make-c-note 7100 41 nil 25 100 1 nil 0 0 nil))) (make-c-chord 925 (list (make-c-note 7200 42 nil 25 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 950 (list (make-c-note 7400 43 nil 50 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 2 '(3 1) (list (make-c-chord 1000 (list (make-c-note 7600 44 nil 75 100 1 nil 0 0 nil))) (make-c-chord 1075 (list (make-c-note 7200 42 nil 25 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 1100 (list (make-c-note 7600 44 nil 50 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 1150 (list (make-c-note 7700 45 nil 50 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1) (list (make-c-chord 1200 (list (make-c-note 7200 42 nil 75 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1.0 1) (list (make-c-chord 1275 (list (make-c-note 7400 43 nil 25 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1 1) (list (make-c-chord 1300 (list (make-c-note 7100 41 nil 25 100 1 nil 0 0 nil))) (make-c-chord 1325 (list (make-c-note 7200 42 nil 25 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1 1) (list (make-c-chord 1350 (list (make-c-note 6900 40 nil 25 100 1 nil 0 0 nil))) (make-c-chord 1375 (list (make-c-note 7100 41 nil 25 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1) (list (make-c-chord 1400 (list (make-c-note 6900 40 nil 50 100 1 nil 0 0 nil))))) (beat-constructor 2 '(1) (list (make-c-chord 1450 (list (make-c-note 7400 43 nil 100 100 1 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 1550 (list (make-c-note 7300 42 #\Y 50 100 1 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 4 '(1) (list (make-c-chord 1600 (list (make-c-note 7400 43 nil 200 100 1 nil 0 0 nil)))))))))) (beats-info '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ((note-staccato 31 31)) ((note-staccato 32 32)) ((note-staccato 33 33)))) (beats (collect-all-chord-beat-leafs m-line)) (beats2 beats) temp) (while (and beats-info beats2) (setq temp (pop beats-info)) (while temp (if (and (listp (car temp)) (first (car temp)) (second (car temp)) (third (car temp))) (make-beat-groups (car beats2) (first (car temp)) (second (car temp)) (third (car temp)) beats) (make-beat-expr (car beats2) (car temp))) (pop temp)) (pop beats2)) m-line) (let* ((m-line (make-instance 'c-measure-line :measures (list (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 3 '(-1) (list)) (beat-constructor 1 '(1) (list (make-c-chord 150 (list (make-c-note 6500 38 nil 50 100 2 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1) (list (make-c-chord 200 (list (make-c-note 6000 35 nil 50 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 250 (list (make-c-note 6500 38 nil 100 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1.0) (list)) (beat-constructor 1 '(1) (list (make-c-chord 350 (list (make-c-note 6200 36 nil 75 100 2 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1.0 1) (list (make-c-chord 425 (list (make-c-note 6400 37 nil 25 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 450 (list (make-c-note 6200 36 nil 50 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 500 (list (make-c-note 6700 39 nil 100 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1.0) (list)))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1) (list (make-c-chord 600 (list (make-c-note 6500 38 nil 75 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1.0 1) (list (make-c-chord 675 (list (make-c-note 6900 40 nil 25 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 700 (list (make-c-note 6700 39 nil 50 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1 1) (list (make-c-chord 750 (list (make-c-note 6200 36 nil 25 100 2 nil 0 0 nil))) (make-c-chord 775 (list (make-c-note 6400 37 nil 25 100 2 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1) (list (make-c-chord 800 (list (make-c-note 6500 38 nil 75 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1.0 1) (list (make-c-chord 875 (list (make-c-note 6400 37 nil 25 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 900 (list (make-c-note 6700 39 nil 50 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 950 (list (make-c-note 6500 38 nil 50 100 2 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1) (list (make-c-chord 1000 (list (make-c-note 6000 35 nil 50 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1 1) (list (make-c-chord 1050 (list (make-c-note 6400 37 nil 25 100 2 nil 0 0 nil))) (make-c-chord 1075 (list (make-c-note 6500 38 nil 25 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 1100 (list (make-c-note 6700 39 nil 50 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 1150 (list (make-c-note 6900 40 nil 75 100 2 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 1 '(1.0 1) (list (make-c-chord 1225 (list (make-c-note 6400 37 nil 25 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1 1) (list (make-c-chord 1250 (list (make-c-note 6500 38 nil 25 100 2 nil 0 0 nil))) (make-c-chord 1275 (list (make-c-note 6200 36 nil 25 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 1300 (list (make-c-note 6400 37 nil 50 100 2 nil 0 0 nil))))) (beat-constructor 1 '(1) (list (make-c-chord 1350 (list (make-c-note 6000 35 nil 50 100 2 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 2 '(1) (list (make-c-chord 1400 (list (make-c-note 6500 38 nil 100 100 2 nil 0 0 nil))))) (beat-constructor 2 '(1) (list (make-c-chord 1500 (list (make-c-note 6400 37 nil 100 100 2 nil 0 0 nil))))))) (make-instance 'c-measure :low "4" :metronome 60 :metronome-unit 2 :beat-objects (list (beat-constructor 4 '(1) (list (make-c-chord 1600 (list (make-c-note 6200 36 nil 200 100 2 nil 0 0 nil)))))))))) (beats-info '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ((note-staccato 27 27)) ((note-staccato 28 28)))) (beats (collect-all-chord-beat-leafs m-line)) (beats2 beats) temp) (while (and beats-info beats2) (setq temp (pop beats-info)) (while temp (if (and (listp (car temp)) (first (car temp)) (second (car temp)) (third (car temp))) (make-beat-groups (car beats2) (first (car temp)) (second (car temp)) (third (car temp)) beats) (make-beat-expr (car beats2) (car temp))) (pop temp)) (pop beats2)) m-line)) t)) (sbox 'c-patch-ascii-buffer 'text-win "2-part-canon-fwc-rules" nil 6881633 (list "(1 2)" 4) nil '#P"HD:PW 2.5.2 PPC:User-library:PWConstraints1.0:Examples:score-PMC-examples:2-part-canon:2-part-canon-fwc-rules.lisp") (sbox 'c-score-pmc-box 'score-pmc "score-pmc" t 7471362 (list "()" "()" "()" "()" "()" "()" "()" "()" ":once" 1 1)) (sbox 'c-pw-resize-x 'const "const" nil 10092899 (list "(0 2 4 5 7 9 11)") 2228338) (sbox 'c-patch-ascii-buffer 'text-win "2-part-canon-rules" nil 6881433 (list "(1 2)" 4) nil '#P"HD:PW 2.5.2 PPC:User-library:PWConstraints1.0:Examples:score-PMC-examples:2-part-canon:2-part-canon-rules.lisp") (sbox 'c-pw-resize-x 'const "const" nil 4194590 (list "((60 79) (52 74))") 2228346)) (list (list 3 0 1) (list 3 1 6) (list 3 2 5) (list 3 3 2) (list 3 6 0) (list 3 7 4)) t)