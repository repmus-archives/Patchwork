(in-package :pw)(defmethod view-draw-contents ((self C-ttybox-out))  ;;;(with-focused-view self  ;;modified 920818 [Camilo] (with-font-focused-view self       (draw-string 3 9 (dialog-item-text self))   (draw-rect 0 0 (w self)(h self))))(defmethod view-draw-contents ((self C-multi-bpf-view))  (set-pen-pattern self *dark-gray-pattern*)  (when (show-bpf-grid-fl self) (view-draw-axis self))  (with-focused-view self    (let ((bpfs (break-point-functions self)))      (while bpfs         (draw-bpf-function   (pop bpfs) self nil (h-view-scaler self)(v-view-scaler self)))))  (set-pen-pattern self *black-pattern*)  (call-next-method))(defmethod print-draw-contents ((self C-multi-bpf-view))  (set-pen-pattern self *dark-gray-pattern*)  (when (show-bpf-grid-fl self) (view-draw-axis self))  (with-focused-view self    (dolist (bpf (break-point-functions self))      (draw-bpf-function bpf self nil (h-view-scaler self)(v-view-scaler self))))  (set-pen-pattern self *black-pattern*)  (call-next-method))(defparameter *current-rtm-editor-win* ())(defmethod view-draw-contents :before ((self C-beat-editor-collection))  (setf *current-rtm-editor-win* (view-window self))  (when (pwcs::read-key (analysis-info self) :sorted-variables)    (mapc #'(lambda (sv)              (when (pwcs::read-key sv :PW-note)                (pwcs::write-key (extra (pwcs::read-key sv :PW-note)) :x ())))          (pwcs::read-key (analysis-info self) :sorted-variables))))(in-package "C-PATCH-FILE-BUFFER")(defmethod pw::open-patch-win ((self C-patch-file-buffer) )  (let ((win (fred-win self)))    (if (and win (wptr win))       (window-select (fred-win self)))))(defmethod pw::decompile ((self C-patch-file-buffer))  (append (call-next-method) `(nil ',(file-name self))))(in-package "PW"); for RTM;; old-code was drawing RTMs twice(defmethod zoom-beat ((self C-beat-editor-collection) ctrl)  (invalidate-corners self (make-point 0 0) (view-size self))  (tell (beat-editors self) 'set-beat-zoom (max .1 (/ (value ctrl) 100)))  (event-dispatch)  (window-update-event-handler (view-window self)))(defmethod scroll-beat ((self C-beat-editor-collection) ctrl)  (invalidate-corners self (make-point 0 0) (view-size self))  (when (numberp ctrl) (set-dialog-item-text-from-dialog (beat-number-ctrl self) (format nil "~5D" (1+ ctrl))))  (tell (beat-editors self) 'set-first-beat-num (if (numberp ctrl) ctrl (1-  (value ctrl))))  (event-dispatch)  (window-update-event-handler (view-window self)))(defmethod update-staff-count-number ((self C-beat-editor-collection) item)  (invalidate-corners self (make-point 0 0) (view-size self))  (setf (visible-staffs-count self) (max  1 (value item)))  (resize-new-rtm-w self ())  (event-dispatch)  (window-update-event-handler (view-window self)));;from environment:midi-note.lisp(defun quantize-chords (list)  (let ((chords)(notes-on)(res-temp)(time-now)(tolerance 10))    (while list      (when (and (fourth (car list)) (second (car list))                 (not (= 0 (fourth (car list))))(> (second (car list)) 143)) ;  only note-on           (push (car list) notes-on))       (pop list))    (setq notes-on (nreverse notes-on))    (while notes-on      (setq res-temp (list (setq time-now (caar notes-on))))      (push (cdar notes-on) res-temp)      (pop notes-on)      (while (and notes-on (caar notes-on) (< (- (caar notes-on) time-now) tolerance))          (push (cdar notes-on) res-temp)         (pop notes-on))      (push (nreverse res-temp) chords))     (nreverse chords)));(make-chord-object  '(6000 6700 7200) 0)(defun merge-staffs (m-lines)   (let ((m-line-new (eval (decompile (first m-lines))))         (chords-ls (mapcar #'(lambda (ml)                           (mapcar #'beat-chord (collect-all-chord-beat-leafs ml))) m-lines))         (ch-pointer 0) midics)     (dolist (beat-leaf (collect-all-chord-beat-leafs m-line-new))        (setq midics ())        (dolist (chords chords-ls)            (push (midic (car (notes (nth ch-pointer chords)))) midics))        (setf (beat-chord  beat-leaf) (make-chord-object  (nreverse midics) 0) )        (incf ch-pointer))    m-line-new))