(in-package "PWCS");======================;PMC utilities ; OK!(defparameter *PMC-utility-fns*'(pw::PMC cur-index cur-slen read-key write-key engine)) ;======================;Lisp utilities ; OK!(defparameter *Lisp-utility-fns*(sort '(setp window-list inds->vals eq-ints? find-all imbricate  ; sort<group   map-group-pos? count-adjacent-itemsunique-int? unique-ints? unique-cell2? unique-cell3? ; unique-cell1?)  #'string< :key #'(lambda (n) (string n))));======================;PC-set-theory utilities OK!(defparameter *PC-set-theory-utility-fns*(sort '(prime card ICV SC-name SC+off eq-SC? subsets supersets sub/supersets all-subs)   #'string< :key #'(lambda (n) (string n))));======================;PWCS example utilities OK!(defparameter *PWCS-example-utility-fns*'(make-note-rangescheck-chain? mk-chain-index-rules check-stats? SC-distribution interval-distribution +-distributioncount-statsatleast-cnt-checkdata-group-of-part sp-partnumreduce-mel part-arc-lens skyline              ;contour inv-contour tol-equal s-contours eq-subcontour?  ??));======================;score-PMC utilities(defparameter *score-PMC-utility-fns*'(pw::score-PMCpart-collectionm nindex mindexbeat measure hc hslice beatnum measurenum partnum   hc-midis l->ms startt endt durt  attack-item? attack-items? collect-only-attacks  rtm-pattern match-rtm? ;match-rtm3?  ?? voice-count bass-num bass-item? give-bass-item sop-item?rest-item? prev-rest? one-prev-rests?last-measure? nextto-last-measure? last-item?constraint? constraints? one-constraint?complete-chord?downbeat? on-main-beat? prev-item-on-downbeat prev-item-on-downbeat-2));======================;score-PMC misc utilities(defparameter *score-PMC-misc-utility-fns*'(no-voice-crossings? no-bass-crossings? no-sop-crossings? no-unisons? no-parts-voice-crossings?  inside-voice-distance? ; Magnus  ;no-pc-duplic-in-prev-slices ; Bach?; Paavoprev-long-note-midisparallel-movements?  no-chord-duplicates? ;Magnusvertical-interval-range?vertical-intervals?search-n-mel-movesoctaves?no-voice-octaves?;two-staffs-ambitus two-staffs-ints; mk-imitation-graph ;;all-vect-prev-s-vars all-vect-prev-sols ??));======================;score-PMC counterpoint utilities(defparameter *score-PMC-counterpoint-utility-fns*'(;; no-parallel-maj-thirds?  no-same-direction-jumps?   ballistic?   ; voice-leading ;;one-stepwise-chord-movem?  check-parallels? open-parallels? downbeat-parallels?  hidden-parallels? ;shifted-accent-parallels?; harmonicdissonant-bass-int? dissonant-upper-int? harmonic-dissonance?match-upbeat-rtm?cambiata-ints? cambiata-rtm? scale-movem? side-movem?upbeat-dissonance?suspension-rtm-match? harmonic-dissonance2?suspension-part1? suspension-part2?imitation?));======================;score-PMC group utilities(defparameter *score-PMC-group-utility-fns*'(note-in-group-at-pos? note-found-in-nth-group?prev-group-svars prev-group-midisgroup-at-pos-svars group-at-pos-midis))#|(length (pw::flat  (list  *PMC-utility-fns*  *Lisp-utility-fns*  *PC-set-theory-utility-fns*  *PWCS-example-utility-fns*  *score-PMC-utility-fns*  *score-PMC-misc-utility-fns*  *score-PMC-counterpoint-utility-fns*  *score-PMC-group-utility-fns*  )))|#