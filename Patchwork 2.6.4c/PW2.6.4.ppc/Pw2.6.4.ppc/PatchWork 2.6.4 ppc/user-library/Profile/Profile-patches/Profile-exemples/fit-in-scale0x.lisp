(pw::defunp fit-in-scale0  ((pits midic) (scale midic) &optional (mod fix>=0 (:value 12))) list            "  "  (let* ((modsca (pw::g-floor (pw::sort-list (pw::rem-dups (pw::g-mod (pw::g/ scale (/ 100 (/ mod 12))) mod)))))         (pitmods (pw::g-mod (pw::g/ pits (/ 100 (/ mod 12))) mod))         (octa (octave pits))         (posdifs (mapcar #'(lambda (p) (position (pw::g-min (pw::g-abs (pw::g- modsca p)))                                                  (pw::g-abs (pw::g- modsca p))))                          pitmods)))    (mapcar #'(lambda (index octave) (makenote  index octave mod))            (pw::posn-match modsca posdifs)            octa)))(pw::defunp octave ((midic midic)) numbers?            "retourne l'octave à partir de c3=octave 3"  (let ((midic (pw::list! midic)))    (mapcar #'(lambda (x) (pw::g- (pw::g-div x 1200) 2) ) midic)))(pw::defunp makenote ((index fix>=0) (octave fix/float)                       &optional (mod fix>=0 (:value 12))) numbers?            " construction d'une note à partir des données de index, octave e modulo du index"  (+ (/ (* index 100 12) mod) (* (+ 2 octave) 1200)))(makenote 2 1)