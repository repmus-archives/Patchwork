;;; redef de RTM pour prendre en compte les durées des objets chords en entrée.(in-package :pw)(defmethod patch-value ((self C-patch-score-voice) obj)  (if (value self)     (measure-line self)    (let* ((inputs (input-objects self))           (objs (and (fifth inputs) (patch-value (fifth inputs) obj)))           (in-chords (patch-value (third inputs) obj))           (tempi (expand-lists (patch-value (fourth inputs) obj)))           (chords (if (subtypep (type-of in-chords) 'C-chord-line)                         (chords in-chords)  (construct-chords  (list! in-chords))))          (measure-line (measure-line self))          measures chord-objects)      (if objs         (setq measures (get-measure-object objs))        (let* ((in-signs (patch-value (first inputs) obj))               (beats (expand-lists (patch-value (second inputs) obj)))               (x-signs (expand-lists in-signs))               (signs (if (consp (car x-signs)) x-signs (list x-signs)))               (default-sign (car (last signs)))               (default-beat (car (last beats)))               (def-tempo (car (last tempi)))               (meas-beat-count (caar signs))               beat-objs               (meas-sign (pop signs))               the-beat already-warned)          (when (and (numberp default-beat) (minusp default-beat))            (setq default-beat (abs default-beat)))          (while (or (setq the-beat (pop beats)) chords)            (unless the-beat              (setq the-beat default-beat))            (cond ( ; (zerop meas-beat-count)                   ; ----- GAS 110493. alllow for small rounding error                   (or (zerop meas-beat-count) (< (abs meas-beat-count) 1.0e-10))                   (setf meas-beat-count 0)                   ; ----- GAS 110493. alllow for small rounding error                   (push (make-measure (low-of meas-sign) (nreverse beat-objs)                                        (or (pop tempi) def-tempo)) measures)                   (setq meas-sign (or (pop signs) default-sign) meas-beat-count (car meas-sign)                         beat-objs nil))                  ((minusp meas-beat-count)                   (if (cdr signs)                     (error "measures ~S and beats do not agree" meas-sign)                     (progn                       (unless already-warned                         (ed-beep)                         (warn "measures ~S and beats do not agree. Measure(s) will be changed" meas-sign)                         (setq already-warned t))                       (push (make-measure (low-of meas-sign) (nreverse beat-objs)                                            (or (pop tempi) def-tempo)) measures)                       (setq meas-sign (or (pop signs) default-sign) meas-beat-count (car meas-sign)                             beat-objs nil)))))            (push (multiple-value-bind (beat rest-chords)                                       (beat-constructor (beats-of the-beat) (division-of the-beat) chords)                    (setq chords rest-chords) beat) beat-objs)            (decf meas-beat-count (beats-of the-beat)))          (if beat-objs (push (make-measure (low-of meas-sign) (nreverse beat-objs) def-tempo) measures))          (setq measures (nreverse measures))))      (when (not (wptr (application-object self)))        (setf (application-object self) (make-application-object self))        (put-window-state self (application-object self) (window-state self)))      (unless (listp measures) (setq measures (list measures)))      (setf (measures measure-line) measures)      (if objs         (progn            (setq chord-objects                   (ask-all (collect-all-chord-beat-leafs (measure-line self)) 'beat-chord))            (setq chords (put-in-grace-notes (extra-measure-stuff (car measures)) chords))            (dolist (chord chords)              (unless chord-objects (return nil))              (setf (notes (car chord-objects)) (notes chord))              (update-chord (pop chord-objects)))))      ;(rtm-dim measure-line 7) ;;;to be refined for keeping note durs!!      (with-focused-view (application-object self)         (erase+view-draw-contents (application-object self)))      (make-instance 'C-measure-line :measures (measures measure-line))        )))