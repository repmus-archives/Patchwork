;;;; Modifications to SITUATION, version 1.0;;(in-package :hd-constraints);;corrects a bug when there are no constraints...[Camilo 940428](defun compute-max-advance (constraints)  (apply 'max (or (pw::ask-all constraints 'advance) '(1))));;Better to give the user the whole calculated sequence in OTHER(pw::defunp constraint ((patch list (:value '() :type-list nil))                        (i1 fix>=0) (i2 fix>=0)                        &optional (vars menu                            (:menu-box-list (("seq" . 1) ("fix". 2) ("all". 3))                             :type-list (no-connection)))) nil"constructs a constraint object given a predicate (the function returned by patch) and two variable indexes <i1> and <i2>. The constraint is tested (by evaluating <patch>)for elements of the sequence corresponding to these indexes. The optional <vars> argument specifies whether the indexes are movedalong the sequence ('seq'), are only those given ('fix') or are ignored becauseall pairs in the sequence are tested with the constraint ('all'). "  (make-user-constraint      :rule-name  (format () "C~A" (gensym))   :choose-pred (case vars                   (2 #'(lambda (tx sx) (and (= sx (min i1 i2)) (= tx (max i1 i2)))))                  (3 #'(lambda (tx sx)  (declare (ignore sx tx)) t))                  (otherwise #'(lambda (tx sx) (= (- tx sx) (- (max i1 i2) (min i1 i2)))))                  )   :test-level 10   :advance (if (= vars 3) most-positive-fixnum (abs (- i2 i1)))   :predicate #'(lambda (tx sx &rest instances)                  (setf (item2 *the-user-general-object*) (first  instances))                  (setf (item1 *the-user-general-object*) (second instances))                  (setf (other *the-user-general-object*) instances)  ;;(nthcdr 2 instances)                  (setf (i1 *the-user-general-object*) sx)                  (setf (i2 *the-user-general-object*) tx)                  (setf (h-table *the-user-general-object*) soft-constr::*solution-hash-table*)                  (funcall patch *the-user-general-object*))))