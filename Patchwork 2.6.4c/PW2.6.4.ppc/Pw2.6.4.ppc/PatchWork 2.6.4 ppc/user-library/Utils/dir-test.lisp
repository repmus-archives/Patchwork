(in-package "PW");pour tester des directories (dates de fichiers, nom différents etc...;LP 1/1994(defun list-files-red (dir &optional ext)"returns list of all file names in all subdirectories"(mapcar #'(lambda (elt) (concatenate 'string (ccl::pathname-name elt)                                    (path-type-str elt)))(directory (concatenate 'string dir                        (if ext (format () "**;*.~A" ext) "**:*")))))(defun path-type-str (path)"retourne '' si le fichier de nom path n'a pas d'extension, retourne '.ext' sinon"  (if (stringp (ccl::pathname-type path))    (concatenate 'string  "." (ccl::pathname-type path))""))(defun utime->date (utime)  (multiple-value-bind (sec min h jour mois an)(decode-universal-time utime)    sec    (list jour mois an h min)));(decode-universal-time 2966866172);(utime->date 2966866172)(defun comp-dats (dir1 dir2)  (when (and dir1 dir2)(format t "scanning ~S and ~S ...." (ccl::mac-namestring dir1)(ccl::mac-namestring dir2))        (let* ((files1 (list-files-red dir1))               (files2 (list-files-red dir2))               (dats-fl1 (mapcar #'ccl::file-write-date (list-files dir1)))               (dats-fl2 (mapcar #'ccl::file-write-date (list-files dir2)))               (Ldiffrst ())(Ldatsdiffrst ()) n)          (format t "done~%")          (dotimes (i (length files1))            (if (setf n (position (nth i files1) files2 :test 'equal))              ()              (push (list (nth i files1)()) Ldiffrst)))          (dotimes (j (length files2))            (if (setf n (position (nth j files2) files1 :test 'equal))              (if (equal (nth j dats-fl2)(nth n dats-fl1))                ()                (push (list (nth n files1)(utime->date (nth n dats-fl1))                            (nth j files2)(utime->date (nth j dats-fl2)))                       Ldatsdiffrst))              (push (list ()(nth j files2)) Ldiffrst)))          (format t "~% liste de valeurs différentes :~% ~S ~%" Ldiffrst)          (format t "~% liste de valeurs de dates différentes :~% ~S ~%" Ldatsdiffrst)))())#|(comp-dats (CCL:choose-directory-dialog             :directory (ccl:mac-namestring "PW-LIB:"))           (CCL:choose-directory-dialog             :directory (ccl:mac-namestring "PW-LIB:")))|#;(path-type-str (first (directory "170:Languages:PW 2.0:User-library:Csound-edit-sco:getstarted:Worksheet")));(path-type-str (first (directory "ogmios-Languages:Languages:PW 2.0:User-library:Csound-edit-sco:environment:edit-sco-menu")));(position "add/csound/edit-sco" '("add/csound/edit-sco" 2 3) :test 'equal);(list-files-red (directory "ogmios-Languages:Languages:PW 2.0:User-library:Csound-edit-sco:environment:edit-sco-menu"));(ccl::pathname-type (first (directory "170:Languages:PW 2.0:User-library:Csound-edit-sco:getstarted:Worksheet")));(ccl::pathname-name (first (directory "ogmios-Languages:Languages:PW 2.0:User-library:Csound-edit-sco:environment:edit-sco-menu")))(defun min-dats (dir)  (when dir (format t "scanning ~S ...." (ccl::mac-namestring dir))        (let ((filreds (list-files-red dir))              (files (list-files dir))              (Lresult ())              (min (get-string-from-user "date min? : format 14 07 1789" ))              datmin date)          (setf datmin                (with-input-from-string (term min)                  (encode-universal-time  0 0 0 (read term nil)                                          (read term nil)                                          (read term nil))))          (dolist (file files (print-lp-02 Lresult))            (setf date (ccl::file-write-date file))            (if (< datmin date)(push (list                                       (giv-date date)                                      (pop filreds)) Lresult)(pop filreds))))))#||#(defun giv-date (date)  (multiple-value-bind (sec mn hr jour mois an journ etc etc2)                        (decode-universal-time date)    (declare (ignore sec mn hr  journ etc etc2)) (list jour  mois  an)));(giv-date 4567894561)(defun print-lp-02 (liste)  (dolist (elt liste)    (format t "~%~a~%      ~a" (second elt)(first elt))));*****************************************************(defun addtoname (filename string)  (rename-file filename (concatenate 'string filename string)))(defun addtonames (dir string)"pour ajouter une extension (ou un string quelconque) aux noms des fichiersd'un directory" (when dir (format t "scanning ~S ...." (ccl::mac-namestring dir))        (let ((files (list-files dir)))          (dolist (file files)          (addtoname file string)))));;(addtonames (CCL:choose-directory-dialog ) "5");*****************************************************(defun comp-texts-whenloaded (fil1 fil2)  (let ((Ltext1 (print (ccl::read-file-to-list fil1)))        (Ltext2 (print (ccl::read-file-to-list fil2)))        (L ()))    (while Ltext1      (if (find  (car Ltext1) Ltext2 :test 'equal)        (setf Ltext2 (remove (pop Ltext1) Ltext2 :test 'equal))        (push (pop Ltext1) L)))    (setf L (list fil1 "---->" L (list fil1) "--->" Ltext2))));(comp-texts (CCL:choose-file-dialog )(CCL:choose-file-dialog ))(defun comp-texts (fil1 fil2)  ;;pas encore au point!!!!!!!!!!  (let ((L ()) temp1 temp2)  (with-open-file (tex1 fil1 :direction :input)    (with-open-file (tex2 fil2 :direction :input :if-does-not-exist nil)      (while (or (setf temp1 (read-line tex1 nil)) (setf temp2 (read-line tex2 nil)))        (if (equal temp1 temp2)()(push (list temp1 temp2) L))))) L))