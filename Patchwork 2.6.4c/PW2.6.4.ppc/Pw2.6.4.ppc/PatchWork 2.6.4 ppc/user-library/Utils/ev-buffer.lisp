(in-package "PW");**********************************************************;************* from ML ************************************;-----pour des fonctions random multi-évaluées-------------(defclass C-eval-buffer (C-patch)     ((box-len :initform 0 :accessor box-len)    (mod-counter :initform 0 :accessor mod-counter)    (last-value :initform 0 :accessor last-value))) (defmethod patch-value ((self C-eval-buffer) obj)  (if (= (box-len self) 0)    (patch-value (car (input-objects self)) obj)    (progn      (incf (mod-counter self))      (if (/= (mod (mod-counter self) (box-len self)) 0)        (last-value self)        (progn          (setf (last-value self)  (patch-value (car (input-objects self)) obj))           (last-value self))))))(defmethod connected-inputs-count ((self C-patch) patch)  (if (member patch (input-objects self) :test 'eq)    (count  patch (input-objects self))    0))(defmethod init-patch ((self C-eval-buffer))  (call-next-method)  (setf (box-len self)      (apply #'+ (ask-all (controls (view-window self)) #'connected-inputs-count self)))  (setf (mod-counter self) -1))(defunp ev-buffer  ((val nilNum)) nil"This module assures that all the modules that are connected to its output receive the same values. "  (declare (ignore val)))(pw-addmenu-fun *Utils-lp* 'ev-buffer 'C-eval-buffer);===================================(defclass C-init-patch-box (C-patch) ())   (defmethod patch-value ((self  C-init-patch-box) obj)  (tell (input-objects self) #'init-patch)  (patch-value (car (input-objects self)) obj))(defunp initpatch  ((val nilNum)) nil"Sends init-patch method"  (declare (ignore val)))(pw-addmenu-fun *Utils-lp* 'initpatch 'C-init-patch-box);===================================