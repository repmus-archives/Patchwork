; pour écrire des script pour iana, modres, csound, unix;********************************************************(defpackage "MK-SC"(:use "COMMON-LISP" "CCL")(:import-from "PATCH-WORK" "DEFUNP" "PW-ADDMENU")(:export "fenetre" "tx-ech" "nom-fich" "nom-ss-typ"))(in-package "MK-SC")(defun path-type-str (path)"retourne '' si le fichier de nom path n'a pas d'extension, retourne '.ext' sinon"  (if (stringp (ccl::pathname-type path))    (concatenate 'string  "." (ccl::pathname-type path))""))(defunp fenetre ((taux menu (:menu-box-list (("4KS" . " -d4KS") ("8KS". " -d8KS")))))        list "taux d'échantillonnage en kilosamples" taux)(defunp tx-ech ((taux menu (:menu-box-list (("16" . " -R16000")("32". " -R32000")("44.1". " -R44100")("48". " -R48000")))))        list "taux d'échantillonnage en kilosamples"  taux)(defun nom-ss-typ (nom-fich)  (let ((n (position  #\. nom-fich :test 'equal)))    (if n (reverse (subseq (reverse nom-fich) (- (length nom-fich) n)))        nom-fich)));************************************************; nouvelle classe pour gestion écriture fichier(defclass c-filname (pw::c-patch) ((popUpBox :initform nil :accessor popUpBox)))(defclass c-filpath (c-filname) ((popUpBox :initform nil :accessor popUpBox)))(defclass c-filpwr (c-filname) ((popUpBox :initform nil :accessor popUpBox)))(defunp filnam ((fil-name list (:value '()))) nil "donne en résultat le nom (avec l'extension) du fichierindiqué en entrée. Si l'entrée est nil, il demande alors de choisirun fichier et place le résultat en entrée  "  (pw::declare (pw::ignore fil-name)))(defunp filpat ((fil-name list (:value '()))) nil "donne en résultat le nom (avec all pathname) du fichierindiqué en entrée. Si l'entrée est nil, il demande alors de choisirun fichier et place le résultat en entrée  "  (pw::declare (pw::ignore fil-name)))(defunp filpwr ((fil-name list (:value '()))) nil "donne en résultat le nom (avec all pathname) du fichierindiqué en entrée. Si l'entrée est nil, il demande alors de choisirun fichier et place le résultat en entrée  "  (pw::declare (pw::ignore fil-name)))(defvar *x-source-popUpMenu*  (pw::new-menu " "                (pw::new-leafmenu "Set File"                                   #'(lambda() (set-source-file pw::*target-action-object*)))))(defmethod pw::initialize-instance :after ((self c-filname) &key controls)  (declare (ignore controls))  (setf (popUpBox self)        (pw::make-popUpbox "m" self                           *x-source-popUpMenu*                           :view-position (make-point (- (pw::w self) 9)                                                      (- (pw::h self) 11))                           :view-container self                           :view-font '("monaco"  9  :srcor))))(defmethod set-source-file ((self c-filname))  (let ((filename (CCL:CHOOSE-FILE-DIALOG  :button-string "file?")))    (setf filename (concatenate 'string (pathname-name  filename)                                (path-type-str filename)))    (when filename      (pw::set-dialog-item-text (first (pw::pw-controls self))                                 (coerce (apply #'append                                               (list  (list #\")                                                       (coerce  (mac-namestring filename) 'list )                                                       (list #\") )) 'string)))))(defmethod set-source-file ((self c-filpath))  (let ((filename (CCL:CHOOSE-FILE-DIALOG  :button-string "file?")))    (setf filename (coerce (apply #'append (list (coerce  (mac-namestring filename) 'list )                                                  )) 'string))    (when filename      (pw::set-dialog-item-text (first (pw::pw-controls self))                                 (coerce (apply #'append                                               (list   (list #\")                                                       (coerce  (mac-namestring filename) 'list )                                                        (list #\"))) 'string)))))(defmethod set-source-file ((self c-filpwr))  (let ((filename (CCL:choose-new-file-dialog ;;;;;;;;;;:directory (directoryp *lastcsdfile*)                                              :button-string "file" :prompt "File to save?")))    (setf filename (coerce (apply #'append (list (coerce  (mac-namestring filename) 'list )                                                  )) 'string))    (when filename      (pw::set-dialog-item-text (first (pw::pw-controls self))                                 (coerce (apply #'append                                               (list   (list #\")                                                       (coerce  (mac-namestring filename) 'list )                                                        (list #\"))) 'string)))))(defmethod pw::patch-value ((self c-filname) obj)  (let ((filename (pw::patch-value (first (pw::input-objects self)) obj)))    (unless filename      (setf filename (CCL:CHOOSE-FILE-DIALOG  :button-string "file?"))      (setf filename (concatenate 'string (pathname-name  filename)                                  (path-type-str filename))))    (when filename      (progn (pw::set-dialog-item-text (first (pw::pw-controls self))                                        (coerce (apply #'append (list  (list #\")                                                                       (coerce  (mac-namestring filename) 'list )                                                                       (list #\"))) 'string))             (setf filename (concatenate 'string (pathname-name  filename)                                         (path-type-str filename)))))    filename))(defmethod pw::patch-value ((self c-filpath) obj)  (let ((filename (pw::patch-value (first (pw::input-objects self)) obj)))    (unless filename      (setf filename (CCL:CHOOSE-FILE-DIALOG  :button-string "file?"))      (setf filename (coerce (apply #'append                                    (list                                       (coerce  (mac-namestring filename) 'list )                                      )) 'string)))    (when filename      (progn (pw::set-dialog-item-text (first (pw::pw-controls self))                                        (coerce (apply #'append (list  (list #\")                                                                       (coerce  (mac-namestring filename) 'list )                                                                       (list #\"))) 'string))))    filename))(defmethod pw::patch-value ((self c-filpwr) obj)  (let ((filename (pw::patch-value (first (pw::input-objects self)) obj)))    (unless filename      (setf filename (CCL:choose-new-file-dialog ;;;;;;;:directory (directoryp *lastcsdfile*)                      :button-string "file" :prompt "Save file?"))      (setf filename (coerce (apply #'append                                    (list                                       (coerce  (mac-namestring filename) 'list )                                      )) 'string)))    (when filename      (progn (pw::set-dialog-item-text (first (pw::pw-controls self))                                        (coerce (apply #'append (list  (list #\")                                                                       (coerce  (mac-namestring filename) 'list )                                                                       (list #\"))) 'string))))    filename));(setf *coin* (CCL:CHOOSE-FILE-DIALOG  :button-string "file?"));(coerce  (mac-namestring *coin*) 'list )(pw::add-menu-items pw::*Utils-lp* (pw::new-leafmenu "-" ()))(pw::pw-addmenu-fun pw::*Utils-lp* 'mk-sc::filnam 'mk-sc::c-filname)(pw::pw-addmenu-fun pw::*Utils-lp* 'mk-sc::filpat 'mk-sc::c-filpath)(pw::pw-addmenu-fun pw::*Utils-lp* 'mk-sc::filpwr 'mk-sc::c-filpwr)(pw::pw-addmenu-fun pw::*Utils-lp* 'mk-sc::tx-ech 'mk-sc::tx-ech)(pw::pw-addmenu-fun pw::*Utils-lp* 'mk-sc::fenetre 'mk-sc::fenetre)