(in-package "CLPF-Util")(ccl::export '(compile-file-again pw-update-all pw-fasl-files pw-fasl-delete));; this is useful in order to force recompiling; when porting patchwork between various machine with different directory(defun compile-file-again (file)  "Compiles <file> even if not needed"  (let* ((infile (merge-pathnames file "*.Lisp"))         (outfile (compile-file-pathname infile)))    (unless (probe-file outfile)      (compile-file infile :output-file outfile :verbose t) )));; updating the whole environment(defun pw-update-all ()  (mapc #'|CLPF-Util|:compile-file-again  (list*  "PW:PW-Music;Load+Update;Music-package"  "PW:PW-Load+Update;PW-kernel-package"  (append PW::*PW-Music-files*           epw::*EPW-files*          PW::*PW-kernel-files*))));;(update-all);; prints all fasl files in al PW subdirectories(defun pw-fasl-files ()(directory (concatenate 'string (mac-namestring "PW:")                         "**:*.fasl")));; deletes all fasl files in all PW subdirectories(defun pw-fasl-delete ()(mapc #'delete-file (directory (concatenate 'string (ccl:mac-namestring "PW:")                         "**:*.fasl"))));; (fasl-delete);; prints all files in all  subdirectories or only files with given extension(defun list-files (dir &optional ext)"returns list of all file names in all subdirectories"(mapcar #'ccl::mac-namestring (directory (concatenate 'string dir                        (if ext (format () "**;*.~A" ext) "**:*")))));; strip a pathname and returns file name(defunp strip-pathname (pathname string)  (let (pos1 pos2 subname)    (setf pos1 (position #\: pathname :from-end t));; strip off pathname    (setf pos2 (position #\; pathname :from-end t)) ;; strip off pathname    (cond ((and pos1 pos2)            (setf subname (subseq pathname (if (> pos1 pos2) (1+ pos1) (1+ pos2)))))          (pos1 (setf subname (subseq pathname (1+ pos1 ))))           (pos2 (setf subname (subseq pathname (1+ pos2 ))))           )    subname))(defunp strip-ext (filename)  (let (pos subname)    (setf pos (position #\. filename :from-end t)) ;; strip off extension    (setf subname (if pos (subseq filename 0 pos) filename))    subname));; (strip-pathname "root:popo:titi:file.a");; (strip-ext "root:popo;titi;file.a");; (strip-ext (strip-pathname "root:popo;titi:file.a"))#|(mapc #'(lambda (x) (progn                       (ccl:set-mac-file-type x "FASL")                      (format t "set ~S to type lib~%" x)))      (list-files "PW-LIB:Esquisse" "lib" ))|#