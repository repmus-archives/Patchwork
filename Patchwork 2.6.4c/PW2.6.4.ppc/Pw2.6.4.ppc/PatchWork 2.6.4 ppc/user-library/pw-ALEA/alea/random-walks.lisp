;========================================================================= ;;                     RANDOM WALKS;;=========================================================================  ;;          V1.0;;                       functions by Mikhail Malt   1991 Paris IRCAM(in-package "ALEA")(ccl::export '(randwalk1 randwalk2 randwalkX brownian2 achorripsis i1/f seq1/f markov1 markov2  mat-trans matrice1));============================================================================(defunp randwalk1 ((nc fix/float (:value 0.0)) (bsup fix/float (:value 100.0))                   (binf fix/float (:value 0.0)) (long fix>0 (:value 20.0))                  (pamax fix (:value 4))) list"Random walk, where <pamax> indicates the maximal step of the random walk,<nc> the initial value,<long> the length of the sequence and <binf> and <bsup> the inferior boundary and the superior boundary.Warning: boudaries are considered as elastic. "(let ((res) (cn nc) (pamax (+ pamax 1)))  (dotimes (n (- long 1) res)    (newl res (setf nc                      (let ((lap 0))         (setf lap   (* (random pamax) (if (< (/ (random 100) 100) .5) (- 1) 1 )))         (if (> (+ nc lap) bsup) (- (* bsup 2) (+ nc lap))             (if (< (+ nc lap) binf) (- (* binf 2) (+ nc lap)) (+ nc lap))) )                          ))) (cons cn (reverse res))))(defunp randwalk2 ((nc midic) (bsup midic (:value 7200)) (binf midic (:value 4800)) (long fix>0 (:value 20))                  (pamax fix (:value 4))) list"Random walk, where <pamax> indicates the maximal step of the random walk in semi-tones,<nc> the initial value in midicents,<long> the length of the sequence and <binf> and <bsup> the inferior boundary and the superior boundary.Warning: boudaries are considered as elastic."(let ((res) (cn nc) (pamax (+ pamax 1)))  (dotimes (n (- long 1) res)    (newl res (setf nc                      (let ((lap 0))         (setf lap   (* 100 (random pamax) (if (< (/ (random 100) 100) .5) (- 1) 1 )))         (if (> (+ nc lap) bsup) (- (* bsup 2) (+ nc lap))             (if (< (+ nc lap) binf) (- (* binf 2) (+ nc lap)) (+ nc lap))) )                          ))) (cons cn (reverse res)))) (defunp randwalkX ((nc midic) (bsup midic (:value 7200)) (binf midic (:value 4800)) (long fix>0 (:value 20))                  (pamax fix (:value 4)) ( prox  fix>0 (:value 1))) list"Random walk, where <pamax> indicates the maximal step of the random walk according to the index <prox>. If <prox> = 1, <pamax>  will be in semi-tone, If <prox> = 2, <pamax>  will be in quarter-tone, If <prox> = 4, <pamax>  will be in height-tone,  i.e. <pamax>  will change into 1/<prox>  of one semi-tone,<nc> the initial value in midicents,<long> the length of the sequence and <binf> and <bsup> the inferior boundary and the superior boundary.Warning: boudaries are considered as elastic."(let ((res) (cn nc) (pamax (+ pamax 1)))  (dotimes (n (- long 1) res)    (newl res (setf nc                      (let ((lap 0))         (setf lap   (* 100  (/ 1 prox) (random pamax) (if (< (/ (random 100) 100) .5) (- 1) 1 )))         (if (> (+ nc lap) bsup) (- (* bsup 2) (+ nc lap))             (if (< (+ nc lap) binf) (- (* binf 2) (+ nc lap)) (+ nc lap))) )                          ))) (cons cn (reverse res)))) (defunp  brownian1 ((nc fix/float (:value 50.0)) (bsup fix/float (:value 100.0))                     (binf fix/float (:value 0.0)) (long fix>0 (:value 20))                  (sigma fix/float (:value 2.0))) list"Random walk, simulation of the brownian motion. <sigma> is associated with the <bandwidth> of the gaussian distribution,<nc> the initial value ,<long> the length of the sequence and <binf> and <bsup> the inferior boundary and the superior boundary.Warning: boudaries are considered as elastic."(let ((res) (cn nc))  (dotimes (n (- long 1) res)    (newl res (setf nc                      (let ((lap 0))         (setf lap   (*  (gauss 0 sigma)))         (if (> (+ nc lap) bsup) (- (* bsup 2) (+ nc lap))             (if (< (+ nc lap) binf) (- (* binf 2) (+ nc lap)) (+ nc lap))) )                          ))) (cons cn (reverse res)))) (defunp  brownian2 ((nc midic) (bsup midic (:value 7200)) (binf midic (:value 4800)) (long fix>0 (:value 20))                  (sigma fix/float (:value 2.0))) list"Random walk, simulation of the brownian motion. <sigma> is associated with the <bandwidth> of the gaussian distribution,<nc> the initial value in midi-cents,<long> the length of the sequence and <binf> and <bsup> the inferior boundary and the superior boundary in midi-cents.Warning: boudaries are considered as elastic."(let ((res) (cn nc))  (dotimes (n (- long 1) res)    (newl res (setf nc                      (let ((lap 0))         (setf lap   (* 100 (gauss 0 sigma)))         (if (> (+ nc lap) bsup) (- (* bsup 2) (+ nc lap))             (if (< (+ nc lap) binf) (- (* binf 2) (+ nc lap)) (+ nc lap))) )                          ))) (cons cn (reverse res)))) (defunp  achorripsis ((nc midic) (bsup midic (:value 7200)) (binf midic (:value 4800)) (long fix>0 (:value 20))                  (g fix/float (:value 20.0))) list"Random walk is based on the model used by Iannis Xenakis in Achorripsis. ( <g> is associated to the linear distribution), <nc> the initial value in midicents,<long> the length of the sequence and <binf> and <bsup> the inferior boundary and the superior boundary in midicents.Warning: boudaries are considered as elastic."(let ((res) (cn nc))  (dotimes (n (- long 1) res)    (newl res (setf nc                      (let ((lap 0))         (setf lap   (* 100 (* g (- 1 (sqrt (/ (random 1000) 1000))))                        (if (< (/ (random 100) 100) .5) (- 1) 1 )))         (if (> (+ nc lap) bsup) (- (* bsup 2) (+ nc lap))             (if (< (+ nc lap) binf) (- (* binf 2) (+ nc lap)) (+ nc lap))) )                          )))   (cons cn (reverse res)))) (defunp i1/f ((last fix (:value 0)) (n fix (:value 7))) list"Generates a value according to the 1/f distribution with a first value <last>, and where <n> is a parameter which defines the output scale values,  i.e. : the values will be comprised between 0 and (2^n -1).Ex:  If n=2   the values will be comprised between 0 and 3,       If n=4   the values will be comprised between 0 and 15,       If n=7   the values will be comprised between 0 and 127."  (let ((nw 0) (j)  ( l last) (k (/ (expt 2 n) 2)) (p (/ 1.0 (expt 2 n))))    (prog ()      label      (setf j (floor (/ l k)))      (if (= j 1) (setf l (- l k)))      (setf nw (+ nw (* k                        (if (< (/ (random 1000.0) 1000.0) p) (- 1.0 j) j))))      (setf k (/ k 2.0))      (setf p (* p 2.0))      (if (> k 1.0) (go label) (return nw)))))(defunp seq1/f ( (n fix (:value 7)) (long fix>0 (:value 30))  (prim fix (:value 0))) list"Generates a list of values according to the 1/f distribution where <prim> is the initial value,<long> the length of the sequence, and where <n> is a parameter which defines the output scale values,  i.e. : the values will be comprised between 0 and (2^n -1).Ex:  If n=2   the values will be comprised between 0 and 3,       If n=4   the values will be comprised between 0 and 15,       If n=7   the values will be comprised between 0 and 127. "  (let ((list)  (last prim))    (dotimes (count (- long 1) list)      (setf list (cons (setf last (i1/f last n)) list)) )    (cons prim(reverse list))))(defunp  markov2 (( l list)  (prim fix>0)  (long fix>0 (:value 50))) list "Generation of sequences of length <long>  from a markovian matrix written in the list <l>, where <prim> is the first element of the resulting sequence.In the list <l> the transition is considered as made from the element of the line to the element of the column.  "       (let ((i prim) (seq) )         (dotimes (x (- long 1) seq)           (setf i (do ((indice 1 (+ indice 1))                        (u (/ (random 1000.0) 1000.0))                        (valeur 0))      ; dŽf de var                       ((> valeur u) (- indice 1))                     (setf valeur (+ valeur (nth  (- indice 1) (nth  (- i 1)  l))))))           (setf seq (cons i seq)))         (cons prim (reverse seq))))(defunp  markov1 (( l list)  (prim fix>0)  ) numbers? "Generation of an index from a markovian matrix written in the list <l>, where <prim> is the first element of the resulting sequence.In the list <l> the transition is considered as made from the element of the line to the element of the column."           (do ((indice 1 (+ indice 1))                        (u (/ (random 1000.0) 1000.0))                        (valeur 0))      ; dŽf de var                       ((> valeur u) (- indice 1))                     (setf valeur (+ valeur (nth  (- indice 1) (nth  (- prim 1)  l))))))