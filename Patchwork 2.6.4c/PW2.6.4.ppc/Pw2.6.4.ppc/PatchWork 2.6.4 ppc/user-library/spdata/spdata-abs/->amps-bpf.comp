(in-package :pw)(progn (setf (fdefinition 'user-comp-abstr::|->amps-bpf|) (eval (list 'function (list 'lambda '(common-lisp-user::amps0 common-lisp-user::ampmax1) (list 'x-append (list 'list (list 'const 'common-lisp-user::ampmax1)) ''(0) (list 'cond (list (list '> (list 'g* (list 'g-max (list 'spdata:par-spdata (list 'const 'common-lisp-user::amps0) ''spdata:amps)) ''1000) (list 'const 'common-lisp-user::ampmax1)) (list 'first (list 'list (list 'g* (list 'flat (list 'let '(common-lisp-user::|#:\|*enum-value*1780\||) (list 'mapcar (list 'function (list 'lambda '(common-lisp-user::|#:\|*local-val*1781\||) '(setf common-lisp-user::|#:\|*enum-value*1780\|| common-lisp-user::|#:\|*local-val*1781\||) (list 'x-append ''(0) (list 'min 'common-lisp-user::|#:\|*enum-value*1780\|| (list 'g* (list 'const 'common-lisp-user::ampmax1) ''0.001)) ''(0)))) (list 'spdata:par-spdata (list 'const 'common-lisp-user::amps0) ''spdata:amps)))) ''1000) (list 'print (list 'const ''"warning !! : ampmax < max from amps:")) (list 'print (list 'g* (list 'g-max (list 'spdata:par-spdata (list 'const 'common-lisp-user::amps0) ''spdata:amps)) ''1000))))) (list t (list 'g* (list 'flat (list 'let '(common-lisp-user::|#:\|*enum-value*1782\||) (list 'mapcar (list 'function (list 'lambda '(common-lisp-user::|#:\|*local-val*1783\||) '(setf common-lisp-user::|#:\|*enum-value*1782\|| common-lisp-user::|#:\|*local-val*1783\||) (list 'x-append ''(0) (list 'min 'common-lisp-user::|#:\|*enum-value*1782\|| (list 'g* (list 'const 'common-lisp-user::ampmax1) ''0.001)) ''(0)))) (list 'spdata:par-spdata (list 'const 'common-lisp-user::amps0) ''spdata:amps)))) ''1000))) ''(0)))))) (setf (get 'user-comp-abstr::|->amps-bpf| '*type-intypes*) '((&required (common-lisp-user::amps0 list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list nil)) (common-lisp-user::ampmax1 list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list nil))) (&optional) (&rest))) (setf (get 'user-comp-abstr::|->amps-bpf| '*type-outtype*) 'nil) (let ((box (make-pw-standard-box 'c-patch 'user-comp-abstr::|->amps-bpf|))) (set-view-position box 15 15) (add-patch-box *active-patch-window* box)))