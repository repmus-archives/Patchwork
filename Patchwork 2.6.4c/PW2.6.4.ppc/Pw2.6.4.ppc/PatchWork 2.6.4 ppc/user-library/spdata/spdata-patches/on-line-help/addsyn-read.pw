(in-package :pw)(make-win 'c-pw-window "addsyn-read" 2687026 23134758 (list (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 14418209 (list "with <par-spdata> applied to a spdata-seq object, values for one slot (here amps) are returned for all frames. The format is as follows: ((times....) (frame values..) (frame values...) ...) for that specified slot, here amps. Do not confuse with <par-spdata-seq> which displays values for a specified partial number evolving in time.") 7995626) (sbox 'c-pw-resize-x 'const "const" nil 720928 (list "\"spdata-patches:data;clarcourt.sf.format\"") 2228484) (sbox 'c-pw-resize-x 'const "const" nil 11665424 (list "1") 2228271) (sbox 'c-patch 'spdata:par-spdata "par-spdata" nil 11600110 (list "()" 1)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 3539108 (list "read additive synthesis data and lock buffer") 2162850) (sbox 'c-patch-buffer 'c-patch-buffer:buffer "buffer" nil 6750316 '(0) 2228270) (sbox 'c-patch 'spdata:par-spdata-seq "par-spdata-seq" nil 11796555 (list "()" 1 1)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 15400965 (list "choose partials to display (here 1rst partial). The output format is ((times ..) (values ..)) that can be scale and used directly in a BPF object") 5374130) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 6160712 (list "the spdata slot is a list of spdata objects, one for each frame; one can select a particular frame with <posn-match> , display and process it as a simple spdata (here the first frame (0) is selected and the slot amps is displayed.") 7733423) (sbox 'c-patch 'spdata:par-spdata "par-spdata" nil 14680263 (list "()" 1)) (sbox 'c-pw-functional 'spdata:addsyn-read "addsyn-read" nil 3670096 (list "nil" 2)) (sbox 'c-patch 'posn-match "posn-match" nil 8978670 (list "(1 2)" 0)) (sbox 'c-patch 'get-slot "get-slot" nil 6095088 (list "()" "spdata"))) (list (list 3 0 11) (list 5 0 10) (list 6 0 5) (list 6 2 2) (list 9 0 5) (list 10 0 1) (list 11 0 12) (list 12 0 5)) t)