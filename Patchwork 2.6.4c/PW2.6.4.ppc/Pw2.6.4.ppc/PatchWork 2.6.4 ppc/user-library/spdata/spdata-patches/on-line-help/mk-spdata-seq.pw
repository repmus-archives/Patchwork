(in-package :pw)(make-win 'c-pw-window "mk-spdata-seq" 2686979 23396945 (list (sbox 'c-pw-resize-x 'mc->f "mc->f" nil 7733382 (list 6000) 2228270) (sbox 'c-pw-resize-x 'const "const" nil 393465 (list "8") 2228327) (sbox 'c-pw-resize-x 'const "const" nil 458764 (list "(3600 4500 4800 6000 6400)") 2228401) (sbox 'c-patch 'g* "g*" nil 5177548 (list 0 0.001)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 3539345 (list "creating a simple series of spdata object: each object is an harmonic spectrum which amplitudes proportional to frequency") 4784294) (sbox 'c-pw-functional 'epw::harm-series "harm-series" nil 3145823 (list 3600 1 1 1 7)) (sbox 'c-patch 'spdata:mk-spdata-seq "mk-spdata-seq" nil 16187535 (list "nil" "()")) (sbox 'c-patch 'spdata:par-spdata-seq "par-spdata-seq" nil 19071127 (list "()" 0 1)) (sbox 'c-patch 'spdata:par-spdata "par-spdata" nil 19464440 (list "()" 3)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 15401304 (list "a spdata-seq object is made of a list of spdata object and a list of delays in 1/10 second ticks (as for the <chordseq> module). Delays are converted in absolute time. The <par-spdata-seq module prints the evolution in time of one slot (here freqs) for one partial (here the partial 1). The output format is ((times....) (slot values ...))") 8519917) (sbox 'c-patch 'spdata:mk-spdata "mk-spdata" nil 8388827 (list 0 0 0 0 60 1)) (sbox 'c-patch 'arithm-ser "arithm-ser" nil 5374267 (list 1 1 10)) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 8651112 (list "The output of mk-spdata is a list of spdata objects; each object can be accessed with the <posn-match> module. The buffer is needed also because the output of the <mk-spdata> module is of type spdata and not of type list") 6684871) (sbox 'c-patch-buffer 'c-patch-buffer:buffer "buffer" nil 13435124 '(0) 2228270) (sbox 'c-patch 'posn-match "posn-match" nil 16449777 (list "(1 2)" 1)) (sbox 'c-pw-resize-x 'const "const" nil 13566054 (list "(10 30 40 20)") 2228347)) (list (list 0 0 5) (list 3 0 0) (list 5 0 2) (list 5 4 1) (list 6 0 15) (list 6 1 13) (list 7 0 6) (list 8 0 14) (list 10 0 0) (list 10 1 3) (list 10 3 11) (list 11 2 1) (list 13 0 10) (list 14 0 13)) t)