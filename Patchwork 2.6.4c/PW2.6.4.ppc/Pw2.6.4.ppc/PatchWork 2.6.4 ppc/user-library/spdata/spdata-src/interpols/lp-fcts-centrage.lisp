(in-package "SPDATA");fonctions centrage NEW;-------------------------------;---- fonctions centrage -------(defun moy (freqs amps)  (/ (apply '+ (mapcar '* freqs amps))(apply '+ amps)));(float (moy '(1 2 3 4)'(1 1 1 1)))(defun ecart (freqs amps)  (let ((moy (moy freqs amps)))    (expt      (/        (apply '+            (mapcar #'(lambda (x y) (* (expt (- x moy) 2) y)) freqs amps)            )(apply '+ amps)     1/2) )));(float (ecart '(10 20)'(1 10)));-----------------------;--> with bandwith -----(defun moy-corr (freqs amps bws)  (let ((weigths (mapcar #'amp-corr amps bws)))    (/ (apply '+ (mapcar '* freqs weigths))(apply '+ weigths))));(float (moy-corr '(1 2 3 4)'(1 1 1 1)'(1 1 1 10)))(defun ecart-corr (freqs amps bws)  (let ((moy-c (moy-corr freqs amps bws))        (weigths (mapcar #'amp-corr amps bws)))     (/ (expt     (apply '+            (mapcar #'(lambda (x y) (* (expt (- x moy-c) 2) y)) freqs weigths)            )     1/2) (apply '+ weigths))));(float (ecart-corr '(10 20)'(1 1)'(1 1)));-------------------------------------;------- fonctions distribution-------(defun gauss (x moy ecart)  (let ((v (expt (* 2 pi) 1/2)))    (if (zerop ecart) nil        (* (/ 1 (* ecart v))(expt 2.7 (- (/ (expt (- x moy) 2)(* 2 (expt ecart 2)))))))));(gauss 100 100 100);-------------------------------------;-- transformation -------------------(defun modif-midic (midic amp  mmid1 mmid2 sigma-midi1 sigma-midi2)"modifie amp de midic en lui appliquant la transformée Gauss1->Gauss2"(* amp (/ (gauss midic mmid2 sigma-midi2)(gauss midic mmid1 sigma-midi1))));-------------------------------------;-- modules sp::PW -------------------(defunp L-moy        ((spdata object (:type-list (list spdata spdata-seq)))         (Lf-typ menu (:menu-box-list (("midic" . "midic") ("Hz" . "Hz"))                                      :type-list (no-connection)))         ) list        "calcule la fréquence moyenne d'un objet spdatasi les  BWs existent elles ponderent les amplitudes (en 1/bw)si midic est sélectionné, le résultat est en midic et le calcul est fait sur les hauteurs en midics des partiels"   (cond ((and (= (length (amps spdata))(length (bws spdata)))              (equal "midic" Lf-typ))         (moy-corr (pw::f->mc (freqs spdata)) (amps spdata) (bws spdata)))        ((and (= (length (amps spdata))(length (bws spdata)))              (equal "Hz" Lf-typ))         (moy-corr (freqs spdata) (amps spdata) (bws spdata)))        ((and (= 0 (length (bws spdata)))              (equal "midic" Lf-typ))         (moy (pw::f->mc (freqs spdata)) (amps spdata)))        ((and (= 0 (length (bws spdata)))              (equal "Hz" Lf-typ))         (moy (freqs spdata) (amps spdata)))))(defunp L-ecart        ((spdata object (:type-list (list spdata spdata-seq)))         (Lf-typ menu (:menu-box-list (("midic" . "midic") ("Hz" . "Hz"))                                      :type-list (no-connection)))) list        "calcule la dispersion (écart-type) en fréquences d'un objet spdatasi les  BWs existent elles ponderent les amplitudes (en 1/bw)si midic est sélectionné, le résultat est en midic et le calcul est fait sur les hauteurs en midics des partiels"           (cond ((and (= (length (amps spdata))(length (bws spdata)))              (equal "midic" Lf-typ))         (ecart-corr (pw::f->mc (freqs spdata)) (amps spdata) (bws spdata)))        ((and (= (length (amps spdata))(length (bws spdata)))              (equal "Hz" Lf-typ))         (ecart-corr (freqs spdata) (amps spdata) (bws spdata)))        ((and (= 0 (length (bws spdata)))              (equal "midic" Lf-typ))         (ecart (pw::f->mc (freqs spdata)) (amps spdata)))        ((and (= 0 (length (bws spdata)))              (equal "Hz" Lf-typ))         (ecart (freqs spdata) (amps spdata)))))(defunp L-stat-modif        ((spdata object (:type-list (list spdata spdata-seq)))         (scalm object (:type-list (list spdata spdata-seq)))         (scals object (:type-list (list spdata spdata-seq)))         (Lf-typ menu (:menu-box-list (("midic" . "midic") ("Hz" . "Hz"))                                      :type-list (no-connection)))) list        "calcule la moy et la dispersion de spdata puis effectueune transformée gaussienne en multipliant la moy par scalmet la dispersion par scalssi Lftyp est Hz, tous les calculs (moy ecart) se font en Hzsinon en midic"           (let* ((moy1  (L-moy spdata Lf-typ))         (ecart1  (L-ecart spdata Lf-typ))         (moy2  (* scalm moy1))         (ecart2  (* scals ecart1))         (to-spdata (copy-instance spdata)))    (print "coin")    (setf (amps to-spdata)          (if (equal "Hz" Lf-typ)                        (mapcar #'(lambda (freq amp)                        (modif-midic freq amp moy1 moy2 ecart1 ecart2))                    (freqs to-spdata)(amps to-spdata))                        (mapcar #'(lambda (freq amp)                        (modif-midic (pw::f->mc freq) amp moy1 moy2 ecart1 ecart2))                    (freqs to-spdata)(amps to-spdata))            )) to-spdata))       (defunp L-moy-modif ((vfreqs list) (vamps list)(vbws list)                     (Lf-typ menu (:menu-box-list (("midic" . "midic") ("Hz" . "Hz"))                                                  :type-list (no-connection)))                     (m integer)(sigma integer)) list        "old pour compatibilité"           (declare (ignore vfreqs vamps vbws Lf-typ m sigma))  (error "fonction non opérationnelle, utilisez maintenant L-stat-modif"))(pw-addmenu *analyse-menu*  '(L-moy))(pw-addmenu *analyse-menu*   '(L-ecart));;;;;(pw-addmenu *spd-processing*  '(L-moy-modif))(pw-addmenu *spd-processing*  '(L-stat-modif))(export '(L-moy L-ecart L-moy-modif L-stat-modif))