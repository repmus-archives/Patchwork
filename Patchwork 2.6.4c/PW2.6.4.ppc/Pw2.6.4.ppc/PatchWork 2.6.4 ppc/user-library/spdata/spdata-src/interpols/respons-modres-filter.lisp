;==============================; NEW FILE : RESPONSE SVP                 (HPST IRCAM 31/05/95); NEW FILE : adaptation to create 3D grafs  (LP UPV 30/04/96);==============================;=====================; DEFINE ENVIRONMENT;=====================(in-package "SPDATA");=====================; BASIC FORMULARS;=====================(DEFUN FRQ/BW->COEFS (frq bw &optional (SR 4096))  (let* ((R (exp (/ (* (- pi) bw) SR)))         ;band width coeeficient         (G (- 1 R))                            ;normalisation factor         (P (* -2 R (cos (/ (* 2 pi frq) SR)))) ;frequency coefficient         (Q (* R R)))                           ;decay coefficient    (list R G P Q)))(DEFUN TWO-POLE-AMP (time G P Q) ;calculate amplitude response         (let* ((2xT (* time 2))          (Bc1 (* P (cos time)))          (Bc2 (* Q (cos 2xT)))          (Bs1 (* P (sin time)))          (Bs2 (* Q (sin 2xT)))                    (pos (+ 1 Bc1 Bc2))          (neg (- 0 Bs1 Bs2)))          (/ G (sqrt (+ (* pos pos) (* neg neg))))))(DEFUN AMP-RESPONSE (frq bw &optional (SR 4096) (N 64))  (if (> frq (/ SR 2))(make-list (1+ N) :initial-element 0)  (let* ((coefs (frq/bw->coefs frq bw SR))       ; OBS! found a BUG!         (P     (nth 2 coefs))                   ; SR = Nyquist, and therefore         (Q     (nth 3 coefs)))                  ; must it be * by 2      (loop for i from 0 to pi by (/ pi N)             collect  (two-pole-amp i 1 P Q)))));(amp-response 200 20);============ with spdata modres values ==============(defun amps-response (spdata &optional (SR 4096) (N 64))"N nombre de points, la frŽquence de chaque point i est f=(i/N)*(SR/2)"  (let ((L (make-list (1+ N) :initial-element 0)))    (dotimes (x (length (freqs spdata)) L)    (setf L (mapcar '+ L (AMP-RESPONSE (nth x (freqs spdata))                                       (nth x (bws spdata)) SR N))))))(defun response (spdata time &optional (SR 4096) (N 64))"N nombre de points, la frŽquence de chaque point i est f=(i/N)*(SR/2)"  (let ((L (make-list (1+ N) :initial-element 0)))    (dotimes (x (length (freqs spdata)) L)    (setf L (mapcar '+ L (mapcar #'(lambda(elt)                             (* elt (nth x (amps spdata))                                (expt 2.7 (- (* (nth x (bws spdata)) time)))))                         (AMP-RESPONSE (nth x (freqs spdata))(nth x (bws spdata)) SR N)))))));(defun MatrixResponse (spdata dur &optional (SR 4096) (N 64)(M 64));(loop for i from 0 to dur by (/ dur M);      collect (response spdata i SR N)))(defun MatrixResponse (spdata dur filename &optional (SR 4096) (N 64)(M 64)(amp "lin"))(with-open-file (stream filename                              :direction :output                              :if-exists :rename-and-delete                               :if-does-not-exist :create)(if (equal amp "lin")  (dotimes (x (1+ M))    (dolist (elt (response spdata (* dur (/ x M)) SR N))      (format stream "~a~a" elt #\Tab))      (format stream "~%" ))(dotimes (x (1+ M))    (dolist (elt (response spdata (* dur (/ x M)) SR N))      (format stream "~a~a" (pw::lin->db elt) #\Tab))      (format stream "~%" )))    (format t "---> print in file: ~a~%" filename)));---------------------------------------------------------------------;---------------------------------------------------------------------(DEFUN POWER-RESPONSE (response mode)  (epw::deep-mapcar/1 #'expt (pw::g-scaling/max response 1.0) (1+ mode)))(DEFUN SCALED-AMP-RESPONSE (amp-dB mode response)    (pw::g-scaling (epw::lin->db (power-response response mode)) -96 amp-dB))(DEFUN MASK-RESPONSE (amps)    (apply #'mapcar #'(lambda(&rest amp) (apply #'max amp)) amps));(setf ab (scaled-amp-response 0.0 0 (amp-response 22  0 128)));(setf cd (scaled-amp-response 0.0 0 (amp-response 39 10 128)));(mask-response (list ab cd));---------------------------------------------------------------------;---------------------------------------------------------------------(export '(Response MatrixResponse));===========; END FILE;===========