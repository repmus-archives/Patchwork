;;;;======================================================================================;;;;[chabot] 22.11.93               pw-process-spdata.lisp;;;;;;;; C-spdata Class;                 ;;;;;;;; Class: C-spdata;;;; Slots:;;;;      ;;;; Constructor:;;;;      ;;;; Methods:;;;;      ;;;;=======================================================================================(in-package :spdata)(export '(filter-spdata scale-spdata ))(import '( pw:defunp           pw::make-num-lambda));;(shadowing-import '(pw::C-ttybox));; these modules for both objects spdata and spdata-seq(defunp filter-spdata ((spdata object (:type-list (list spdata spdata-seq)))                       (fct (menu (:menu-box-list (( "band-pass" . band-pass)                                                    ("low-pass" . low-pass)                                                     ("high-pass" . high-pass)                                                      ("reject-band" . reject-band) ("eq" . eq)                                                      ("neq" . neq)))))                       (val fix/fl/list)                        (slot (menu (:menu-box-list (( "amps" . amps) ("freqs" . freqs)                                                     ("partials" . partials)                                                     ("weights" . weights)                                                     ("bws" . bws)                                                     ("size" . size))))))        spdata "creates a new spdata object with only partials data satisfying the test"  (when spdata    (cond ((listp spdata) (mapcar #'(lambda(x) (filter-spdata x fct val slot)) spdata)) ;; recursive call in case val is list          ;;((listp val) (mapcar #'(lambda(x) (filter spdata fct x slot)) val))          (t (filter spdata fct val slot))) ;; spdata is spdata or spdata-seq    ))(defunp scale-spdata ((spdata object(:type-list (list spdata spdata-seq)))                        (fct (menu (:menu-box-list (( "mul" . mul)                                                   ("max" . max)                                                   ("min-max" . min-max)))))                       (val list)                        (slot (menu (:menu-box-list (( "amps" . amps) ("freqs" . freqs))))))        spdata "creates a new spdata object with values the selected slot scaled between"  (when spdata       (cond ((listp spdata) (mapcar #'(lambda(x) (scale-spdata x fct val slot)) spdata)) ;; recursive call in case val is list          ;;((listp val) (mapcar #'(lambda(x) (scale spdata fct x slot)) val))          (t (scale spdata fct val slot)))    ))