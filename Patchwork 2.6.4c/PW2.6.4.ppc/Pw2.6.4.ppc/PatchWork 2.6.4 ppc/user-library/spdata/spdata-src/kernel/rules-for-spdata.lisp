(in-package "PW")(defvar *2pis* 6.28318);=================================;bpf-float from chant;=================================; floating point bpf(defclass C-break-point-function-float ()  ((x-points :initform nil :initarg :x-points :accessor x-points)   (y-points :initform nil :initarg :y-points :accessor y-points)))(defun make-break-point-function-float (tlist vlist)   (cond ((and (numberp tlist)(numberp vlist))            (setq tlist (list tlist) vlist (list vlist)))          ((numberp tlist)            (setq tlist (pw::cumul-diff-lst-sum-from-0 (make-list (1- (length vlist)) :initial-element tlist))))            ((numberp vlist)            (setq vlist (make-list (length tlist) :initial-element vlist))))      (make-instance 'C-break-point-function-float :x-points tlist :y-points vlist))(defmethod give-x-points ((self C-break-point-function-float))(x-points self)) (defmethod give-y-points ((self C-break-point-function-float))(y-points self)) ;============================================================(defun give-scaled-bpf-copy (bpf dur low high)  (let* ((tlst (pw::scale-low-high  (x-points bpf) 0 dur nil))         (vlst (pw::scale-low-high (y-points bpf) low high nil)))      (make-break-point-function-float tlst vlst)));=================================;=== jitter & vibrato ============;=================================(defun give-randi-value-points (tot-time low high sr)  (let ((rnd-points)        (tot-time-ticks (* tot-time 100))         (sr-ticks (* sr 100)))     (repeat (1+ (round (/ tot-time-ticks sr-ticks)))       (push (+ low (random (- high low))) rnd-points))    rnd-points));(length (give-randi-value-points 5.0 -1.0 1.0 .1))(defun make-randi-break-point-function (dur low high sr)  (setq dur (float dur) low (float low) high (float high) sr (float sr))  (let* ((rnd-points (give-randi-value-points dur low high sr))         (tlst (pw::interpol (length rnd-points) 0 dur t)))    (make-break-point-function-float tlst rnd-points)))  ;(time (repeat 700 (make-randi-break-point-function 2.0 0.0 1.0 0.5)));(setq rn1 (make-randi-break-point-function 2.0 0.0 1.0 0.5));(ypoints rn1) ;(xpoints rn1) ;(time (repeat 6000  (interpol5 2.5 2.0 4.0 0 100)))  ;(time (repeat 6000  (bpf-out  rn1 0.9 () t))) ;=================================; jitter3 object(defclass C-jitter3 ()  ((jitter1 :initform nil)   (jitter2 :initform nil)   (jitter3 :initform nil)))(defun make-jitter3-object (dur t1 t2 t3 j1 j2 j3)  (setq j1 (float (/ j1 2)))  (setq j2 (float (/ j2 2)))  (setq j3 (float (/ j3 2)))  (let ((jitter (make-instance 'C-jitter3)))    (setf (slot-value jitter 'jitter1)       (make-randi-break-point-function dur (- j1) j1 t1))      (setf (slot-value jitter 'jitter2)       (make-randi-break-point-function dur (- j2) j2 t2))      (setf (slot-value jitter 'jitter3)       (make-randi-break-point-function dur (- j3) j3 t3))     jitter))(defun jitter3 (jitter-object time ref-val)  (let ((jitter-val           (+ (pw::bpf-out (slot-value jitter-object 'jitter1) time () t)              (pw::bpf-out (slot-value jitter-object 'jitter2) time () t)              (pw::bpf-out (slot-value jitter-object 'jitter3) time () t))))     (* ref-val (1+ jitter-val))));=================================(defclass C-vibrato ()  ((last-time :initform 0 :accessor last-time)   (last-phase :initform 0 :accessor last-phase)));=================================; new-time = current-time (defun vibrato (vib-obj new-time ref-val vibfreq vibamp)  (let* ((last-time (last-time vib-obj))         (last-phase (last-phase vib-obj))         (time-inrc (- new-time last-time))         (phase-incr (* time-inrc vibfreq *2pis*))         (new-phase (+ phase-incr last-phase)))  (setf (last-time vib-obj) new-time)  (setf (last-phase vib-obj) new-phase)  (* ref-val (1+ (* vibamp (sin new-phase))))));instead of 1+  exp(defun make-vibrato-object () (make-instance 'C-vibrato));=================================(defclass C-voice-vibrato ()  ((amp-randi1 :initform ())   (amp-randi2 :initform ())   (freq-randi1 :initform ())   (freq-randi2 :initform ())   (vib-object :initform ())));=================================; new-time = current-time (defun voice-vibrato (vib-obj time ref-val vibfreq vibamp)  (let ((jitter-amp           (+ (pw::bpf-out (slot-value vib-obj 'amp-randi1) time () t)              (pw::bpf-out (slot-value vib-obj 'amp-randi2) time () t)))        (jitter-freq           (+ (pw::bpf-out (slot-value vib-obj 'freq-randi1) time () t)              (pw::bpf-out (slot-value vib-obj 'freq-randi2) time () t))))   (vibrato (slot-value vib-obj 'vib-object)                 time ref-val (* vibfreq (1+ jitter-freq)) (* vibamp (1+ jitter-amp)))))(defun make-voice-vibrato-object   (dur vala1 vala2 tvala1 tvala2 valf1 valf2 tvalf1 tvalf2)   (setq vala1 (float (/ vala1 2)))  (setq vala2 (float (/ vala2 2)))  (setq valf1 (float (/ valf1 2)))  (setq valf2 (float (/ valf2 2)))  (let ((voice-vib-obj (make-instance 'C-voice-vibrato)))     (setf (slot-value voice-vib-obj 'vib-object) (make-instance 'C-vibrato))     (setf (slot-value voice-vib-obj 'amp-randi1)        (make-randi-break-point-function dur (- vala1) vala1 tvala1))     (setf (slot-value voice-vib-obj 'amp-randi2)        (make-randi-break-point-function dur (- vala2) vala2 tvala2))     (setf (slot-value voice-vib-obj 'freq-randi1)        (make-randi-break-point-function dur (- valf1) valf1 tvalf1))     (setf (slot-value voice-vib-obj 'freq-randi2)        (make-randi-break-point-function dur (- valf2) valf2 tvalf2))     voice-vib-obj)) #|;(time (repeat 200 (make-chant-voice-vibrato-object 1.0  0.01 0.01  5.0 5.0  0.01 0.01  1.0 1.0)))     (setf vvib1 (make-chant-voice-vibrato-object 1.0  0.01 0.01  1.0 1.0  0.11 0.11  1.0 1.0));(time (repeat 1500 (chant-voice-vibrato vvib1 0 440  5 0.05)))(chant-voice-vibrato vvib1 0.1 440 5 0.05)(chant-voice-vibrato vvib1 0.4 440 5 0.05)(chant-voice-vibrato vvib1 0.8 440 5 0.05)(for (i 0 0.01 1) (print (chant-voice-vibrato vvib1 i 440 5 0.05)))(defun vvibtest1 ()  (let (res)    (for (i 0 0.01 2)        (push (chant-voice-vibrato vvib1 i 440 5.1 0.02)  res))    (scale-low-high (nreverse res) 0 100 t)))(setf ff (vvibtest1))|#;********************************************;applications(in-package "SPDATA")(defunp sp-jitter3        ((t1 fix/float (:value 0.5))         (t2 fix/float (:value .111))         (t3 fix/float (:value 1.218))         (j1 fix/float (:value 0.01))         (j2 fix/float (:value 0.01))         (j3 fix/float (:value 0.01))         (spdata-seq list)) spdata        "make multiple random variations of the value of freqs with frequencies equal to 1/t1, 1/t2 and 1/t3 and amplitude j1, j2, j3"  (let ((parameter          (pw::make-jitter3-object           (duration spdata-seq) t1 t2 t3 j1 j2 j3))        (Lspd ())(frames ()))    (dolist (spdata (get-slot spdata-seq 'spdata))      (progn (push               (scale spdata 'mul                     (pw::jitter3 parameter (frame spdata) 1)                     'freqs)              Lspd)             (push (frame spdata) frames)))    (mk-spdata-seq (reverse frames) (reverse Lspd))));**************************************************************;**************************************************************(defunp sp-voice-vibra        ((vala1 fix/float (:value 0.01))           (vala2 fix/float (:value 0.01))         (tvala1 fix/float(:value 5.0))          (tvala2 fix/float (:value 5.0))         (valf1 fix/float (:value 0.01))         (valf2 fix/float (:value 0.01))          (tvalf1 fix/float (:value 1.0))         (tvalf2 fix/float (:value 1.0))         (vamp fix/float (:value 0.02))         (vfreq fix/float (:value 5.1))         (spdata-seq list)) spdata        "make sinusoid periodic and random variations of the value of freqs with frequency respect. equal to vfreq 1/tala1, 1/tala2, 1/tala3 and amplitude respect. vamp vala1, vala2, vala3"           (let ((parameter          (pw::make-voice-vibrato-object          (duration spdata-seq) vala1 vala2 tvala1 tvala2 valf1 valf2 tvalf1 tvalf2))        (Lspd ())(frames ()))    (dolist (spdata (get-slot spdata-seq 'spdata))      (progn (push               (scale spdata 'mul                     (pw::voice-vibrato parameter (frame spdata) 1 vfreq vamp)                     'freqs)              Lspd)             (push (frame spdata) frames)))    (mk-spdata-seq (reverse frames) (reverse Lspd))))