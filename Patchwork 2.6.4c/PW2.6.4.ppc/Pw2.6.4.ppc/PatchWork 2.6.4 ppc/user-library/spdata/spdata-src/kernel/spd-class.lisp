;;;;======================================================================================;;;;[chabot] 22.11.93               spd-class.lisp;;;;                 ;;;;;;;; Class: C-spd;;;; Slots:;;;;      ;;;; Constructor:;;;;      ;;;; Methods:;;;;      ;;;;=======================================================================================(in-package :spdata)(export '(C-spd   typ file  last-loaded-file))(import '(epw:arithm-ser ccl:mac-namestring epw:l-min epw:l-max epw:g-scaling pw::get-slot           pw::make-num-lambda));(shadowing-import '( pw::arithm-ser));; root class for spdata and spdata-seq(defclass C-spd ()   ((typ :initform () :initarg :typ :accessor typ) ; typ is addsyn, modres, iana   (file :initform () :initarg :file :accessor file)   (last-loaded-file :initform "root:" :accessor last-loaded-file :allocation :class)   (debug :initform () :accessor debug :allocation :class)));;;------------------------- PW-MAX --------------------------------------------; ---------------------------------------------- qlist ----------------------------------(defmethod write-qlist-header ((self C-spd) out)  (format out "max v2;~%")  (format out "#N vpatcher 101 126 501 526 ~D;~%" -1) ;; no cpu  (format out "#P comment 23 33 190 4 Spectral data of typ ~D: ~D;~%" (typ self)          (pw:strip-pathname (file self)))  (format out "#P inlet 72 90 15;~%") ;5 left in  (format out "#P inlet 120 90 15;~%") ;4 middle in  (format out "#P inlet 168 90 15;~%") ;3 right in  (format out "#N qlist;~%"));; change xc 23.9.94 parametre msg pour messaqge fin de note construit sur <msg>-off(defmethod write-qlist-tail ((self C-spd) out msg)  (format out "#X append ~D 0 \\;;~%" (concatenate 'string (string-downcase (string (first msg))) "-off"))  (format out "#P newobj 72 140 50 1 qlist;~%") ;2  (format out "#P newex 72 180 106 1 nqlist-del.abs;~%") ;1  (format out "#P outlet 168 250 15;~%") ; 0  (format out "#P connect 5 0 2 0;~%")   ; left in to qlist             (format out "#P connect 4 0 1 1;~%"); middle in to middle nqlist-del in  (format out "#P connect 3 0 1 2;~%") ; right in to right nqlist-del in  (format out "#P connect 2 0 1 0;~%") ; qlist to nqlist-del in  (format out "#P connect 1 0 2 0;~%") ;nqlist-del to qlist  (format out "#P connect 1 1 0 0;~%") ;nqlist-del to out  (format out "#P pop;~%")  (format t "done~%"))(defmethod write-spdata-qlist ((self C-spd) filename msg                                freq-method amp-method phase-method reset-flag resfact-flag)"writes addsyn object to qlist"; makes qlist subpatch  (with-open-file (out filename                      :direction :output :if-exists :supersede :if-does-not-exist :create);; writes patch header plus a general comment      (write-qlist-header self out)            ;; ecrire les donnees de la sequence      (format t "writing qlist ~D in file ~D~%" (typ self) filename)      (when  amp-method (normalize-amps self 1))      (when resfact-flag (compute-resfact self)) ;; avant (compute-resfact self)      ;; constructing command lines      (write-qlist-data self out msg                         freq-method amp-method phase-method reset-flag resfact-flag)      (write-qlist-tail self out msg)    ));; --------------------------------------------------------------------------;; these three methods will be overwritten by methods in C-spdata and C-spdata-seq(defmethod normalize-amps ((self C-spd) fact) (declare (ignore fact)))(defmethod compute-resfact ((self C-spd)))(defmethod write-qlist-data ((self C-spd) fd msg freq-method amp-method phase-method                              reset-flag resfact-flag) (declare (ignore fd msg freq-method amp-method phase-method  reset-flag resfact-flag)));; writes time tagged data to qlist ; data prepared in pars with format collected in fmt with ttag time tag;; used to write spectrum reset data;; correction xc 7.9.94 replace nop with nop 0(defmethod write-ttag-data ((self C-spd) out fmt ttag msg pars)      (format out "#X append ~D nop 0 \\;;~%" ttag) ;; start with NOP line with time tag delay      (case (length pars)        (1  (mapcar #'(lambda (x) (format out fmt   x)) (first pars)))        (2 (mapcar #'(lambda (x y) (format out fmt   x y)) (first pars) (second pars)))        (3 (mapcar #'(lambda (x y z) (format out fmt   x y z))                    (first pars) (second pars) (third pars)))        (4 (mapcar #'(lambda (x y z w) (format out fmt   x y z w))                    (first pars) (second pars) (third pars) (fourth pars)))        (otherwise (warn "too many parameters in message ~D = ~D (4 max)~%"  msg (length pars)))        ))