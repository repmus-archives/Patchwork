;;;;======================================================================================;;;;[chabot] 22.11.93               spdata-seq.lisp;;;;;;;; C-spdata Class;                 ;;;;;;;; Class: C-spdata-seq;;;; Slots:;;;;      ;;;; Constructor:;;;;      ;;;; Methods:;;;;      ;;;;=======================================================================================(in-package :spdata)(export '(C-spdata-seq))(defmethod read-addsyn-data ((self C-spdata-seq) filename beg end)  (with-open-file (in filename :direction :input)    (with-slots (file frames duration) self      (let (curline readframe cursize curaddsyn-frame  (continueflag t) (calculeflag ()))        (while (and continueflag (setf cursize (read in nil nil))) ;; loop on frames          (setf readframe (read in))          (cond ((and (not end) (not beg))                 (setf calculeflag t)                 )                ((and end (not beg))                 (setf calculeflag (<= readframe end)))                ((and beg end)                 (setf calculeflag  (cond ((< readframe beg) ())                                          ((<= readframe end )  t)                                          (t  ())))                 )                ((and (not end) beg)                 (setf calculeflag (>= readframe beg)))                )          (setf curaddsyn-frame (make-instance 'C-spdata))          (with-slots (frame partials freqs amps normalized-amps phases size) curaddsyn-frame              (when calculeflag                 (setf frame readframe)                (setf size cursize)                (format t "~Ds : ~D partials~%" frame cursize)                )             (dotimes (i cursize)               (cond (calculeflag  ;; when partial to read, push items in lists, if not, read all line and dump                      (setf partials (cons (read in) partials))                      (setf freqs (cons (read in) freqs))                      (setf amps (cons (read in) amps))                      (setf phases (cons (read in) phases)))                     (t (setf curline (read-line in))) ;; dump                     )               )             (when calculeflag                (setf partials (reverse partials))               (setf freqs (reverse freqs))               (setf amps (reverse amps))              ; (setf normalized-amps (normalize-amp amps))               (setf phases (reverse phases))               (setf frames (cons curaddsyn-frame frames))               )          ))        (setf frames (reverse frames))        (let ((theframes frames) begtime curframe) ;; readjusting time in frames in case beg was > 0          (when frames             (setf curframe (pop theframes))            (setf begtime (frame curframe))            (setf (frame curframe) 0.0)            (while (setf curframe (pop theframes))              (setf (frame curframe) (- (frame curframe) begtime))              )            )          )        (setf file (mac-namestring filename))        (format t "finished reading additive synthesis  file ~D from time ~5F to ~5F ~%" filename beg end)        (setf duration (frame curaddsyn-frame))  ))))(defmethod write-qlist ((self C-spdata-seq) filename msgs srate size)"writes addsyn object to qlist"; makes qlist subpatch  (with-open-file (out filename                      :direction :output :if-exists :supersede :if-does-not-exist :create);; writes patch header plus a general comment                  (format out "max v2;~%")                  (format out "#N vpatcher 101 126 501 526 ~D;~%" -1) ;; no cpu                  (format out "#P newex 181 176 106 1 nqlist-del;~%")                  (format out "#P comment 40 20 190 4 ADDITIVE SYNTH DATA: ~D;~%" (file self))                  (format out "#P inlet 294 84 15;~%")                  (format out "#P inlet 252 85 15;~%")                  (format out "#P inlet 201 87 15;~%")                  (format out "#N qlist;~%");; ecrire les donnees de la sequence                  (format t "writing qlist ~D in file ~D~%" (file self) filename)                  (format t "from time ~Ds to ~Ds~%" (frame (first (frames self))) (frame (car (last (frames self)))))                  (let (curamp (prevfreq 0) curfreq curtime (prevtime 0) curfreqs curamps curphases curframe (theframes (frames self))                                 (spectrum (make-array '(513) :initial-element '0.0 :element-type 'single-float)))                    (while (setf curframe (pop theframes))                      (write-qlist-data curframe out msgs srate size)                      )                    )                  (format out "#P newobj 203 136 50 196618 qlist;~%")                  (format out "#P connect 3 0 5 2;~%")                                (format out "#P connect 2 0 5 1;~%")                  (format out "#P connect 1 0 0 0;~%")                  (format out "#P connect 5 0 0 0;~%")                  (format out "#P connect 0 0 5 0;~%")                  (format out "#P pop;~%")                  (format t "done~%")                  )  )#|(setq condexpr #'(lambda (x val) (and (>= x (car val)) (<= x (cadr val)))))(defun ee (x val)  (mapcar condexpr (list x) (list val)))(ee 1 '( 0 2))|#