(in-package :spdata)(export '(normalize-amps compute-resfact))(import '(epw:arithm-ser ccl:mac-namestring epw:l-min epw:l-max epw:g-scaling pw::get-slot           pw::make-num-lambda));(shadowing-import '(mk-pars mk-fmt write-ttag-data apply-all-method));;;; utilities(defmethod normalize-amps ((self C-spdata) scaling)  (when (amps self)  (let ((s0 (* scaling (reduce '+ ( amps self)))) result)    (format t " normalizing amplitudes; normalisation factor ~4F~%" s0)     (setq result (if (not (=  s0 0.0)) (mapcar #'(lambda(x) (/ x s0)) ( amps self))                      ( amps self)));    (format t "check: ~4F~%" (reduce '+ result))     (setf (normalized-amps self) result))  ));; computes resonance factor(defmethod compute-resfact ((self C-spdata))  (when (and (bws self) (not (member 0 (bws self) :test #'=)))  ;; computing resonance factor = (sqrt (/ (sum ((amps self) / (bws self)^2)) (sum (amps self))))           (setf (resfact self) (sqrt (/ (reduce #'+ (mapcar #'(lambda (x y) (/ x (* y y))) (amps self) (bws self)))                                            (reduce #'+ (amps self)))))                  (format t "resonance factor ~8F~%" (resfact self))                  (resfact self)))