(in-package :pw)(make-win 'c-pw-window "rd-fmt->csnd-tabs" 2818061 21562072 (list (sbox 'c-pw-functional 'spdata:addsyn-read "addsyn-read" nil 589830 (list "nil" 0)) (sbox 'c-enum-collect-source 'enum "enum" nil 6095229 (list "(1 2)")) (sbox 'c-enum-collect-source 'enum "enum" nil 2884056 (list "(1 2)")) (sbox 'c-patch-buffer 'c-patch-buffer:buffer "buffer" t 2556025 '(0) 2228270) (sbox 'c-map-first 'pwmap "pwmap" nil 8782203 (list "foo" "(1 2)" "foo")) (sbox 'c-patch-multi-function 'multi-bpf "bpf" nil 8519680 (list 10 "100" "Untitled") 7077972 '(((11468800 11468810 11468820 11337758 11272232 11468850 10485820 11141190 10813520 10551386 11010148 11141230 10879096 10158210 11272332 11010198 10158240 10092714 10027188 11141310 10879176 9830610 10289372 11010278 9896176 10551546 655620) nil :bpf) ((11468800 11468810 11468820 11337758 11272232 11468850 10485820 11141190 10813520 10551386 11010148 11141230 10879096 10158210 11272332 11010198 10158240 10092714 10027188 11141310 10879176 9830610 10289372 11010278 9896176 10551546 655620) (22937600 23068682 23068692 23068702 22151208 23986226 27131964 22872134 21364816 20643930 21889124 23068782 20971640 20578434 22282380 22872214 20381856 19792042 20906164 22544574 20906184 19529938 21037276 21692646 19398896 22675706 11403524) (26476544 26476554 26476564 35323934 28508200 28573746 34013244 30539846 29884496 28377178 30670948 31326318 29360248 28639362 30670988 34209942 30212256 29950122 28049588 34078910 29491400 29556946 27984092 29098214 27656432 29819130 17105156) (35061760 35061770 35061780 46858270 44367912 43843634 45219900 45285446 42336336 40829018 43778148 46202990 43057272 40697986 44236940 46203030 41681056 38928554 41353396 45416638 42467528 39846098 40829148 42926310 39846128 38273274 24838404) (42663936 42663946 42663956 57999390 57212968 57737266 55050300 60031046 59113552 56361050 60162148 55836782 57278584 57868418 50135180 57213078 56885408 48758954 52232372 55247038 52035784 49545426 55705820 50069734 47251696 47251706 30998788) (52494336 52494346 52494356 70385694 66322472 65404978 67698748 68091974 63045712 71237722 70778980 62849134 62128248 60358786 62324876 68747414 62390432 59769002 57671860 59703486 59310280 59048146 61341916 57540838 57802992 57540858 33620228) (61210624 76349450 76349460 76349470 77922344 76283954 82182204 78970950 74580048 80937050 75694180 76218478 75694200 70647938 76218508 72679574 73138336 78053546 72417460 68223166 74252488 69206226 73007324 75628774 73662704 68485370 41025796) (68812800 68812810 68812820 93716510 85655592 86048818 90636348 85196870 90308688 85065818 89849956 80937070 86179960 86442114 91685004 86179990 84934816 84738218 86048948 83624126 84607176 87621842 83558620 85459174 85065968 72876282 50200836)))) (sbox 'c-pw-resize-x 'mat-trans "mat-trans" nil 3342595 (list "((1 2))") 2228270) (abst 'c-abstract-m 'user-abstraction::amps->db "amps->db" nil 5636533 (list 0) '((spdata::l1? epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list)))) 'nil (make-win 'c-pw-window "amps->dB" 8716443 13500718 (list (sbox 'c-pw-functional 'mapcar "mapcar" nil 9371733 (list "1+" "(1 2)")) (sbox 'c-abstract-out 'absout "absout" nil 12058737 (list "amps->dB")) (sbox 'c-pw-resize-x 'lin->db "lin->db" nil 6553765 (list 1) 2228270) (sbox 'c-patch 'g/ "g/" nil 3932385 (list 0 1000)) (sbox 'c-pw-resize-x 'make-num-fun "make-num-fun" nil 3801093 (list "(f(x)= (* 10 (+ 90 (max x -90))))") 2228438) (sbox 'c-abstract-in 'absin "absin" nil 983169 (list "l1?" 1))) (list (list 0 0 4) (list 0 1 2) (list 1 0 0) (list 2 0 3) (list 3 0 5)) nil)) (sbox 'c-patch 'spdata:par-spdata "par-spdata" nil 393434 (list "()" 1)) (sbox 'c-patch 'g+ "g+" nil 8323542 (list 0 0)) (sbox 'c-patch-multi-function 'multi-bpf "bpf" nil 14483551 (list 10 "100" "Untitled") 7077972 '(((6356992 6357002 6488084 6357042 6422588 6357072 6422618 6357122 6422668 6291616 6488244 6357202 6488294 6291696 6422778 6291716 6357262 6029602 6226230 5374272 6488394 6357342 6029672) nil :bpf) ((6356992 6357002 6488084 6357042 6422588 6357072 6422618 6357122 6422668 6291616 6488244 6357202 6488294 6291696 6422778 6291716 6357262 6029602 6226230 5374272 6488394 6357342 6029672) (51183616 50987028 51445790 51249202 51380304 51707994 51511446 51773600 51511466 51577012 51511486 51708114 51511526 51642608 51577082 51708164 51511566 51642648 51577122 51642668 51577162 51642708 51642728) (44761088 44761098 43450388 45023282 44695622 44892240 44695652 44957816 46399618 44761228 44826774 43384992 46858440 45940946 46923996 44826874 47120644 45089048 45023522 47186220 44630346 44499294 45744488) (38207488 37748756 38076456 37486652 37683270 37224528 38273114 37093486 37355640 36831362 37945484 38273184 38142122 38797492 37028050 37224668 38535398 36765946 37814532 38404396 37093686 38469962 37355880) (30277632 30277642 30343188 30343198 31981608 31850546 30015548 33226842 32243832 29950092 30474410 30343348 31654078 30212296 29688028 30277892 30212366 32309528 32112930 29753654 32178506 30212446 30736744) (25624576 25624586 26804244 25296926 26148904 24641596 25755718 26083418 25690212 25755758 25690232 25886850 27132044 25362642 26149094 25362682 26804494 26018082 27132214 25690432 25559370 27066718 26804584) (19267584 19267594 19333140 19267624 19333170 19267654 19333200 19202138 19333220 19005570 19398796 19267734 18022570 19267784 18743506 19595484 18415856 19530008 19333410 19398956 18809172 19333470 19267944) (12845056 12845066 12910612 12779560 12845106 12779580 12845126 12714074 12779620 12714134 12845216 12714154 12845256 12779730 12845276 12714214 12976378 12648748 12910912 12779850 12845396 12714334 12779880)))) (abst 'c-abstract-m 'user-abstraction::ins "ins" nil 14877248 (list) 'nil 'nil (make-win 'c-pw-window "ins" 3276901 14549339 (list (sbox 'c-abstract-out 'absout "absout" nil 11141277 (list "ins")) (sbox 'c-patch 'arithm-ser2 "arithm-ser2" nil 1310743 (list 10 1 8)) (sbox 'c-patch 'arithm-ser2 "arithm-ser2" t 1769696 (list 40 1 8)) (sbox 'c-pw-functional 'cs-e:make-obj-snd "make-obj-snd" nil 1704069 (list "1" "0" "6" ".5" "(440)" "(99)" "2" "3" "4" "(99)" "(99)" "(99)" "(99)" "(99)"))) (list (list 0 0 3) (list 3 4 1) (list 3 5 2)) nil)) (sbox 'c-patch 'spdata:par-spdata "par-spdata" nil 5636099 (list "()" 0)) (sbox 'c-patch 'bpf-red "bpf-red" nil 8585312 (list "(1 2)" 7 23)) (sbox 'c-pw-functional 'mapcar "mapcar" nil 11993184 (list "second" "(1 2)")) (sbox 'c-patch-multi-function 'multi-bpf "bpf" nil 14549278 (list 10 "100" "Untitled") 7077972 '(((0 3473418 9699348 1376286 5570600 1441842 60 3211334 3080282 100 2424942 120 2293890 1704076 524438 160 2949290 180 190 1048776 210 250 260) nil :bpf) ((0 3473418 9699348 1376286 5570600 1441842 60 3211334 3080282 100 2424942 120 2293890 1704076 524438 160 2949290 180 190 1048776 210 250 260) (0 20 1966110 786472 50 6357052 70 80 262234 100 130 655500 721046 160 180 190 200 210 220 230 240 2883834 260) (0 786442 7012372 5767198 5832744 5308466 5308476 7602246 3866714 7536740 7536750 1769602 9371788 4128918 4522144 7864490 5898420 5374152 8323282 2490598 2687216 250 260) (0 9568276 11272222 7733298 7798844 9371718 8192080 9633882 7929956 9961582 10027128 10289282 8781964 9765014 8192170 9306292 7930046 9175240 9568466 9109724 6488304 250 260) (0 30 6422568 8519730 3276870 4128848 7798874 7340132 2687086 8388728 6684802 140 8323232 7078058 1310900 3473598 458952 5570770 7012572 230 4063472 3145978 260) (0 10 5570580 30 60 1048646 4259920 589914 100 3932270 655480 4915330 5111948 150 7864490 6684852 4718782 9175250 1310940 9044198 6947056 4194554 260) (0 8585246 3735602 7667772 70 3080272 90 3145828 110 1114232 196738 2818188 150 2293920 170 2228404 190 1114312 210 2949340 240 1245434 260) (0 30 393256 5177394 60 70 9306202 458852 110 8913016 7733378 140 8388758 9175200 170 7274676 6095038 200 7602396 6291686 6881520 250 260)))) (sbox 'c-pw-text-box:c-pw-text-box 'c-pw-text-box::text "text" nil 7799348 (list "pour visualisation des amplitudes dŽcalŽes facteur mul (50 par ex.)") 6422604) (sbox 'c-patch 'posn-match "posn-match" nil 5636245 (list "(1 2)" 0)) (sbox 'c-pw-functional 'mapcar "mapcar" nil 12058909 (list "second" "(1 2)")) (sbox 'c-patch 'bpf-red "bpf-red" nil 8585504 (list "(1 2)" 7 23)) (sbox 'c-pw-functional 'mapcar "mapcar" nil 16253124 (list "first" "(1 2)")) (sbox 'c-pw-functional 'mapcar "mapcar" nil 16252937 (list "first" "(1 2)")) (sbox 'c-patch 'get-slot "get-slot" nil 99 (list "()" "spdata")) (sbox 'c-patch 'posn-match "posn-match" nil 3211578 (list "(1 2)" 0)) (abst 'c-abstract-m 'user-abstraction::xbpf->tabs252 "xbpf->tabs" nil 13238658 (list "(1 2)" 10) '((sequence list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (common-lisp-user::begin fix/float (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fix/fl" :type-list (fixnum float)))) 'nil (make-win 'c-pw-window "xbpf->tabs" 3342395 20709752 (list (sbox 'c-pw-resize-x 'flat "flat" nil 14418213 (list "(1 2)") 2228270) (sbox 'c-patch 'user-comp-abstr::|pargen57| "pargen57" nil 8388781 (list "nil" 1024 100 0)) (sbox 'c-abstract-out 'absout "absout" nil 18219228 (list "xbpf->tabs")) (sbox 'c-pw-resize-x 'g-max "g-max" nil 9044086 (list "(1 2)") 2228270) (sbox 'c-patch 'arithm-ser2 "arithm-ser2" nil 2621620 (list 0 1 5)) (sbox 'c-map-first 'pwmap "pwmap" nil 15073394 (list "foo" "(1 2)" "foo")) (sbox 'c-abstract-in 'absin "absin" nil 393234 (list "sequence" 1)) (sbox 'c-enum-collect-source 'enum "enum" nil 3407919 (list "(1 2)")) (sbox 'c-enum-collect-source 'enum "enum" nil 4653333 (list "(1 2)")) (sbox 'c-patch 'cs-e:table "table" t 9568527 (list 1 0 1024 7 "(1 2)")) (sbox 'c-pw-resize-x 'length "length" nil 2097263 (list "(1 2)") 2228270) (sbox 'c-abstract-in 'absin "absin" nil -65367 (list "begin" 2)) (sbox 'c-patch 'get-slot "get-slot" nil 7143432 (list "()" "y-points"))) (list (list 0 0 9) (list 1 0 7) (list 1 2 3) (list 2 0 5) (list 3 0 12) (list 4 0 11) (list 4 2 10) (list 5 0 7) (list 5 1 0) (list 5 2 8) (list 7 0 6) (list 8 0 4) (list 9 0 8) (list 9 4 1) (list 10 0 6) (list 12 0 7)) nil)) (sbox 'c-patch 'arithm-ser2 "arithm-ser2" nil 131452 (list 0 1 25)) (sbox 'c-pw-resize-x 'length "length" nil 4850304 (list "(1 2)") 2228270) (sbox 'c-pw-functional 'cs-e:edit-sco-obj "edit-sco-obj" nil 16318945 (list "nil" "(1 2)" 0 0 0)) (sbox 'c-patch 'cs-e:table "table" nil 11010521 (list 1 0 1024 10 "(1)")) (sbox 'c-patch-multi-function 'multi-bpf "bpf" nil 8323263 (list 10 "100" "Untitled") 7077972 '(((0 3473418 9699348 1376286 5570600 1441842 60 3211334 3145808 3080282 100 2424942 120 2293890 1704076 524438 160 2949290 180 190 1048776 210 220 230 240 250 260) nil :bpf) ((0 3473418 9699348 1376286 5570600 1441842 60 3211334 3145808 3080282 100 2424942 120 2293890 1704076 524438 160 2949290 180 190 1048776 210 220 230 240 250 260) (0 10 20 1966110 786472 50 6357052 70 80 262234 100 110 120 130 655500 721046 160 170 180 190 200 210 220 230 240 2883834 260) (0 786442 7012372 5767198 5832744 5308466 5308476 7602246 6619216 3866714 7536740 7536750 5243000 1769602 9371788 4128918 4522144 7864490 5898420 5505214 5374152 8323282 3670236 2490598 2687216 250 260) (0 3276810 9568276 11272222 8978472 7733298 7798844 9371718 8192080 9633882 7929956 9961582 10027128 10289282 8781964 9765014 8978592 8192170 9306292 7930046 9175240 9568466 9109724 7733478 6488304 250 260) (0 10 20 30 6422568 8519730 5963836 3276870 4128848 7798874 7340132 2687086 8388728 6684802 140 5374102 8323232 7078058 1310900 3473598 458952 5570770 7012572 230 4063472 3145978 260) (0 10 5570580 30 40 50 60 1048646 4259920 589914 100 3932270 655480 4915330 5111948 150 4260000 7864490 6684852 4718782 6750408 9175250 1310940 9044198 6947056 4194554 260) (0 10 4587540 8585246 5505064 3735602 7667772 70 3080272 90 3145828 110 1114232 196738 2818188 150 2293920 170 2228404 190 1114312 210 2949340 1245414 240 1245434 260) (0 10 20 30 393256 5177394 60 70 2490448 9306202 458852 110 8913016 7733378 140 8388758 9175200 170 7274676 6095038 200 5439698 7602396 6291686 6881520 250 260)))) (sbox 'c-pw-resize-x 'mat-trans "mat-trans" nil 5701728 (list "((1 2))") 2228270) (abst 'c-abstract-m 'user-abstraction::xbpf->tabs252 "xbpf->tabs" nil 16056708 (list "(1 2)" 40) '((sequence list (:view-size 917540 :doc-string "lst" :value '(1 2) :dialog-item-text "(1 2)" :type-list (list))) (common-lisp-user::begin fix/float (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fix/fl" :type-list (fixnum float)))) 'nil (make-win 'c-pw-window "xbpf->tabs" 3342395 20709752 (list (sbox 'c-pw-resize-x 'flat "flat" nil 13500634 (list "(1 2)") 2228270) (sbox 'c-patch 'user-comp-abstr::|pargen57| "pargen57" nil 8388781 (list "nil" 1024 100 0)) (sbox 'c-abstract-out 'absout "absout" nil 18219228 (list "xbpf->tabs")) (sbox 'c-pw-resize-x 'g-max "g-max" nil 9044086 (list "(1 2)") 2228270) (sbox 'c-patch 'arithm-ser2 "arithm-ser2" nil 2621620 (list 0 1 5)) (sbox 'c-map-first 'pwmap "pwmap" nil 15073394 (list "foo" "(1 2)" "foo")) (sbox 'c-abstract-in 'absin "absin" nil 393234 (list "sequence" 1)) (sbox 'c-enum-collect-source 'enum "enum" nil 3407919 (list "(1 2)")) (sbox 'c-enum-collect-source 'enum "enum" nil 4653333 (list "(1 2)")) (sbox 'c-patch 'cs-e:table "table" t 9568527 (list 1 0 1024 7 "(1 2)")) (sbox 'c-pw-resize-x 'length "length" nil 2097263 (list "(1 2)") 2228270) (sbox 'c-abstract-in 'absin "absin" nil -65367 (list "begin" 2)) (sbox 'c-patch 'get-slot "get-slot" nil 7143432 (list "()" "y-points"))) (list (list 0 0 9) (list 1 0 7) (list 1 2 3) (list 2 0 5) (list 3 0 12) (list 4 0 11) (list 4 2 10) (list 5 0 7) (list 5 1 0) (list 5 2 8) (list 7 0 6) (list 8 0 4) (list 9 0 8) (list 9 4 1) (list 10 0 6) (list 12 0 7)) nil)) (sbox 'c-patch 'g* "g*" nil 5636601 (list 50 127))) (list (list 1 0 23) (list 2 0 25) (list 3 0 22) (list 4 0 1) (list 4 1 9) (list 4 2 2) (list 5 1 17) (list 6 0 8) (list 7 0 1) (list 8 0 3) (list 9 0 7) (list 9 1 32) (list 10 0 21) (list 10 1 14) (list 12 0 3) (list 13 0 5) (list 14 1 13) (list 15 0 20) (list 15 1 18) (list 17 0 30) (list 17 1 25) (list 18 1 19) (list 19 0 29) (list 20 1 19) (list 21 1 13) (list 22 0 0) (list 23 0 6) (list 23 1 25) (list 24 0 15) (list 26 0 4) (list 27 1 11) (list 27 2 28) (list 27 3 24) (list 27 4 31) (list 29 1 4) (list 30 0 12) (list 31 0 10) (list 32 1 2)) t)