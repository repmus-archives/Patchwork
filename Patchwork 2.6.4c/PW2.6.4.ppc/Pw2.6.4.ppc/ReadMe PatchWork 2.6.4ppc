PATCHWORK Musical & Visual Programming Environment--------------------------------------------------© IRCAM and Mikael Laurson, 1990-1997PatchWork is a visual programming environment in MCL 4.0 that letsyou do whatever you might do in Lisp, but in a purely graphical way.It has many modules and libraries specialized for making, playingand notating music, but it can be used for any other purpose,as teaching and learning functional programming in Lisp.Installation ---------Just copy the "PatchWork 2.6.4 ppc" folder to your hard disk.If you already own MCL 4.0, it is wise to have the MCL folder at thesame level than the "PatchWork 2.6.4 ppc" folder, so PatchWork canlocalize it. If PatchWork cannot localize MCL 4.0, the first timeyou ask for the documentation of a PatchWork module, it will issue adialog "The help file could not be found. Would you like to locatethe file?". Just answer "no". Then everything will work fine.Launch PatchWork ----------------To launch PatchWork, double-click on the file "PW2.6.4.image" in thefolder "PatchWork 2.6.4 ppc:images". NEVER move or delete the files "image-init.lisp" and"PlayerSharedPPC" from the folder "PatchWork 2.6.4 ppc:images".Hardware and software requirement ---------------------------  Macintosh Power PC - System 7.5.2 or higher - 16 MB of RAM- minimum 8 MB of RAM for PatchWork itself, plus about 4 MB that willbe added to the system due to MCL 4.0 shared libraries and PatchWork's own shared libraried.You will be comfortable with a 12000 MB partition for PatchWork.There is nothing to install in the extensions folder, as all the shared libraries have been included in  the image.MIDI ----In order to get advantage from PatchWork MIDI capabilities, you mustconnect a MIDI interface to the modem port of your Mac. PatchWork 2.6.4 ppc uses MidiShare (tm) for Midi management. MidiShare is a realtime multitasks music operating system specially devised for the development of musical applications. Its innovative features and careful design, result of 6years of research and development at GRAME in Lyon, provide developers with a powerful and efficient toolbox for developing Midi applications.Midishare is simply installed by copying the MidiShare Control Panel to your ControlPanel folder in the System folder.MidiShare is compatible with OMS.  If you wish to connect PatchWork to OMS applicationsuch as Max or Vision, you must use OpenShare. OpenShare is a small application thatyou  launch before PatchWork and that stays in the background. Then you may use msConnect,in order to connect the input and output of PatchWork to whatever OMS application you like.MidiShare, OpenShare, msConnect, along with many other nice MIDI tools are provided to you  by courtesy of the GRAME, with this PatchWork distribution.Before using Midi with PatchWork, you MUST read :			Install MidiShare Readme			MidiShare Tools ReadMeMidiShare: © GRAME, 1989-1996.AppleScript---------PatchWork is fully scriptable and recordable. See the "Pw-Script.pdf" documentation file in "PatchWork documentation:PatchWork Libraries Doc:"Tutorials and docs-------------It is strongly recommended to follow the PatchWork tutorial in orderto learn the PatchWork basics. Open the file "PW-tutorial.pdf" inthe folder "PatchWork documentation:PatchWork tutorial" and followthe path. In the same folder, you will find a folder named"40-Tutorials". It contains the 40 Patchwork documents that arecommented in the tutorial. Please note that the tutorial chapters  "Hardwarerequirement", "Structure of folders", and "Launching PatchWork" areout of date, so you should rather refer to this Readme. Also, allreferences to PW 2.5.x should be replaced by PW 2.6.4.After reading  the tutorial, you will find useful things in  :PW-Introduction.pdf PW-Reference.pdf PW-Programming Guide.pdfPatchWork Libraries Doc:**You will find some sample PatchWork documents in the folder"Patchwork 2.6.4 ppc:documentation:sample patches"The tutorials are in Adobe pdf format. You'll need Acrobat Reader to open them. Some graphics may appear jagged : try a 110% zoom in in order to get a clean display.libraries-------There are plenty of interesting libraries in the folder " Patchwork 2.6.4 ppc:user-libaries:".To load a library, use the menu command "PWoper->Load Library". Then choose alibrary folder and load the file that is suffixed by ".lib" (e.g. esquisse.lib). The modules belonging to the library will appear in the Menu "UserLib", at the right of the PatchWork menubar.Be careful with memory when loading libraries as they may be quite heavy.  On-line doc and tutorial-----------------Keyboard command 'd'  when a module is selected inside a PatchWork window bringsa documentation of the module. Command 't' brings a tutorial. Check inside thelibraries folders : there are often folders containing sample documents (e.g."user-library:profile:profile-patches:profile-examples:" ).What's new in PatchWork 2.6.3 ppc--------------------------PatchWork 2.6.3 ppc has a smaller footprint in memory (5-7MB) than the previousbeta version of PatchWork ppc. The theoretical minimum memory partition isnow  8 MB,plus 4MB for the shared libraries.All the shared libraries are installed in the image itself, so there is no more extensionsto be installed in the system.PPCexceptionEnabler (that used to crash with other Ircam software) is not requiredanymore.'Abort' in the PWoper menu works.'Lisp' in the 'Apps' menu works, except if you have closed all the listeners.PatchWork uses MidiShare for Midi input and output.  It has now a very efficient androbust Midi play and record. You can play and record huge sequences while using themac interface (even open and load files!) without noticing any desynchronization. You canconnect PatchWork Midi input and output to OMS and MidiShare application, and youmay even record in a PatchWork editor what's being played in another PatchWork editor!You may have real time MidiPlay even while Lisp is garbaging.New PatchWork Modules :		midi-record		midi-load		midi-saveModules that have changed:		Play-objectPLAY-OBJECT object chan  &optional approx[function]play-object plays a note-object, a chord-object, a chord-line object, a measure-line object (rtm)or a list of such, connected to it. Typing 's' while the box is selected stops the play.chan:if 0, plays with regard to the channel information contained in the object.if > 0, plays the object on the specified channel. Micro-interval channels aretranslated accordingly.approx:The pitch approximation used. This can be the whole tone (approx = 1), semitone (approx  = 2),  quartertone (approx = 4, the default) or eighth-tone (approx = 8).Notes with microtonal accidentals are sent to different output channels accordingto the following mapping: chan (semitones), chan + 1 (eighth-tones), chan + 2 (quartertones),  chan + 3 (three-eighths tones).MIDI-RECORD delta[function]Midi sequences recorder.Select the box and type 'p' to enter the record mode.Select the box and type 's' to stop the recording.Output Menu:if 'chord' all the recorded notes will be collected into a chord. Output is a chord object.if 'chord line' a sequence will be recorded. Notes falling in a time interval of 'delta' will be considered as chords.delta is expressed in 1/100secs. Output is a chord-line object.Once the recording is done, the box may be evaluated as many time as required with differentdelta and output mode.MIDI-LOAD delta[function]MidiFile loader.Once evaluated, issues a choose-file-dialog that lets you select a MidiFile.Any Midifile format, any number of tracks is allowed. Tempo and tempo changeis recognized. Channels are kept.Notes falling in a time interval of 'delta' will be considered as chords.delta is expressed in 1/100secs. Output is a chord-line object.MIDI-SAVE objs[function]MidiFile saver.Once evaluated, issues a choose-file-dialog that lets you name a MidiFile.Generates a single-track MidiFile with tempo QuarterNote=60 and QuarterNote resolution = 480.Handles correctly micro-intervals on different channels, so playing from PatchWork orfrom your favorite sequencer is the same.Input may be any PatchWork object that could be played through play-object(chord, chord-line, measure-line (rtm) , or list of such)Bug fixes in PatchWork 2.6.4----------------------- Tempo continuous changes are correctly recognized when reading MidiFiles- Micro-intervals are correctly played - Midi Play tempo is now correct