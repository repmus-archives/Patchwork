10/10/96--------On n'utilise plus le scheduler pour le play Midi. Il y a une methode MidiPlay pourchaque classe PatchWork, et une methode generique MidiPlayAny qui positionne les parametres de approx, channel etc.On utilise Midishare et la librairie partagee PlayerPPCShared (Grame).Nouveau fichier : MidiPlay.lispNouveau fichier : PlayerPPC.lispVoici les fichiers qui ont ete modifies."PW:PW-Music;Editors;Rhythm;rtm-paging+kill.lisp" "PW:PW-Music;Editors;Rhythm;rtm-editor.lisp" "PW:PW-Music;Editors;MN;MN-editor.Lisp" "PW:PW-Music;Boxes;Midi;pw-midi-box.lisp" "PW:PW-Music;Boxes;Edit;rtm-patch.lisp" "PW:PW-Lib;MidiShare;PlayerPPC.lisp" "PW:PW-Lib;MidiShare;MidiShare.lisp" "PW:PW-Lib;MidiShare;MidiPlay.lisp" "PW:PW-kernel;PW-Graphics;Window+Menu;PW-menu.Lisp" "PW:PW-kernel;Environment;midi-note.Lisp" "PW:PW-kernel;Environment;Make-image.lisp" "PW:PW-kernel;Drivers+resources;Scheduler.Lisp" "PW:PW-kernel;Drivers+resources;MIDI.Lisp" "CL:PW-inits;PW-init.Lisp" "CL:PW-inits;Load+Update;make-PW-Music-image.lisp" "CL:PW-inits;Load+Update;kernel-files.lisp" -------------16/10/96-------------Midishare.lisp---------------;;---------------------------------------------------------------------------------;; 	 		MidiShare Startup and Quit Actions;;---------------------------------------------------------------------------------;;................................................................................: install-midishare-interface(defun install-midishare-interface ()  (ccl::def-load-pointers start-midi-share () (setf *midishare* (%get-ptr (%int-to-ptr #xB8))))  (unless (midishare)     (print "MidiShare not installed. PatchWork cannot play or record Midi.")));;;(error "MidiShare not installed")))Midi.lisp---------------;;;;Open MidiShare and connections(defun midi-open ()  (setf *pw-refnum* nil)  (setf *player* nil)  (if (setf *midi-share?* (midishare::midishare))    (progn      (setf *pw-refnum* (midishare::midiopen "PatchWork"))      (setf *filter* (midi-new-filter :chan t :port t :type t))      (midishare::midisetfilter *pw-refnum*  *filter*)      (midi-modify-filter  *filter*  :accept nil :type t)      (midishare::MidiConnect *pw-refnum* 0 t)      (midishare::MidiConnect 0 *pw-refnum*  t)      (setq  *player* (cl-user::open-player "PatchWorkPlayer"))      )    (print "MidiShare not present. PatchWork won't play Midi.")))MidiPlay.lisp-------------(defmethod MidiPlayANy ((object t) &optional (approx 2) (chanbase 1))  (when (and  midi::*pw-refnum* midi::*player* )    (let ((playerIdle))      (rlet ((myState :PlayerState))          (cl-user::getStatePlayer midi::*player* myState)         (when (= (cl-user::s-state myState) cl-user::kIdle) (setf playerIdle t)))      (unless playerIdle (print "Wait end of previous play!"))      (when playerIdle        (let ((seq (midishare::midinewseq)))          (setf *MidiShare-start-time* 0)          (MidiPlay object 0 approx chanbase seq 1000)          (cl-user::setalltrackplayer midi::*player* seq 480)          (cl-user::startplayer midi::*player*)          seq)))))(defmethod stop-play ((self c-patch))  (when midi::*player* (cl-user::stopplayer midi::*player*)))(defmethod stop-play ((self c-patch-polifrtm))  (when midi::*player* (cl-user::stopplayer midi::*player*)))(defmethod stop-play ((self C-patch-score-voice))   (when midi::*player* (cl-user::stopplayer midi::*player*)))(defmethod stop-play ((self C-patch-midi))   (when midi::*player* (cl-user::stopplayer midi::*player*)))(defmethod stop-all-staffs ((self C-mus-not-view))  (when midi::*player* (cl-user::stopplayer midi::*player*)))(defmethod stop-measure-line ((self C-measure-line))   (when midi::*player* (cl-user::stopplayer midi::*player*)))MidiRecord.lisp----------------(defmethod play ((self C-patch-record))  (unless *pw-recording-midi*    (when (and  midi::*pw-refnum* midi::*player* )      (print "Recording...")      (setf *pw-recorder* (cl-user::open-player "PatchWorkRecorder"))      (setf *pw-recording-midi* nil)      (when (> *pw-recorder* 0)        (setf *pw-recording-midi* t)        (cl-user::recordplayer *pw-recorder* 1)        (cl-user::startplayer *pw-recorder*)))))(defmethod patch-value ((self C-patch-save-midi) obj)  (declare (ignore obj))  (when (and  midi::*pw-refnum* midi::*player* )    (let ((name (CHOOSE-NEW-FILE-DIALOG)))      (when name        (let ((tempo-evnt (midishare::MidiNewEv midishare::typetempo))              recording-seq)          (midishare::date tempo-evnt 0)          (midishare::field tempo-evnt 0 1000000)          (rlet ((myInfo :MidiFileInfos))              (rset myInfo :MidiFileInfos.format 1)            (rset myInfo :MidiFileInfos.timedef 0)            (rset myInfo :MidiFileInfos.clicks 480)            (rset myInfo :MidiFileInfos.tracks 2)            (setf recording-seq (MidiSaveAny (patch-value (first (input-objects self)) (first (input-objects self)))))            (midishare::link tempo-evnt (midishare::firstEv recording-seq) )            (midishare::firstEv recording-seq tempo-evnt)            (cl-user::midi-file-save (mac-namestring name) recording-seq  myInfo)            (set-mac-file-type (mac-namestring name) :|Midi|)            (midishare::midifreeseq recording-seq)))))))(defmethod MidiSaveAny ((object t))  (when (and  midi::*pw-refnum* midi::*player* )    (setf *play-chseq-w/offset* t)    (let ((seq (midishare::midinewseq)))      (setf *MidiShare-start-time* 0)      (setf *play-chseq-w/offset* t)      (MidiPlay object 0 (compute-approx) 0 seq 480)      seq)))(defmethod patch-value ((self C-patch-load-midi) obj)  (declare (ignore obj))  (when (and  midi::*pw-refnum* midi::*player* )    (let ((name (CHOOSE-FILE-DIALOG)))      (when name        (let ((recording-seq (midishare::midiNewSeq))              (delta (patch-value (first (input-objects self)) (first (input-objects self))))              rep)          (rlet ((myInfo :MidiFileInfos))              (cl-user::midi-file-load (mac-namestring name) recording-seq  myInfo)            (when recording-seq              (print (list  "clicks" (cl-user::mf-clicks myInfo) "tracks" (cl-user::mf-tracks myInfo) "MidiFormat" (cl-user::mf-format myInfo)))              (setf rep (mievents2midilist recording-seq (cl-user::mf-clicks myInfo) ))              (midiseq2cl rep delta)              )))))))(defun mievents2midilist (seq units/sec)  (when (and  midi::*pw-refnum* midi::*player* )    (let (event initdate rep)      (setf event (midishare::firstEv seq))      (setf initdate (midishare::date event))      (while (not (%null-ptr-p event))        (case (midishare::type event)          (144  (unless *pw-recording-midi* (setf *midi-tempo* (midishare::tempo event))))          (0            (push (list (* 100 (midishare::pitch event))                       (convert-time (midishare::dur event) units/sec)                        (midishare::vel event)                       (1+ (midishare::chan event))                       (convert-time (- (midishare::date event) initdate) units/sec))                 rep))          (1            (if (= (midishare::vel event) 0)             (close-notes-on rep                              (* 100 (midishare::pitch event))                              (1+ (midishare::chan event))                             (midishare::date event) units/sec)             (push (list  (* 100 (midishare::pitch event))                           (midishare::date event)                           (midishare::vel event)                           (1+ (midishare::chan event))                          (convert-time (- (midishare::date event) initdate) units/sec)) rep)))          (2            (close-notes-on rep                            (* 100 (midishare::pitch event))                            (1+ (midishare::chan event))                           (midishare::date event) units/sec)))        (setf event (midishare::link event)))      (midishare::MidiFreeSeq seq)      (reverse rep))))